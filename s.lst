     1                                  %define T_void 				0
     2                                  %define T_nil 				1
     3                                  %define T_char 				2
     4                                  %define T_string 			3
     5                                  %define T_symbol 			4
     6                                  %define T_closure 			5
     7                                  %define T_boolean 			8
     8                                  %define T_boolean_false 		(T_boolean | 1)
     9                                  %define T_boolean_true 			(T_boolean | 2)
    10                                  %define T_number 			16
    11                                  %define T_rational 			(T_number | 1)
    12                                  %define T_real 				(T_number | 2)
    13                                  %define T_collection 			32
    14                                  %define T_pair 				(T_collection | 1)
    15                                  %define T_vector 			(T_collection | 2)
    16                                  
    17                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    18                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    19                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    20                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    21                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    22                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    23                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    24                                  
    25                                  %define OLD_RDP 			qword [rbp]
    26                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    27                                  %define ENV 				qword [rbp + 8 * 2]
    28                                  %define COUNT 				qword [rbp + 8 * 3]
    29                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    30                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    31                                  
    32                                  %macro ENTER 0
    33                                  	enter 0, 0
    34                                  	and rsp, ~15
    35                                  %endmacro
    36                                  
    37                                  %macro LEAVE 0
    38                                  	leave
    39                                  %endmacro
    40                                  
    41                                  %macro assert_type 2
    42                                          cmp byte [%1], %2
    43                                          jne L_error_incorrect_type
    44                                  %endmacro
    45                                  
    46                                  %macro assert_type_integer 1
    47                                          assert_rational(%1)
    48                                          cmp qword [%1 + 1 + 8], 1
    49                                          jne L_error_incorrect_type
    50                                  %endmacro
    51                                  
    52                                  %define assert_void(reg)		assert_type reg, T_void
    53                                  %define assert_nil(reg)			assert_type reg, T_nil
    54                                  %define assert_char(reg)		assert_type reg, T_char
    55                                  %define assert_string(reg)		assert_type reg, T_string
    56                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    57                                  %define assert_closure(reg)		assert_type reg, T_closure
    58                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    59                                  %define assert_rational(reg)		assert_type reg, T_rational
    60                                  %define assert_integer(reg)		assert_type_integer reg
    61                                  %define assert_real(reg)		assert_type reg, T_real
    62                                  %define assert_pair(reg)		assert_type reg, T_pair
    63                                  %define assert_vector(reg)		assert_type reg, T_vector
    64                                  
    65                                  %define sob_void			(L_constants + 0)
    66                                  %define sob_nil				(L_constants + 1)
    67                                  %define sob_boolean_false		(L_constants + 2)
    68                                  %define sob_boolean_true		(L_constants + 3)
    69                                  %define sob_char_nul			(L_constants + 4)
    70                                  
    71                                  %define bytes(n)			(n)
    72                                  %define kbytes(n) 			(bytes(n) << 10)
    73                                  %define mbytes(n) 			(kbytes(n) << 10)
    74                                  %define gbytes(n) 			(mbytes(n) << 10)
    75                                  
    76                                  section .data
    77                                  L_constants:
    78 00000000 00                      	db T_void
    79 00000001 01                      	db T_nil
    80 00000002 09                      	db T_boolean_false
    81 00000003 0A                      	db T_boolean_true
    82 00000004 0200                    	db T_char, 0x00	; #\x0
    83 00000006 11                      	db T_rational	; 5
    84 00000007 050000000000000001-     	dq 5, 1
    84 00000010 00000000000000     
    85 00000017 11                      	db T_rational	; 4
    86 00000018 040000000000000001-     	dq 4, 1
    86 00000021 00000000000000     
    87 00000028 11                      	db T_rational	; 3
    88 00000029 030000000000000001-     	dq 3, 1
    88 00000032 00000000000000     
    89 00000039 11                      	db T_rational	; 2
    90 0000003A 020000000000000001-     	dq 2, 1
    90 00000043 00000000000000     
    91 0000004A 11                      	db T_rational	; 1
    92 0000004B 010000000000000001-     	dq 1, 1
    92 00000054 00000000000000     
    93                                  
    94                                  section .bss
    95                                  free_var_0:	; location of null?
    96 00000000 ????????????????        	resq 1
    97                                  free_var_1:	; location of pair?
    98 00000008 ????????????????        	resq 1
    99                                  free_var_2:	; location of void?
   100 00000010 ????????????????        	resq 1
   101                                  free_var_3:	; location of char?
   102 00000018 ????????????????        	resq 1
   103                                  free_var_4:	; location of string?
   104 00000020 ????????????????        	resq 1
   105                                  free_var_5:	; location of symbol?
   106 00000028 ????????????????        	resq 1
   107                                  free_var_6:	; location of vector?
   108 00000030 ????????????????        	resq 1
   109                                  free_var_7:	; location of procedure?
   110 00000038 ????????????????        	resq 1
   111                                  free_var_8:	; location of real?
   112 00000040 ????????????????        	resq 1
   113                                  free_var_9:	; location of rational?
   114 00000048 ????????????????        	resq 1
   115                                  free_var_10:	; location of boolean?
   116 00000050 ????????????????        	resq 1
   117                                  free_var_11:	; location of number?
   118 00000058 ????????????????        	resq 1
   119                                  free_var_12:	; location of collection?
   120 00000060 ????????????????        	resq 1
   121                                  free_var_13:	; location of cons
   122 00000068 ????????????????        	resq 1
   123                                  free_var_14:	; location of display-sexpr
   124 00000070 ????????????????        	resq 1
   125                                  free_var_15:	; location of write-char
   126 00000078 ????????????????        	resq 1
   127                                  free_var_16:	; location of car
   128 00000080 ????????????????        	resq 1
   129                                  free_var_17:	; location of cdr
   130 00000088 ????????????????        	resq 1
   131                                  free_var_18:	; location of string-length
   132 00000090 ????????????????        	resq 1
   133                                  free_var_19:	; location of vector-length
   134 00000098 ????????????????        	resq 1
   135                                  free_var_20:	; location of real->integer
   136 000000A0 ????????????????        	resq 1
   137                                  free_var_21:	; location of exit
   138 000000A8 ????????????????        	resq 1
   139                                  free_var_22:	; location of integer->real
   140 000000B0 ????????????????        	resq 1
   141                                  free_var_23:	; location of rational->real
   142 000000B8 ????????????????        	resq 1
   143                                  free_var_24:	; location of char->integer
   144 000000C0 ????????????????        	resq 1
   145                                  free_var_25:	; location of integer->char
   146 000000C8 ????????????????        	resq 1
   147                                  free_var_26:	; location of trng
   148 000000D0 ????????????????        	resq 1
   149                                  free_var_27:	; location of zero?
   150 000000D8 ????????????????        	resq 1
   151                                  free_var_28:	; location of integer?
   152 000000E0 ????????????????        	resq 1
   153                                  free_var_29:	; location of __bin-apply
   154 000000E8 ????????????????        	resq 1
   155                                  free_var_30:	; location of __bin-add-rr
   156 000000F0 ????????????????        	resq 1
   157                                  free_var_31:	; location of __bin-sub-rr
   158 000000F8 ????????????????        	resq 1
   159                                  free_var_32:	; location of __bin-mul-rr
   160 00000100 ????????????????        	resq 1
   161                                  free_var_33:	; location of __bin-div-rr
   162 00000108 ????????????????        	resq 1
   163                                  free_var_34:	; location of __bin-add-qq
   164 00000110 ????????????????        	resq 1
   165                                  free_var_35:	; location of __bin-sub-qq
   166 00000118 ????????????????        	resq 1
   167                                  free_var_36:	; location of __bin-mul-qq
   168 00000120 ????????????????        	resq 1
   169                                  free_var_37:	; location of __bin-div-qq
   170 00000128 ????????????????        	resq 1
   171                                  free_var_38:	; location of error
   172 00000130 ????????????????        	resq 1
   173                                  free_var_39:	; location of __bin-less-than-rr
   174 00000138 ????????????????        	resq 1
   175                                  free_var_40:	; location of __bin-less-than-qq
   176 00000140 ????????????????        	resq 1
   177                                  free_var_41:	; location of __bin-equal-rr
   178 00000148 ????????????????        	resq 1
   179                                  free_var_42:	; location of __bin-equal-qq
   180 00000150 ????????????????        	resq 1
   181                                  free_var_43:	; location of quotient
   182 00000158 ????????????????        	resq 1
   183                                  free_var_44:	; location of remainder
   184 00000160 ????????????????        	resq 1
   185                                  free_var_45:	; location of set-car!
   186 00000168 ????????????????        	resq 1
   187                                  free_var_46:	; location of set-cdr!
   188 00000170 ????????????????        	resq 1
   189                                  free_var_47:	; location of string-ref
   190 00000178 ????????????????        	resq 1
   191                                  free_var_48:	; location of vector-ref
   192 00000180 ????????????????        	resq 1
   193                                  free_var_49:	; location of vector-set!
   194 00000188 ????????????????        	resq 1
   195                                  free_var_50:	; location of string-set!
   196 00000190 ????????????????        	resq 1
   197                                  free_var_51:	; location of make-vector
   198 00000198 ????????????????        	resq 1
   199                                  free_var_52:	; location of make-string
   200 000001A0 ????????????????        	resq 1
   201                                  free_var_53:	; location of numerator
   202 000001A8 ????????????????        	resq 1
   203                                  free_var_54:	; location of denominator
   204 000001B0 ????????????????        	resq 1
   205                                  free_var_55:	; location of eq?
   206 000001B8 ????????????????        	resq 1
   207                                  
   208                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar
   209                                  global main
   210                                  section .text
   211                                  main:
   212 00000000 C8000000                        enter 0, 0
   213                                          
   214                                  	; building closure for null?
   215 00000004 48BF-                   	mov rdi, free_var_0
   215 00000006 [0000000000000000] 
   216 0000000E 48BE-                   	mov rsi, L_code_ptr_is_null
   216 00000010 [9C0D000000000000] 
   217 00000018 E8570D0000              	call bind_primitive
   218                                  
   219                                  	; building closure for pair?
   220 0000001D 48BF-                   	mov rdi, free_var_1
   220 0000001F [0800000000000000] 
   221 00000027 48BE-                   	mov rsi, L_code_ptr_is_pair
   221 00000029 [D20D000000000000] 
   222 00000031 E83E0D0000              	call bind_primitive
   223                                  
   224                                  	; building closure for void?
   225 00000036 48BF-                   	mov rdi, free_var_2
   225 00000038 [1000000000000000] 
   226 00000040 48BE-                   	mov rsi, L_code_ptr_is_void
   226 00000042 [080E000000000000] 
   227 0000004A E8250D0000              	call bind_primitive
   228                                  
   229                                  	; building closure for char?
   230 0000004F 48BF-                   	mov rdi, free_var_3
   230 00000051 [1800000000000000] 
   231 00000059 48BE-                   	mov rsi, L_code_ptr_is_char
   231 0000005B [3E0E000000000000] 
   232 00000063 E80C0D0000              	call bind_primitive
   233                                  
   234                                  	; building closure for string?
   235 00000068 48BF-                   	mov rdi, free_var_4
   235 0000006A [2000000000000000] 
   236 00000072 48BE-                   	mov rsi, L_code_ptr_is_string
   236 00000074 [740E000000000000] 
   237 0000007C E8F30C0000              	call bind_primitive
   238                                  
   239                                  	; building closure for symbol?
   240 00000081 48BF-                   	mov rdi, free_var_5
   240 00000083 [2800000000000000] 
   241 0000008B 48BE-                   	mov rsi, L_code_ptr_is_symbol
   241 0000008D [AA0E000000000000] 
   242 00000095 E8DA0C0000              	call bind_primitive
   243                                  
   244                                  	; building closure for vector?
   245 0000009A 48BF-                   	mov rdi, free_var_6
   245 0000009C [3000000000000000] 
   246 000000A4 48BE-                   	mov rsi, L_code_ptr_is_vector
   246 000000A6 [E00E000000000000] 
   247 000000AE E8C10C0000              	call bind_primitive
   248                                  
   249                                  	; building closure for procedure?
   250 000000B3 48BF-                   	mov rdi, free_var_7
   250 000000B5 [3800000000000000] 
   251 000000BD 48BE-                   	mov rsi, L_code_ptr_is_closure
   251 000000BF [160F000000000000] 
   252 000000C7 E8A80C0000              	call bind_primitive
   253                                  
   254                                  	; building closure for real?
   255 000000CC 48BF-                   	mov rdi, free_var_8
   255 000000CE [4000000000000000] 
   256 000000D6 48BE-                   	mov rsi, L_code_ptr_is_real
   256 000000D8 [4C0F000000000000] 
   257 000000E0 E88F0C0000              	call bind_primitive
   258                                  
   259                                  	; building closure for rational?
   260 000000E5 48BF-                   	mov rdi, free_var_9
   260 000000E7 [4800000000000000] 
   261 000000EF 48BE-                   	mov rsi, L_code_ptr_is_rational
   261 000000F1 [820F000000000000] 
   262 000000F9 E8760C0000              	call bind_primitive
   263                                  
   264                                  	; building closure for boolean?
   265 000000FE 48BF-                   	mov rdi, free_var_10
   265 00000100 [5000000000000000] 
   266 00000108 48BE-                   	mov rsi, L_code_ptr_is_boolean
   266 0000010A [B80F000000000000] 
   267 00000112 E85D0C0000              	call bind_primitive
   268                                  
   269                                  	; building closure for number?
   270 00000117 48BF-                   	mov rdi, free_var_11
   270 00000119 [5800000000000000] 
   271 00000121 48BE-                   	mov rsi, L_code_ptr_is_number
   271 00000123 [F00F000000000000] 
   272 0000012B E8440C0000              	call bind_primitive
   273                                  
   274                                  	; building closure for collection?
   275 00000130 48BF-                   	mov rdi, free_var_12
   275 00000132 [6000000000000000] 
   276 0000013A 48BE-                   	mov rsi, L_code_ptr_is_collection
   276 0000013C [2810000000000000] 
   277 00000144 E82B0C0000              	call bind_primitive
   278                                  
   279                                  	; building closure for cons
   280 00000149 48BF-                   	mov rdi, free_var_13
   280 0000014B [6800000000000000] 
   281 00000153 48BE-                   	mov rsi, L_code_ptr_cons
   281 00000155 [6010000000000000] 
   282 0000015D E8120C0000              	call bind_primitive
   283                                  
   284                                  	; building closure for display-sexpr
   285 00000162 48BF-                   	mov rdi, free_var_14
   285 00000164 [7000000000000000] 
   286 0000016C 48BE-                   	mov rsi, L_code_ptr_display_sexpr
   286 0000016E [9410000000000000] 
   287 00000176 E8F90B0000              	call bind_primitive
   288                                  
   289                                  	; building closure for write-char
   290 0000017B 48BF-                   	mov rdi, free_var_15
   290 0000017D [7800000000000000] 
   291 00000185 48BE-                   	mov rsi, L_code_ptr_write_char
   291 00000187 [BE10000000000000] 
   292 0000018F E8E00B0000              	call bind_primitive
   293                                  
   294                                  	; building closure for car
   295 00000194 48BF-                   	mov rdi, free_var_16
   295 00000196 [8000000000000000] 
   296 0000019E 48BE-                   	mov rsi, L_code_ptr_car
   296 000001A0 [1511000000000000] 
   297 000001A8 E8C70B0000              	call bind_primitive
   298                                  
   299                                  	; building closure for cdr
   300 000001AD 48BF-                   	mov rdi, free_var_17
   300 000001AF [8800000000000000] 
   301 000001B7 48BE-                   	mov rsi, L_code_ptr_cdr
   301 000001B9 [3D11000000000000] 
   302 000001C1 E8AE0B0000              	call bind_primitive
   303                                  
   304                                  	; building closure for string-length
   305 000001C6 48BF-                   	mov rdi, free_var_18
   305 000001C8 [9000000000000000] 
   306 000001D0 48BE-                   	mov rsi, L_code_ptr_string_length
   306 000001D2 [6511000000000000] 
   307 000001DA E8950B0000              	call bind_primitive
   308                                  
   309                                  	; building closure for vector-length
   310 000001DF 48BF-                   	mov rdi, free_var_19
   310 000001E1 [9800000000000000] 
   311 000001E9 48BE-                   	mov rsi, L_code_ptr_vector_length
   311 000001EB [9211000000000000] 
   312 000001F3 E87C0B0000              	call bind_primitive
   313                                  
   314                                  	; building closure for real->integer
   315 000001F8 48BF-                   	mov rdi, free_var_20
   315 000001FA [A000000000000000] 
   316 00000202 48BE-                   	mov rsi, L_code_ptr_real_to_integer
   316 00000204 [BF11000000000000] 
   317 0000020C E8630B0000              	call bind_primitive
   318                                  
   319                                  	; building closure for exit
   320 00000211 48BF-                   	mov rdi, free_var_21
   320 00000213 [A800000000000000] 
   321 0000021B 48BE-                   	mov rsi, L_code_ptr_exit
   321 0000021D [F211000000000000] 
   322 00000225 E84A0B0000              	call bind_primitive
   323                                  
   324                                  	; building closure for integer->real
   325 0000022A 48BF-                   	mov rdi, free_var_22
   325 0000022C [B000000000000000] 
   326 00000234 48BE-                   	mov rsi, L_code_ptr_integer_to_real
   326 00000236 [0F12000000000000] 
   327 0000023E E8310B0000              	call bind_primitive
   328                                  
   329                                  	; building closure for rational->real
   330 00000243 48BF-                   	mov rdi, free_var_23
   330 00000245 [B800000000000000] 
   331 0000024D 48BE-                   	mov rsi, L_code_ptr_rational_to_real
   331 0000024F [4C12000000000000] 
   332 00000257 E8180B0000              	call bind_primitive
   333                                  
   334                                  	; building closure for char->integer
   335 0000025C 48BF-                   	mov rdi, free_var_24
   335 0000025E [C000000000000000] 
   336 00000266 48BE-                   	mov rsi, L_code_ptr_char_to_integer
   336 00000268 [8B12000000000000] 
   337 00000270 E8FF0A0000              	call bind_primitive
   338                                  
   339                                  	; building closure for integer->char
   340 00000275 48BF-                   	mov rdi, free_var_25
   340 00000277 [C800000000000000] 
   341 0000027F 48BE-                   	mov rsi, L_code_ptr_integer_to_char
   341 00000281 [C012000000000000] 
   342 00000289 E8E60A0000              	call bind_primitive
   343                                  
   344                                  	; building closure for trng
   345 0000028E 48BF-                   	mov rdi, free_var_26
   345 00000290 [D000000000000000] 
   346 00000298 48BE-                   	mov rsi, L_code_ptr_trng
   346 0000029A [1A13000000000000] 
   347 000002A2 E8CD0A0000              	call bind_primitive
   348                                  
   349                                  	; building closure for zero?
   350 000002A7 48BF-                   	mov rdi, free_var_27
   350 000002A9 [D800000000000000] 
   351 000002B1 48BE-                   	mov rsi, L_code_ptr_is_zero
   351 000002B3 [3D13000000000000] 
   352 000002BB E8B40A0000              	call bind_primitive
   353                                  
   354                                  	; building closure for integer?
   355 000002C0 48BF-                   	mov rdi, free_var_28
   355 000002C2 [E000000000000000] 
   356 000002CA 48BE-                   	mov rsi, L_code_ptr_is_integer
   356 000002CC [9813000000000000] 
   357 000002D4 E89B0A0000              	call bind_primitive
   358                                  
   359                                  	; building closure for __bin-apply
   360 000002D9 48BF-                   	mov rdi, free_var_29
   360 000002DB [E800000000000000] 
   361 000002E3 48BE-                   	mov rsi, L_code_ptr_bin_apply
   361 000002E5 [9C0D000000000000] 
   362 000002ED E8820A0000              	call bind_primitive
   363                                  
   364                                  	; building closure for __bin-add-rr
   365 000002F2 48BF-                   	mov rdi, free_var_30
   365 000002F4 [F000000000000000] 
   366 000002FC 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_rr
   366 000002FE [D513000000000000] 
   367 00000306 E8690A0000              	call bind_primitive
   368                                  
   369                                  	; building closure for __bin-sub-rr
   370 0000030B 48BF-                   	mov rdi, free_var_31
   370 0000030D [F800000000000000] 
   371 00000315 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_rr
   371 00000317 [1914000000000000] 
   372 0000031F E8500A0000              	call bind_primitive
   373                                  
   374                                  	; building closure for __bin-mul-rr
   375 00000324 48BF-                   	mov rdi, free_var_32
   375 00000326 [0001000000000000] 
   376 0000032E 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_rr
   376 00000330 [5D14000000000000] 
   377 00000338 E8370A0000              	call bind_primitive
   378                                  
   379                                  	; building closure for __bin-div-rr
   380 0000033D 48BF-                   	mov rdi, free_var_33
   380 0000033F [0801000000000000] 
   381 00000347 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_rr
   381 00000349 [A114000000000000] 
   382 00000351 E81E0A0000              	call bind_primitive
   383                                  
   384                                  	; building closure for __bin-add-qq
   385 00000356 48BF-                   	mov rdi, free_var_34
   385 00000358 [1001000000000000] 
   386 00000360 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_qq
   386 00000362 [F314000000000000] 
   387 0000036A E8050A0000              	call bind_primitive
   388                                  
   389                                  	; building closure for __bin-sub-qq
   390 0000036F 48BF-                   	mov rdi, free_var_35
   390 00000371 [1801000000000000] 
   391 00000379 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_qq
   391 0000037B [5B15000000000000] 
   392 00000383 E8EC090000              	call bind_primitive
   393                                  
   394                                  	; building closure for __bin-mul-qq
   395 00000388 48BF-                   	mov rdi, free_var_36
   395 0000038A [2001000000000000] 
   396 00000392 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_qq
   396 00000394 [C315000000000000] 
   397 0000039C E8D3090000              	call bind_primitive
   398                                  
   399                                  	; building closure for __bin-div-qq
   400 000003A1 48BF-                   	mov rdi, free_var_37
   400 000003A3 [2801000000000000] 
   401 000003AB 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_qq
   401 000003AD [1B16000000000000] 
   402 000003B5 E8BA090000              	call bind_primitive
   403                                  
   404                                  	; building closure for error
   405 000003BA 48BF-                   	mov rdi, free_var_38
   405 000003BC [3001000000000000] 
   406 000003C4 48BE-                   	mov rsi, L_code_ptr_error
   406 000003C6 [E916000000000000] 
   407 000003CE E8A1090000              	call bind_primitive
   408                                  
   409                                  	; building closure for __bin-less-than-rr
   410 000003D3 48BF-                   	mov rdi, free_var_39
   410 000003D5 [3801000000000000] 
   411 000003DD 48BE-                   	mov rsi, L_code_ptr_raw_less_than_rr
   411 000003DF [A017000000000000] 
   412 000003E7 E888090000              	call bind_primitive
   413                                  
   414                                  	; building closure for __bin-less-than-qq
   415 000003EC 48BF-                   	mov rdi, free_var_40
   415 000003EE [4001000000000000] 
   416 000003F6 48BE-                   	mov rsi, L_code_ptr_raw_less_than_qq
   416 000003F8 [F717000000000000] 
   417 00000400 E86F090000              	call bind_primitive
   418                                  
   419                                  	; building closure for __bin-equal-rr
   420 00000405 48BF-                   	mov rdi, free_var_41
   420 00000407 [4801000000000000] 
   421 0000040F 48BE-                   	mov rsi, L_code_ptr_raw_equal_rr
   421 00000411 [5A18000000000000] 
   422 00000419 E856090000              	call bind_primitive
   423                                  
   424                                  	; building closure for __bin-equal-qq
   425 0000041E 48BF-                   	mov rdi, free_var_42
   425 00000420 [5001000000000000] 
   426 00000428 48BE-                   	mov rsi, L_code_ptr_raw_equal_qq
   426 0000042A [B118000000000000] 
   427 00000432 E83D090000              	call bind_primitive
   428                                  
   429                                  	; building closure for quotient
   430 00000437 48BF-                   	mov rdi, free_var_43
   430 00000439 [5801000000000000] 
   431 00000441 48BE-                   	mov rsi, L_code_ptr_quotient
   431 00000443 [1419000000000000] 
   432 0000044B E824090000              	call bind_primitive
   433                                  
   434                                  	; building closure for remainder
   435 00000450 48BF-                   	mov rdi, free_var_44
   435 00000452 [6001000000000000] 
   436 0000045A 48BE-                   	mov rsi, L_code_ptr_remainder
   436 0000045C [7A19000000000000] 
   437 00000464 E80B090000              	call bind_primitive
   438                                  
   439                                  	; building closure for set-car!
   440 00000469 48BF-                   	mov rdi, free_var_45
   440 0000046B [6801000000000000] 
   441 00000473 48BE-                   	mov rsi, L_code_ptr_set_car
   441 00000475 [E019000000000000] 
   442 0000047D E8F2080000              	call bind_primitive
   443                                  
   444                                  	; building closure for set-cdr!
   445 00000482 48BF-                   	mov rdi, free_var_46
   445 00000484 [7001000000000000] 
   446 0000048C 48BE-                   	mov rsi, L_code_ptr_set_cdr
   446 0000048E [161A000000000000] 
   447 00000496 E8D9080000              	call bind_primitive
   448                                  
   449                                  	; building closure for string-ref
   450 0000049B 48BF-                   	mov rdi, free_var_47
   450 0000049D [7801000000000000] 
   451 000004A5 48BE-                   	mov rsi, L_code_ptr_string_ref
   451 000004A7 [4C1A000000000000] 
   452 000004AF E8C0080000              	call bind_primitive
   453                                  
   454                                  	; building closure for vector-ref
   455 000004B4 48BF-                   	mov rdi, free_var_48
   455 000004B6 [8001000000000000] 
   456 000004BE 48BE-                   	mov rsi, L_code_ptr_vector_ref
   456 000004C0 [B71A000000000000] 
   457 000004C8 E8A7080000              	call bind_primitive
   458                                  
   459                                  	; building closure for vector-set!
   460 000004CD 48BF-                   	mov rdi, free_var_49
   460 000004CF [8801000000000000] 
   461 000004D7 48BE-                   	mov rsi, L_code_ptr_vector_set
   461 000004D9 [131B000000000000] 
   462 000004E1 E88E080000              	call bind_primitive
   463                                  
   464                                  	; building closure for string-set!
   465 000004E6 48BF-                   	mov rdi, free_var_50
   465 000004E8 [9001000000000000] 
   466 000004F0 48BE-                   	mov rsi, L_code_ptr_string_set
   466 000004F2 [7D1B000000000000] 
   467 000004FA E875080000              	call bind_primitive
   468                                  
   469                                  	; building closure for make-vector
   470 000004FF 48BF-                   	mov rdi, free_var_51
   470 00000501 [9801000000000000] 
   471 00000509 48BE-                   	mov rsi, L_code_ptr_make_vector
   471 0000050B [F21B000000000000] 
   472 00000513 E85C080000              	call bind_primitive
   473                                  
   474                                  	; building closure for make-string
   475 00000518 48BF-                   	mov rdi, free_var_52
   475 0000051A [A001000000000000] 
   476 00000522 48BE-                   	mov rsi, L_code_ptr_make_string
   476 00000524 [5C1C000000000000] 
   477 0000052C E843080000              	call bind_primitive
   478                                  
   479                                  	; building closure for numerator
   480 00000531 48BF-                   	mov rdi, free_var_53
   480 00000533 [A801000000000000] 
   481 0000053B 48BE-                   	mov rsi, L_code_ptr_numerator
   481 0000053D [CE1C000000000000] 
   482 00000545 E82A080000              	call bind_primitive
   483                                  
   484                                  	; building closure for denominator
   485 0000054A 48BF-                   	mov rdi, free_var_54
   485 0000054C [B001000000000000] 
   486 00000554 48BE-                   	mov rsi, L_code_ptr_denominator
   486 00000556 [FB1C000000000000] 
   487 0000055E E811080000              	call bind_primitive
   488                                  
   489                                  	; building closure for eq?
   490 00000563 48BF-                   	mov rdi, free_var_55
   490 00000565 [B801000000000000] 
   491 0000056D 48BE-                   	mov rsi, L_code_ptr_eq
   491 0000056F [281D000000000000] 
   492 00000577 E8F8070000              	call bind_primitive
   493                                  
   494 0000057C 48B8-                   	mov rax, qword L_constants + 6 ;'Moshe was in: ScmConst' sexpr
   494 0000057E [0600000000000000] 
   495 00000586 50                      	push rax;'Moshe was in: ScmApplic' (proc, args, Non_tail_call)
   496 00000587 48B8-                   	mov rax, qword L_constants + 23 ;'Moshe was in: ScmConst' sexpr
   496 00000589 [1700000000000000] 
   497 00000591 50                      	push rax;'Moshe was in: ScmApplic' (proc, args, Non_tail_call)
   498 00000592 48B8-                   	mov rax, qword L_constants + 40 ;'Moshe was in: ScmConst' sexpr
   498 00000594 [2800000000000000] 
   499 0000059C 50                      	push rax;'Moshe was in: ScmApplic' (proc, args, Non_tail_call)
   500 0000059D 48B8-                   	mov rax, qword L_constants + 57 ;'Moshe was in: ScmConst' sexpr
   500 0000059F [3900000000000000] 
   501 000005A7 50                      	push rax;'Moshe was in: ScmApplic' (proc, args, Non_tail_call)
   502 000005A8 48B8-                   	mov rax, qword L_constants + 74 ;'Moshe was in: ScmConst' sexpr
   502 000005AA [4A00000000000000] 
   503 000005B2 50                      	push rax;'Moshe was in: ScmApplic' (proc, args, Non_tail_call)
   504 000005B3 6A05                    	push 5;'Moshe was in: ScmApplic' (proc, args, Non_tail_call)
   505 000005B5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   506 000005BA E824020000              	call malloc
   507 000005BF 50                      	push rax
   508 000005C0 BF18000000              	mov rdi, 8 * (2 + 1)	; new rib
   509 000005C5 E819020000              	call malloc
   510 000005CA 50                      	push rax
   511 000005CB BF08000000              	mov rdi, 8 * 1	; extended env
   512 000005D0 E80E020000              	call malloc
   513 000005D5 488B7D10                	mov rdi, ENV
   514 000005D9 BE00000000              	mov rsi, 0
   515 000005DE BA01000000              	mov rdx, 1
   516                                  .L_lambda_opt_env_loop_0001:	; ext_env[i + 1] <-- env[i]
   517 000005E3 4883FE01                	cmp rsi, 1
   518 000005E7 7410                    	je .L_lambda_opt_env_end_0001
   519 000005E9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   520 000005ED 48890CD0                	mov qword [rax + 8 * rdx], rcx
   521 000005F1 48FFC6                  	inc rsi
   522 000005F4 48FFC2                  	inc rdx
   523 000005F7 EBEA                    	jmp .L_lambda_opt_env_loop_0001
   524                                  .L_lambda_opt_env_end_0001:
   525 000005F9 5B                      	pop rbx
   526 000005FA BE00000000              	mov rsi, 0
   527                                  .L_lambda_opt_params_loop_0001:	; copy params
   528 000005FF 4883FE02                	cmp rsi, 2	; check if already prepared stack for all non optional members
   529 00000603 740E                    	je .L_lambda_opt_params_end_0001
   530 00000605 488B54F520              	mov rdx, qword [rbp + 8 * 4 + 8 * rsi]
   531 0000060A 488914F3                	mov qword [rbx + 8 * rsi], rdx
   532 0000060E 48FFC6                  	inc rsi
   533 00000611 EBEC                    	jmp .L_lambda_opt_params_loop_0001
   534                                  .L_lambda_opt_params_end_0001:
   535 00000613 50                      	push rax	; push address of extended environment
   536                                  	; calling malloc to build list of opt variable
   537 00000614 BF33000000              	mov rdi, (1 + 8 + 8) * 3	; opt list
   538 00000619 4883FF00                	cmp rdi, 0	; rdi == 0 meaning opt should be ScmNil
   539 0000061D 750F                    	jne .L_lambda_opt_optional_params_loop_start_0001
   540 0000061F BF01000000              	mov rdi, 1
   541 00000624 E8BA010000              	call malloc	; opt is Nil so we need to allocate 1 byte
   542 00000629 C60001                  	mov byte [rax], T_nil
   543 0000062C EB42                    	jmp .L_lambda_opt_optional_params_end_0001
   544                                  .L_lambda_opt_optional_params_loop_start_0001:
   545 0000062E E8B0010000              	call malloc	; list held by optional var
   546 00000633 BF00000000              	mov rdi, 0
   547                                  .L_lambda_opt_optional_params_loop_0001:
   548 00000638 4883FE05                	cmp rsi, 5
   549 0000063C 7432                    	je .L_lambda_opt_optional_params_end_0001
   550 0000063E C6043821                	mov byte [rax + rdi], T_pair
   551 00000642 488B54F520              	mov rdx, qword [rbp + 8 * 4 + 8 * rsi]
   552 00000647 4889543801              	mov SOB_PAIR_CAR(rax + rdi), rdx
   553 0000064C 4883FE04                	cmp rsi, 4	; if rsi = params - 1, we need to add ScmNil as cdr
   554 00000650 750B                    	jne .L_Lambda_opt_optional_params_loop_continue_0001
   555 00000652 48C744380901000000      	mov SOB_PAIR_CDR(rax + rdi), T_nil
   556 0000065B EB13                    	jmp .L_lambda_opt_optional_params_end_0001
   557                                  .L_Lambda_opt_optional_params_loop_continue_0001:
   558 0000065D 488B543811              	mov rdx, [rax + rdi + 1 + 8 + 8]
   559 00000662 4889543809              	mov SOB_PAIR_CDR(rax + rdi), rdx	; set cdr to the address of the next pair
   560 00000667 48FFC6                  	inc rsi
   561 0000066A 4883C711                	add rdi, 1 + 8 + 8
   562 0000066E EBC8                    	jmp .L_lambda_opt_optional_params_loop_0001
   563                                  .L_lambda_opt_optional_params_end_0001:
   564 00000670 48894310                	mov qword [rbx + 8 * 2], rax
   565 00000674 4989C0                  	mov r8, rax	; store the address of the opt list in r8
   566 00000677 58                      	pop rax	; address of extended env back in rax, proceed as in lambda simple
   567 00000678 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   568 0000067B 4889C3                  	mov rbx, rax
   569 0000067E 58                      	pop rax	; rax now holds address of sob_closure
   570 0000067F C60005                  	mov byte [rax], T_closure
   571 00000682 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   572 00000686 48C74009[90060000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0001
   573 0000068E EB65                    	jmp .L_lambda_opt_end_0001
   574                                  .L_lambda_opt_code_0001:; lambda-opt body
   575 00000690 48837C241002            	cmp qword [rsp + 8 * 2], 2;'Moshe was in ScmLambda' opt
   576 00000696 740D                    	je .L_lambda_opt_arity_check_exact_0001
   577 00000698 7F43                    	jg .L_lambda_opt_arity_check_more_0001
   578 0000069A FF742410                	push qword [rsp + 8 * 2]
   579 0000069E 6A02                    	push 2
   580 000006A0 E90B010000              	jmp L_error_incorrect_arity_opt
   581                                  .L_lambda_opt_arity_check_exact_0001:
   582 000006A5 4883EC08                	sub rsp, 8	; moving rsp down 8 bits to save a spot for the address of the list in memory
   583 000006A9 BE00000000              	mov rsi, 0
   584                                  .L_lambda_opt_stack_setup_loop_0001:
   585 000006AE 4883FE06                	cmp rsi, 4 + 2
   586                                  	; 4 is for old rbp, ret, env and argc
   587 000006B2 740B                    	je .L_lambda_opt_stack_setup_loop_end_0001
   588 000006B4 488B54F408              	mov rdx, qword [rsp + 8 + 8 * rsi]	; move the data from the old rsp in the stack to rdx
   589 000006B9 488914F4                	mov qword [rsp + 8 * rsi], rdx	; so we can move it to the new rsp
   590 000006BD EBEF                    	jmp .L_lambda_opt_stack_setup_loop_0001
   591                                  .L_lambda_opt_stack_setup_loop_end_0001:
   592 000006BF 4883ED08                	sub rbp, 8
   593 000006C3 4C894530                	mov qword [rbp + 8 * 4 + 8 * 2], r8	; move the new list to argv[params'.size()]
   594 000006C7 48C7451803000000        	mov qword [rbp + 8 * 3], 3	; set argc = params'.size() + 1
   595 000006CF C8000000                	enter 0, 0
   596 000006D3 488B4530                	mov rax, qword [rbp + 8 * (4 + 2)] ;'Moshe was in: ScmVarGet' (Var' (v, Param minor))
   597 000006D7 C9                      	leave
   598 000006D8 C21800                  	ret 8 * 3
   599 000006DB EB18                    	jmp .L_lambda_opt_end_0001
   600                                  .L_lambda_opt_arity_check_more_0001:
   601 000006DD 4C894530                	mov qword [rbp + 8 * 4 + 8 * 2], r8	; move the new list to argv[params'.size()]
   602 000006E1 48C7451803000000        	mov qword [rbp + 8 * 3], 3	; set argc = params'.size() + 1
   603 000006E9 C8000000                	enter 0, 0
   604 000006ED 488B4530                	mov rax, qword [rbp + 8 * (4 + 2)] ;'Moshe was in: ScmVarGet' (Var' (v, Param minor))
   605 000006F1 C9                      	leave
   606 000006F2 C22800                  	ret 8 * 5
   607                                  .L_lambda_opt_end_0001:	; new closure is in rax
   608                                  	assert_closure(rax);'Moshe was in: ScmApplic' (proc, args, Non_tail_call)
    42 000006F5 803805              <1>  cmp byte [%1], %2
    43 000006F8 0F852A180000        <1>  jne L_error_incorrect_type
   609 000006FE FF7001                  	push SOB_CLOSURE_ENV(rax);'Moshe was in: ScmApplic' (proc, args, Non_tail_call)
   610 00000701 FF5009                  	call SOB_CLOSURE_CODE(rax);'Moshe was in: ScmApplic' (proc, args, Non_tail_call)
   611                                  
   612 00000704 4889C7                  	mov rdi, rax
   613 00000707 E8E8000000              	call print_sexpr_if_not_void
   614                                  
   615 0000070C 48BF-                           mov rdi, fmt_memory_usage
   615 0000070E [BA00000000000000] 
   616 00000716 488B3425[41010000]              mov rsi, qword [top_of_memory]
   617 0000071E 4881EE[C0010000]                sub rsi, memory
   618 00000725 B800000000                      mov rax, 0
   619                                  	ENTER
    33 0000072A C8000000            <1>  enter 0, 0
    34 0000072E 4883E4F0            <1>  and rsp, ~15
   620 00000732 E8(00000000)                    call printf
   621                                  	LEAVE
    38 00000737 C9                  <1>  leave
   622 00000738 C9                      	leave
   623 00000739 C3                      	ret
   624                                  
   625                                  L_error_non_closure:
   626 0000073A 488B3C25[00000000]              mov rdi, qword [stderr]
   627 00000742 48BE-                           mov rsi, fmt_non_closure
   627 00000744 [F100000000000000] 
   628 0000074C B800000000                      mov rax, 0
   629                                  	ENTER
    33 00000751 C8000000            <1>  enter 0, 0
    34 00000755 4883E4F0            <1>  and rsp, ~15
   630 00000759 E8(00000000)                    call fprintf
   631                                  	LEAVE
    38 0000075E C9                  <1>  leave
   632 0000075F 48C7C0FEFFFFFF                  mov rax, -2
   633 00000766 E8(00000000)                    call exit
   634                                  
   635                                  L_error_improper_list:
   636 0000076B 488B3C25[00000000]      	mov rdi, qword [stderr]
   637 00000773 48BE-                   	mov rsi, fmt_error_improper_list
   637 00000775 [1901000000000000] 
   638 0000077D B800000000              	mov rax, 0
   639                                  	ENTER
    33 00000782 C8000000            <1>  enter 0, 0
    34 00000786 4883E4F0            <1>  and rsp, ~15
   640 0000078A E8(00000000)            	call fprintf
   641                                  	LEAVE
    38 0000078F C9                  <1>  leave
   642 00000790 48C7C0F9FFFFFF          	mov rax, -7
   643 00000797 E8(00000000)            	call exit
   644                                  
   645                                  L_error_incorrect_arity_simple:
   646 0000079C 488B3C25[00000000]              mov rdi, qword [stderr]
   647 000007A4 48BE-                           mov rsi, fmt_incorrect_arity_simple
   647 000007A6 [5B00000000000000] 
   648 000007AE EB12                            jmp L_error_incorrect_arity_common
   649                                  L_error_incorrect_arity_opt:
   650 000007B0 488B3C25[00000000]              mov rdi, qword [stderr]
   651 000007B8 48BE-                           mov rsi, fmt_incorrect_arity_opt
   651 000007BA [8600000000000000] 
   652                                  L_error_incorrect_arity_common:
   653 000007C2 5A                              pop rdx
   654 000007C3 59                              pop rcx
   655 000007C4 B800000000                      mov rax, 0
   656                                  	ENTER
    33 000007C9 C8000000            <1>  enter 0, 0
    34 000007CD 4883E4F0            <1>  and rsp, ~15
   657 000007D1 E8(00000000)                    call fprintf
   658                                  	LEAVE
    38 000007D6 C9                  <1>  leave
   659 000007D7 48C7C0FAFFFFFF                  mov rax, -6
   660 000007DE E8(00000000)                    call exit
   661                                  
   662                                  section .data
   663                                  fmt_incorrect_arity_simple:
   664 0000005B 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
   664 00000064 74656420256C642061-
   664 0000006D 7267756D656E74732C-
   664 00000076 206275742067697665-
   664 0000007F 6E20256C640A00     
   665                                  fmt_incorrect_arity_opt:
   666 00000086 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
   666 0000008F 746564206174206C65-
   666 00000098 61737420256C642061-
   666 000000A1 7267756D656E74732C-
   666 000000AA 206275742067697665-
   666 000000B3 6E20256C640A00     
   667                                  fmt_memory_usage:
   668 000000BA 0A0A21212120557365-             db `\n\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
   668 000000C3 6420256C6420627974-
   668 000000CC 6573206F662064796E-
   668 000000D5 616D6963616C6C792D-
   668 000000DE 616C6C6F6361746564-
   668 000000E7 206D656D6F72790A0A-
   668 000000F0 00                 
   669                                  fmt_non_closure:
   670 000000F1 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
   670 000000FA 7074696E6720746F20-
   670 00000103 6170706C792061206E-
   670 0000010C 6F6E2D636C6F737572-
   670 00000115 65210A00           
   671                                  fmt_error_improper_list:
   672 00000119 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
   672 00000122 7267756D656E742069-
   672 0000012B 73206E6F7420612070-
   672 00000134 726F706572206C6973-
   672 0000013D 74210A00           
   673                                  
   674                                  section .bss
   675                                  memory:
   676 000001C0 <res 40000000h>         	resb gbytes(1)
   677                                  
   678                                  section .data
   679                                  top_of_memory:
   680 00000141 [C001000000000000]              dq memory
   681                                  
   682                                  section .text
   683                                  malloc:
   684 000007E3 488B0425[41010000]              mov rax, qword [top_of_memory]
   685 000007EB 48013C25[41010000]              add qword [top_of_memory], rdi
   686 000007F3 C3                              ret
   687                                          
   688                                  print_sexpr_if_not_void:
   689 000007F4 4881FF[00000000]        	cmp rdi, sob_void
   690 000007FB 7501                    	jne print_sexpr
   691 000007FD C3                      	ret
   692                                  
   693                                  section .data
   694                                  fmt_void:
   695 00000149 233C766F69643E00        	db `#<void>\0`
   696                                  fmt_nil:
   697 00000151 282900                  	db `()\0`
   698                                  fmt_boolean_false:
   699 00000154 236600                  	db `#f\0`
   700                                  fmt_boolean_true:
   701 00000157 237400                  	db `#t\0`
   702                                  fmt_char_backslash:
   703 0000015A 235C5C00                	db `#\\\\\0`
   704                                  fmt_char_dquote:
   705 0000015E 235C2200                	db `#\\"\0`
   706                                  fmt_char_simple:
   707 00000162 235C256300              	db `#\\%c\0`
   708                                  fmt_char_null:
   709 00000167 235C6E756C00            	db `#\\nul\0`
   710                                  fmt_char_bell:
   711 0000016D 235C62656C6C00          	db `#\\bell\0`
   712                                  fmt_char_backspace:
   713 00000174 235C6261636B737061-     	db `#\\backspace\0`
   713 0000017D 636500             
   714                                  fmt_char_tab:
   715 00000180 235C74616200            	db `#\\tab\0`
   716                                  fmt_char_newline:
   717 00000186 235C6E65776C696E65-     	db `#\\newline\0`
   717 0000018F 00                 
   718                                  fmt_char_formfeed:
   719 00000190 235C7061676500          	db `#\\page\0`
   720                                  fmt_char_return:
   721 00000197 235C72657475726E00      	db `#\\return\0`
   722                                  fmt_char_escape:
   723 000001A0 235C65736300            	db `#\\esc\0`
   724                                  fmt_char_space:
   725 000001A6 235C737061636500        	db `#\\space\0`
   726                                  fmt_char_hex:
   727 000001AE 235C782530325800        	db `#\\x%02X\0`
   728                                  fmt_closure:
   729 000001B6 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
   729 000001BF 206174203078253038-
   729 000001C8 5820656E763D307825-
   729 000001D1 30385820636F64653D-
   729 000001DA 3078253038583E00   
   730                                  fmt_lparen:
   731 000001E2 2800                    	db `(\0`
   732                                  fmt_dotted_pair:
   733 000001E4 202E2000                	db ` . \0`
   734                                  fmt_rparen:
   735 000001E8 2900                    	db `)\0`
   736                                  fmt_space:
   737 000001EA 2000                    	db ` \0`
   738                                  fmt_empty_vector:
   739 000001EC 23282900                	db `#()\0`
   740                                  fmt_vector:
   741 000001F0 232800                  	db `#(\0`
   742                                  fmt_real:
   743 000001F3 256600                  	db `%f\0`
   744                                  fmt_fraction:
   745 000001F6 256C642F256C6400        	db `%ld/%ld\0`
   746                                  fmt_zero:
   747 000001FE 3000                    	db `0\0`
   748                                  fmt_int:
   749 00000200 256C6400                	db `%ld\0`
   750                                  fmt_unknown_sexpr_error:
   751 00000204 0A0A21212120457272-     	db `\n\n!!! Error: Unknown type of sexpr (0x%02X) `
   751 0000020D 6F723A20556E6B6E6F-
   751 00000216 776E2074797065206F-
   751 0000021F 662073657870722028-
   751 00000228 3078253032582920   
   752 00000230 617420616464726573-     	db `at address 0x%08X\n\n\0`
   752 00000239 73203078253038580A-
   752 00000242 0A00               
   753                                  fmt_dquote:
   754 00000244 2200                    	db `\"\0`
   755                                  fmt_string_char:
   756 00000246 256300                          db `%c\0`
   757                                  fmt_string_char_7:
   758 00000249 5C6100                          db `\\a\0`
   759                                  fmt_string_char_8:
   760 0000024C 5C6200                          db `\\b\0`
   761                                  fmt_string_char_9:
   762 0000024F 5C7400                          db `\\t\0`
   763                                  fmt_string_char_10:
   764 00000252 5C6E00                          db `\\n\0`
   765                                  fmt_string_char_11:
   766 00000255 5C7600                          db `\\v\0`
   767                                  fmt_string_char_12:
   768 00000258 5C6600                          db `\\f\0`
   769                                  fmt_string_char_13:
   770 0000025B 5C7200                          db `\\r\0`
   771                                  fmt_string_char_34:
   772 0000025E 5C2200                          db `\\"\0`
   773                                  fmt_string_char_92:
   774 00000261 5C5C00                          db `\\\\\0`
   775                                  fmt_string_char_hex:
   776 00000264 5C7825583B00                    db `\\x%X;\0`
   777                                  
   778                                  section .text
   779                                  
   780                                  print_sexpr:
   781                                  	ENTER
    33 000007FE C8000000            <1>  enter 0, 0
    34 00000802 4883E4F0            <1>  and rsp, ~15
   782 00000806 8A07                    	mov al, byte [rdi]
   783 00000808 3C00                    	cmp al, T_void
   784 0000080A 744D                    	je .Lvoid
   785 0000080C 3C01                    	cmp al, T_nil
   786 0000080E 7458                    	je .Lnil
   787 00000810 3C09                    	cmp al, T_boolean_false
   788 00000812 7463                    	je .Lboolean_false
   789 00000814 3C0A                    	cmp al, T_boolean_true
   790 00000816 746E                    	je .Lboolean_true
   791 00000818 3C02                    	cmp al, T_char
   792 0000081A 7479                    	je .Lchar
   793 0000081C 3C04                    	cmp al, T_symbol
   794 0000081E 0F84BB010000            	je .Lsymbol
   795 00000824 3C21                    	cmp al, T_pair
   796 00000826 0F84D6010000            	je .Lpair
   797 0000082C 3C22                    	cmp al, T_vector
   798 0000082E 0F849F020000            	je .Lvector
   799 00000834 3C05                    	cmp al, T_closure
   800 00000836 0F8489010000            	je .Lclosure
   801 0000083C 3C12                    	cmp al, T_real
   802 0000083E 0F8430030000            	je .Lreal
   803 00000844 3C11                    	cmp al, T_rational
   804 00000846 0F8456030000            	je .Lrational
   805 0000084C 3C03                    	cmp al, T_string
   806 0000084E 0F848F030000            	je .Lstring
   807                                  
   808 00000854 E9C7040000              	jmp .Lunknown_sexpr_type
   809                                  
   810                                  .Lvoid:
   811 00000859 48BF-                   	mov rdi, fmt_void
   811 0000085B [4901000000000000] 
   812 00000863 E9F5040000              	jmp .Lemit
   813                                  
   814                                  .Lnil:
   815 00000868 48BF-                   	mov rdi, fmt_nil
   815 0000086A [5101000000000000] 
   816 00000872 E9E6040000              	jmp .Lemit
   817                                  
   818                                  .Lboolean_false:
   819 00000877 48BF-                   	mov rdi, fmt_boolean_false
   819 00000879 [5401000000000000] 
   820 00000881 E9D7040000              	jmp .Lemit
   821                                  
   822                                  .Lboolean_true:
   823 00000886 48BF-                   	mov rdi, fmt_boolean_true
   823 00000888 [5701000000000000] 
   824 00000890 E9C8040000              	jmp .Lemit
   825                                  
   826                                  .Lchar:
   827 00000895 8A4701                  	mov al, byte [rdi + 1]
   828 00000898 3C20                    	cmp al, ' '
   829 0000089A 7E28                    	jle .Lchar_whitespace
   830 0000089C 3C5C                    	cmp al, 92 		; backslash
   831 0000089E 0F847C000000            	je .Lchar_backslash
   832 000008A4 3C22                    	cmp al, '"'
   833 000008A6 0F8483000000            	je .Lchar_dquote
   834 000008AC 4825FF000000            	and rax, 255
   835 000008B2 48BF-                   	mov rdi, fmt_char_simple
   835 000008B4 [6201000000000000] 
   836 000008BC 4889C6                  	mov rsi, rax
   837 000008BF E999040000              	jmp .Lemit
   838                                  
   839                                  .Lchar_whitespace:
   840 000008C4 3C00                    	cmp al, 0
   841 000008C6 7476                    	je .Lchar_null
   842 000008C8 3C07                    	cmp al, 7
   843 000008CA 0F847D000000            	je .Lchar_bell
   844 000008D0 3C08                    	cmp al, 8
   845 000008D2 0F8484000000            	je .Lchar_backspace
   846 000008D8 3C09                    	cmp al, 9
   847 000008DA 0F848B000000            	je .Lchar_tab
   848 000008E0 3C0A                    	cmp al, 10
   849 000008E2 0F8492000000            	je .Lchar_newline
   850 000008E8 3C0C                    	cmp al, 12
   851 000008EA 0F8499000000            	je .Lchar_formfeed
   852 000008F0 3C0D                    	cmp al, 13
   853 000008F2 0F84A0000000            	je .Lchar_return
   854 000008F8 3C1B                    	cmp al, 27
   855 000008FA 0F84A7000000            	je .Lchar_escape
   856 00000900 4825FF000000            	and rax, 255
   857 00000906 3C20                    	cmp al, ' '
   858 00000908 0F84A8000000            	je .Lchar_space
   859 0000090E 48BF-                   	mov rdi, fmt_char_hex
   859 00000910 [AE01000000000000] 
   860 00000918 4889C6                  	mov rsi, rax
   861 0000091B E93D040000              	jmp .Lemit	
   862                                  
   863                                  .Lchar_backslash:
   864 00000920 48BF-                   	mov rdi, fmt_char_backslash
   864 00000922 [5A01000000000000] 
   865 0000092A E92E040000              	jmp .Lemit
   866                                  
   867                                  .Lchar_dquote:
   868 0000092F 48BF-                   	mov rdi, fmt_char_dquote
   868 00000931 [5E01000000000000] 
   869 00000939 E91F040000              	jmp .Lemit
   870                                  
   871                                  .Lchar_null:
   872 0000093E 48BF-                   	mov rdi, fmt_char_null
   872 00000940 [6701000000000000] 
   873 00000948 E910040000              	jmp .Lemit
   874                                  
   875                                  .Lchar_bell:
   876 0000094D 48BF-                   	mov rdi, fmt_char_bell
   876 0000094F [6D01000000000000] 
   877 00000957 E901040000              	jmp .Lemit
   878                                  
   879                                  .Lchar_backspace:
   880 0000095C 48BF-                   	mov rdi, fmt_char_backspace
   880 0000095E [7401000000000000] 
   881 00000966 E9F2030000              	jmp .Lemit
   882                                  
   883                                  .Lchar_tab:
   884 0000096B 48BF-                   	mov rdi, fmt_char_tab
   884 0000096D [8001000000000000] 
   885 00000975 E9E3030000              	jmp .Lemit
   886                                  
   887                                  .Lchar_newline:
   888 0000097A 48BF-                   	mov rdi, fmt_char_newline
   888 0000097C [8601000000000000] 
   889 00000984 E9D4030000              	jmp .Lemit
   890                                  
   891                                  .Lchar_formfeed:
   892 00000989 48BF-                   	mov rdi, fmt_char_formfeed
   892 0000098B [9001000000000000] 
   893 00000993 E9C5030000              	jmp .Lemit
   894                                  
   895                                  .Lchar_return:
   896 00000998 48BF-                   	mov rdi, fmt_char_return
   896 0000099A [9701000000000000] 
   897 000009A2 E9B6030000              	jmp .Lemit
   898                                  
   899                                  .Lchar_escape:
   900 000009A7 48BF-                   	mov rdi, fmt_char_escape
   900 000009A9 [A001000000000000] 
   901 000009B1 E9A7030000              	jmp .Lemit
   902                                  
   903                                  .Lchar_space:
   904 000009B6 48BF-                   	mov rdi, fmt_char_space
   904 000009B8 [A601000000000000] 
   905 000009C0 E998030000              	jmp .Lemit
   906                                  
   907                                  .Lclosure:
   908 000009C5 4889FE                  	mov rsi, qword rdi
   909 000009C8 48BF-                   	mov rdi, fmt_closure
   909 000009CA [B601000000000000] 
   910 000009D2 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
   911 000009D6 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
   912 000009DA E97E030000              	jmp .Lemit
   913                                  
   914                                  .Lsymbol:
   915 000009DF 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
   916 000009E3 BE01000000              	mov rsi, 1		 ; size = 1 byte
   917 000009E8 488B5701                	mov rdx, qword [rdi + 1] ; length
   918 000009EC 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
   919 000009F0 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
   920 000009F8 E8(00000000)            	call fwrite
   921 000009FD E970030000              	jmp .Lend
   922                                  	
   923                                  .Lpair:
   924 00000A02 57                      	push rdi
   925 00000A03 48BF-                   	mov rdi, fmt_lparen
   925 00000A05 [E201000000000000] 
   926 00000A0D B800000000              	mov rax, 0
   927                                          ENTER
    33 00000A12 C8000000            <1>  enter 0, 0
    34 00000A16 4883E4F0            <1>  and rsp, ~15
   928 00000A1A E8(00000000)            	call printf
   929                                          LEAVE
    38 00000A1F C9                  <1>  leave
   930 00000A20 488B3C24                	mov rdi, qword [rsp] 	; pair
   931 00000A24 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   932 00000A28 E8D1FDFFFF              	call print_sexpr
   933 00000A2D 5F                      	pop rdi 		; pair
   934 00000A2E 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   935                                  .Lcdr:
   936 00000A32 8A07                    	mov al, byte [rdi]
   937 00000A34 3C01                    	cmp al, T_nil
   938 00000A36 7447                    	je .Lcdr_nil
   939 00000A38 3C21                    	cmp al, T_pair
   940 00000A3A 7462                    	je .Lcdr_pair
   941 00000A3C 57                      	push rdi
   942 00000A3D 48BF-                   	mov rdi, fmt_dotted_pair
   942 00000A3F [E401000000000000] 
   943 00000A47 B800000000              	mov rax, 0
   944                                  	ENTER
    33 00000A4C C8000000            <1>  enter 0, 0
    34 00000A50 4883E4F0            <1>  and rsp, ~15
   945 00000A54 E8(00000000)            	call printf
   946                                  	LEAVE
    38 00000A59 C9                  <1>  leave
   947 00000A5A 5F                      	pop rdi
   948 00000A5B E89EFDFFFF              	call print_sexpr
   949 00000A60 48BF-                   	mov rdi, fmt_rparen
   949 00000A62 [E801000000000000] 
   950 00000A6A B800000000              	mov rax, 0
   951                                  	ENTER
    33 00000A6F C8000000            <1>  enter 0, 0
    34 00000A73 4883E4F0            <1>  and rsp, ~15
   952 00000A77 E8(00000000)            	call printf
   953                                  	LEAVE
    38 00000A7C C9                  <1>  leave
   954                                  	LEAVE
    38 00000A7D C9                  <1>  leave
   955 00000A7E C3                      	ret
   956                                  
   957                                  .Lcdr_nil:
   958 00000A7F 48BF-                   	mov rdi, fmt_rparen
   958 00000A81 [E801000000000000] 
   959 00000A89 B800000000              	mov rax, 0
   960                                  	ENTER
    33 00000A8E C8000000            <1>  enter 0, 0
    34 00000A92 4883E4F0            <1>  and rsp, ~15
   961 00000A96 E8(00000000)            	call printf
   962                                  	LEAVE
    38 00000A9B C9                  <1>  leave
   963                                  	LEAVE
    38 00000A9C C9                  <1>  leave
   964 00000A9D C3                      	ret
   965                                  
   966                                  .Lcdr_pair:
   967 00000A9E 57                      	push rdi
   968 00000A9F 48BF-                   	mov rdi, fmt_space
   968 00000AA1 [EA01000000000000] 
   969 00000AA9 B800000000              	mov rax, 0
   970                                  	ENTER
    33 00000AAE C8000000            <1>  enter 0, 0
    34 00000AB2 4883E4F0            <1>  and rsp, ~15
   971 00000AB6 E8(00000000)            	call printf
   972                                  	LEAVE
    38 00000ABB C9                  <1>  leave
   973 00000ABC 488B3C24                	mov rdi, qword [rsp]
   974 00000AC0 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   975 00000AC4 E835FDFFFF              	call print_sexpr
   976 00000AC9 5F                      	pop rdi
   977 00000ACA 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   978 00000ACE E95FFFFFFF              	jmp .Lcdr
   979                                  
   980                                  .Lvector:
   981 00000AD3 488B4701                	mov rax, qword [rdi + 1] ; length
   982 00000AD7 4883F800                	cmp rax, 0
   983 00000ADB 0F8484000000            	je .Lvector_empty
   984 00000AE1 57                      	push rdi
   985 00000AE2 48BF-                   	mov rdi, fmt_vector
   985 00000AE4 [F001000000000000] 
   986 00000AEC B800000000              	mov rax, 0
   987                                  	ENTER
    33 00000AF1 C8000000            <1>  enter 0, 0
    34 00000AF5 4883E4F0            <1>  and rsp, ~15
   988 00000AF9 E8(00000000)            	call printf
   989                                  	LEAVE
    38 00000AFE C9                  <1>  leave
   990 00000AFF 488B3C24                	mov rdi, qword [rsp]
   991 00000B03 FF7701                  	push qword [rdi + 1]
   992 00000B06 6A01                    	push 1
   993 00000B08 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
   994 00000B0C E8EDFCFFFF              	call print_sexpr
   995                                  .Lvector_loop:
   996                                  	; [rsp] index
   997                                  	; [rsp + 8*1] limit
   998                                  	; [rsp + 8*2] vector
   999 00000B11 488B0424                	mov rax, qword [rsp]
  1000 00000B15 483B442408              	cmp rax, qword [rsp + 8*1]
  1001 00000B1A 7436                    	je .Lvector_end
  1002 00000B1C 48BF-                   	mov rdi, fmt_space
  1002 00000B1E [EA01000000000000] 
  1003 00000B26 B800000000              	mov rax, 0
  1004                                  	ENTER
    33 00000B2B C8000000            <1>  enter 0, 0
    34 00000B2F 4883E4F0            <1>  and rsp, ~15
  1005 00000B33 E8(00000000)            	call printf
  1006                                  	LEAVE
    38 00000B38 C9                  <1>  leave
  1007 00000B39 488B0424                	mov rax, qword [rsp]
  1008 00000B3D 488B5C2410              	mov rbx, qword [rsp + 8*2]
  1009 00000B42 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
  1010 00000B47 E8B2FCFFFF              	call print_sexpr
  1011 00000B4C 48FF0424                	inc qword [rsp]
  1012 00000B50 EBBF                    	jmp .Lvector_loop
  1013                                  
  1014                                  .Lvector_end:
  1015 00000B52 4883C418                	add rsp, 8*3
  1016 00000B56 48BF-                   	mov rdi, fmt_rparen
  1016 00000B58 [E801000000000000] 
  1017 00000B60 E9F8010000              	jmp .Lemit	
  1018                                  
  1019                                  .Lvector_empty:
  1020 00000B65 48BF-                   	mov rdi, fmt_empty_vector
  1020 00000B67 [EC01000000000000] 
  1021 00000B6F E9E9010000              	jmp .Lemit
  1022                                  
  1023                                  .Lreal:
  1024 00000B74 FF7701                  	push qword [rdi + 1]
  1025 00000B77 F20F100424              	movsd xmm0, qword [rsp]
  1026 00000B7C 4883C408                	add rsp, 8*1
  1027 00000B80 48BF-                   	mov rdi, fmt_real
  1027 00000B82 [F301000000000000] 
  1028 00000B8A B801000000              	mov rax, 1
  1029                                  	ENTER
    33 00000B8F C8000000            <1>  enter 0, 0
    34 00000B93 4883E4F0            <1>  and rsp, ~15
  1030 00000B97 E8(00000000)            	call printf
  1031                                  	LEAVE
    38 00000B9C C9                  <1>  leave
  1032 00000B9D E9D0010000              	jmp .Lend
  1033                                  
  1034                                  .Lrational:
  1035 00000BA2 488B7701                	mov rsi, qword [rdi + 1]
  1036 00000BA6 488B5709                	mov rdx, qword [rdi + 1 + 8]
  1037 00000BAA 4883FE00                	cmp rsi, 0
  1038 00000BAE 7415                    	je .Lrat_zero
  1039 00000BB0 4883FA01                	cmp rdx, 1
  1040 00000BB4 741E                    	je .Lrat_int
  1041 00000BB6 48BF-                   	mov rdi, fmt_fraction
  1041 00000BB8 [F601000000000000] 
  1042 00000BC0 E998010000              	jmp .Lemit
  1043                                  
  1044                                  .Lrat_zero:
  1045 00000BC5 48BF-                   	mov rdi, fmt_zero
  1045 00000BC7 [FE01000000000000] 
  1046 00000BCF E989010000              	jmp .Lemit
  1047                                  
  1048                                  .Lrat_int:
  1049 00000BD4 48BF-                   	mov rdi, fmt_int
  1049 00000BD6 [0002000000000000] 
  1050 00000BDE E97A010000              	jmp .Lemit
  1051                                  
  1052                                  .Lstring:
  1053 00000BE3 488D4709                	lea rax, [rdi + 1 + 8]
  1054 00000BE7 50                      	push rax
  1055 00000BE8 FF7701                  	push qword [rdi + 1]
  1056 00000BEB 48BF-                   	mov rdi, fmt_dquote
  1056 00000BED [4402000000000000] 
  1057 00000BF5 B800000000              	mov rax, 0
  1058                                  	ENTER
    33 00000BFA C8000000            <1>  enter 0, 0
    34 00000BFE 4883E4F0            <1>  and rsp, ~15
  1059 00000C02 E8(00000000)            	call printf
  1060                                  	LEAVE
    38 00000C07 C9                  <1>  leave
  1061                                  .Lstring_loop:
  1062                                  	; qword [rsp]: limit
  1063                                  	; qword [rsp + 8*1]: char *
  1064 00000C08 48833C2400              	cmp qword [rsp], 0
  1065 00000C0D 0F84FD000000            	je .Lstring_end
  1066 00000C13 488B442408              	mov rax, qword [rsp + 8*1]
  1067 00000C18 8A00                    	mov al, byte [rax]
  1068 00000C1A 4825FF000000            	and rax, 255
  1069 00000C20 3C07                    	cmp al, 7
  1070 00000C22 7468                            je .Lstring_char_7
  1071 00000C24 3C08                            cmp al, 8
  1072 00000C26 7470                            je .Lstring_char_8
  1073 00000C28 3C09                            cmp al, 9
  1074 00000C2A 7478                            je .Lstring_char_9
  1075 00000C2C 3C0A                            cmp al, 10
  1076 00000C2E 0F847C000000                    je .Lstring_char_10
  1077 00000C34 3C0B                            cmp al, 11
  1078 00000C36 0F8480000000                    je .Lstring_char_11
  1079 00000C3C 3C0C                            cmp al, 12
  1080 00000C3E 0F8484000000                    je .Lstring_char_12
  1081 00000C44 3C0D                            cmp al, 13
  1082 00000C46 0F8488000000                    je .Lstring_char_13
  1083 00000C4C 3C22                            cmp al, 34
  1084 00000C4E 0F848C000000                    je .Lstring_char_34
  1085 00000C54 3C5C                            cmp al, 92              ;         je .Lstring_char_92
  1087 00000C56 3C20                            cmp al, ' '
  1088 00000C58 0F8CA0000000                    jl .Lstring_char_hex
  1089 00000C5E 48BF-                           mov rdi, fmt_string_char
  1089 00000C60 [4602000000000000] 
  1090 00000C68 4889C6                          mov rsi, rax
  1091                                  .Lstring_char_emit:
  1092 00000C6B B800000000                      mov rax, 0
  1093                                          ENTER
    33 00000C70 C8000000            <1>  enter 0, 0
    34 00000C74 4883E4F0            <1>  and rsp, ~15
  1094 00000C78 E8(00000000)                    call printf
  1095                                          LEAVE
    38 00000C7D C9                  <1>  leave
  1096 00000C7E 48FF0C24                        dec qword [rsp]
  1097 00000C82 48FF442408                      inc qword [rsp + 8*1]
  1098 00000C87 E97CFFFFFF                      jmp .Lstring_loop
  1099                                  
  1100                                  .Lstring_char_7:
  1101 00000C8C 48BF-                           mov rdi, fmt_string_char_7
  1101 00000C8E [4902000000000000] 
  1102 00000C96 EBD3                            jmp .Lstring_char_emit
  1103                                  
  1104                                  .Lstring_char_8:
  1105 00000C98 48BF-                           mov rdi, fmt_string_char_8
  1105 00000C9A [4C02000000000000] 
  1106 00000CA2 EBC7                            jmp .Lstring_char_emit
  1107                                          
  1108                                  .Lstring_char_9:
  1109 00000CA4 48BF-                           mov rdi, fmt_string_char_9
  1109 00000CA6 [4F02000000000000] 
  1110 00000CAE EBBB                            jmp .Lstring_char_emit
  1111                                  
  1112                                  .Lstring_char_10:
  1113 00000CB0 48BF-                           mov rdi, fmt_string_char_10
  1113 00000CB2 [5202000000000000] 
  1114 00000CBA EBAF                            jmp .Lstring_char_emit
  1115                                  
  1116                                  .Lstring_char_11:
  1117 00000CBC 48BF-                           mov rdi, fmt_string_char_11
  1117 00000CBE [5502000000000000] 
  1118 00000CC6 EBA3                            jmp .Lstring_char_emit
  1119                                  
  1120                                  .Lstring_char_12:
  1121 00000CC8 48BF-                           mov rdi, fmt_string_char_12
  1121 00000CCA [5802000000000000] 
  1122 00000CD2 EB97                            jmp .Lstring_char_emit
  1123                                  
  1124                                  .Lstring_char_13:
  1125 00000CD4 48BF-                           mov rdi, fmt_string_char_13
  1125 00000CD6 [5B02000000000000] 
  1126 00000CDE EB8B                            jmp .Lstring_char_emit
  1127                                  
  1128                                  .Lstring_char_34:
  1129 00000CE0 48BF-                           mov rdi, fmt_string_char_34
  1129 00000CE2 [5E02000000000000] 
  1130 00000CEA E97CFFFFFF                      jmp .Lstring_char_emit
  1131                                  
  1132                                  .Lstring_char_92:
  1133 00000CEF 48BF-                           mov rdi, fmt_string_char_92
  1133 00000CF1 [6102000000000000] 
  1134 00000CF9 E96DFFFFFF                      jmp .Lstring_char_emit
  1135                                  
  1136                                  .Lstring_char_hex:
  1137 00000CFE 48BF-                           mov rdi, fmt_string_char_hex
  1137 00000D00 [6402000000000000] 
  1138 00000D08 4889C6                          mov rsi, rax
  1139 00000D0B E95BFFFFFF                      jmp .Lstring_char_emit        
  1140                                  
  1141                                  .Lstring_end:
  1142 00000D10 4883C410                	add rsp, 8 * 2
  1143 00000D14 48BF-                   	mov rdi, fmt_dquote
  1143 00000D16 [4402000000000000] 
  1144 00000D1E EB3D                    	jmp .Lemit
  1145                                  
  1146                                  .Lunknown_sexpr_type:
  1147 00000D20 48BE-                   	mov rsi, fmt_unknown_sexpr_error
  1147 00000D22 [0402000000000000] 
  1148 00000D2A 4825FF000000            	and rax, 255
  1149 00000D30 4889C2                  	mov rdx, rax
  1150 00000D33 4889F9                  	mov rcx, rdi
  1151 00000D36 488B3C25[00000000]      	mov rdi, qword [stderr]
  1152 00000D3E B800000000              	mov rax, 0
  1153                                  	ENTER
    33 00000D43 C8000000            <1>  enter 0, 0
    34 00000D47 4883E4F0            <1>  and rsp, ~15
  1154 00000D4B E8(00000000)            	call fprintf
  1155                                  	LEAVE
    38 00000D50 C9                  <1>  leave
  1156 00000D51 48C7C0FFFFFFFF          	mov rax, -1
  1157 00000D58 E8(00000000)            	call exit
  1158                                  
  1159                                  .Lemit:
  1160 00000D5D B800000000              	mov rax, 0
  1161                                  	ENTER
    33 00000D62 C8000000            <1>  enter 0, 0
    34 00000D66 4883E4F0            <1>  and rsp, ~15
  1162 00000D6A E8(00000000)            	call printf
  1163                                  	LEAVE
    38 00000D6F C9                  <1>  leave
  1164 00000D70 EB00                    	jmp .Lend
  1165                                  
  1166                                  .Lend:
  1167                                  	LEAVE
    38 00000D72 C9                  <1>  leave
  1168 00000D73 C3                      	ret
  1169                                  
  1170                                  ;;; rdi: address of free variable
  1171                                  ;;; rsi: address of code-pointer
  1172                                  bind_primitive:
  1173                                          ENTER
    33 00000D74 C8000000            <1>  enter 0, 0
    34 00000D78 4883E4F0            <1>  and rsp, ~15
  1174 00000D7C 57                              push rdi
  1175 00000D7D BF11000000                      mov rdi, (1 + 8 + 8)
  1176 00000D82 E85CFAFFFF                      call malloc
  1177 00000D87 5F                              pop rdi
  1178 00000D88 C60005                          mov byte [rax], T_closure
  1179 00000D8B 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  1180 00000D93 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  1181 00000D97 488907                          mov qword [rdi], rax
  1182                                          LEAVE
    38 00000D9A C9                  <1>  leave
  1183 00000D9B C3                              ret
  1184                                  
  1185                                  ;;; PLEASE IMPLEMENT THIS PROCEDURE
  1186                                  L_code_ptr_bin_apply:
  1187                                  	
  1188                                  L_code_ptr_is_null:
  1189                                          ENTER
    33 00000D9C C8000000            <1>  enter 0, 0
    34 00000DA0 4883E4F0            <1>  and rsp, ~15
  1190 00000DA4 48837D1801                      cmp COUNT, 1
  1191 00000DA9 0F85A5100000                    jne L_error_arg_count_1
  1192 00000DAF 488B4520                        mov rax, PARAM(0)
  1193 00000DB3 803801                          cmp byte [rax], T_nil
  1194 00000DB6 750C                            jne .L_false
  1195 00000DB8 48B8-                           mov rax, sob_boolean_true
  1195 00000DBA [0300000000000000] 
  1196 00000DC2 EB0A                            jmp .L_end
  1197                                  .L_false:
  1198 00000DC4 48B8-                           mov rax, sob_boolean_false
  1198 00000DC6 [0200000000000000] 
  1199                                  .L_end:
  1200                                          LEAVE
    38 00000DCE C9                  <1>  leave
  1201 00000DCF C21800                          ret AND_KILL_FRAME(1)
  1202                                  
  1203                                  L_code_ptr_is_pair:
  1204                                          ENTER
    33 00000DD2 C8000000            <1>  enter 0, 0
    34 00000DD6 4883E4F0            <1>  and rsp, ~15
  1205 00000DDA 48837D1801                      cmp COUNT, 1
  1206 00000DDF 0F856F100000                    jne L_error_arg_count_1
  1207 00000DE5 488B4520                        mov rax, PARAM(0)
  1208 00000DE9 803821                          cmp byte [rax], T_pair
  1209 00000DEC 750C                            jne .L_false
  1210 00000DEE 48B8-                           mov rax, sob_boolean_true
  1210 00000DF0 [0300000000000000] 
  1211 00000DF8 EB0A                            jmp .L_end
  1212                                  .L_false:
  1213 00000DFA 48B8-                           mov rax, sob_boolean_false
  1213 00000DFC [0200000000000000] 
  1214                                  .L_end:
  1215                                          LEAVE
    38 00000E04 C9                  <1>  leave
  1216 00000E05 C21800                          ret AND_KILL_FRAME(1)
  1217                                          
  1218                                  L_code_ptr_is_void:
  1219                                          ENTER
    33 00000E08 C8000000            <1>  enter 0, 0
    34 00000E0C 4883E4F0            <1>  and rsp, ~15
  1220 00000E10 48837D1801                      cmp COUNT, 1
  1221 00000E15 0F8539100000                    jne L_error_arg_count_1
  1222 00000E1B 488B4520                        mov rax, PARAM(0)
  1223 00000E1F 803800                          cmp byte [rax], T_void
  1224 00000E22 750C                            jne .L_false
  1225 00000E24 48B8-                           mov rax, sob_boolean_true
  1225 00000E26 [0300000000000000] 
  1226 00000E2E EB0A                            jmp .L_end
  1227                                  .L_false:
  1228 00000E30 48B8-                           mov rax, sob_boolean_false
  1228 00000E32 [0200000000000000] 
  1229                                  .L_end:
  1230                                          LEAVE
    38 00000E3A C9                  <1>  leave
  1231 00000E3B C21800                          ret AND_KILL_FRAME(1)
  1232                                  
  1233                                  L_code_ptr_is_char:
  1234                                          ENTER
    33 00000E3E C8000000            <1>  enter 0, 0
    34 00000E42 4883E4F0            <1>  and rsp, ~15
  1235 00000E46 48837D1801                      cmp COUNT, 1
  1236 00000E4B 0F8503100000                    jne L_error_arg_count_1
  1237 00000E51 488B4520                        mov rax, PARAM(0)
  1238 00000E55 803802                          cmp byte [rax], T_char
  1239 00000E58 750C                            jne .L_false
  1240 00000E5A 48B8-                           mov rax, sob_boolean_true
  1240 00000E5C [0300000000000000] 
  1241 00000E64 EB0A                            jmp .L_end
  1242                                  .L_false:
  1243 00000E66 48B8-                           mov rax, sob_boolean_false
  1243 00000E68 [0200000000000000] 
  1244                                  .L_end:
  1245                                          LEAVE
    38 00000E70 C9                  <1>  leave
  1246 00000E71 C21800                          ret AND_KILL_FRAME(1)
  1247                                  
  1248                                  L_code_ptr_is_string:
  1249                                          ENTER
    33 00000E74 C8000000            <1>  enter 0, 0
    34 00000E78 4883E4F0            <1>  and rsp, ~15
  1250 00000E7C 48837D1801                      cmp COUNT, 1
  1251 00000E81 0F85CD0F0000                    jne L_error_arg_count_1
  1252 00000E87 488B4520                        mov rax, PARAM(0)
  1253 00000E8B 803803                          cmp byte [rax], T_string
  1254 00000E8E 750C                            jne .L_false
  1255 00000E90 48B8-                           mov rax, sob_boolean_true
  1255 00000E92 [0300000000000000] 
  1256 00000E9A EB0A                            jmp .L_end
  1257                                  .L_false:
  1258 00000E9C 48B8-                           mov rax, sob_boolean_false
  1258 00000E9E [0200000000000000] 
  1259                                  .L_end:
  1260                                          LEAVE
    38 00000EA6 C9                  <1>  leave
  1261 00000EA7 C21800                          ret AND_KILL_FRAME(1)
  1262                                  
  1263                                  L_code_ptr_is_symbol:
  1264                                          ENTER
    33 00000EAA C8000000            <1>  enter 0, 0
    34 00000EAE 4883E4F0            <1>  and rsp, ~15
  1265 00000EB2 48837D1801                      cmp COUNT, 1
  1266 00000EB7 0F85970F0000                    jne L_error_arg_count_1
  1267 00000EBD 488B4520                        mov rax, PARAM(0)
  1268 00000EC1 803804                          cmp byte [rax], T_symbol
  1269 00000EC4 750C                            jne .L_false
  1270 00000EC6 48B8-                           mov rax, sob_boolean_true
  1270 00000EC8 [0300000000000000] 
  1271 00000ED0 EB0A                            jmp .L_end
  1272                                  .L_false:
  1273 00000ED2 48B8-                           mov rax, sob_boolean_false
  1273 00000ED4 [0200000000000000] 
  1274                                  .L_end:
  1275                                          LEAVE
    38 00000EDC C9                  <1>  leave
  1276 00000EDD C21800                          ret AND_KILL_FRAME(1)
  1277                                  
  1278                                  L_code_ptr_is_vector:
  1279                                          ENTER
    33 00000EE0 C8000000            <1>  enter 0, 0
    34 00000EE4 4883E4F0            <1>  and rsp, ~15
  1280 00000EE8 48837D1801                      cmp COUNT, 1
  1281 00000EED 0F85610F0000                    jne L_error_arg_count_1
  1282 00000EF3 488B4520                        mov rax, PARAM(0)
  1283 00000EF7 803822                          cmp byte [rax], T_vector
  1284 00000EFA 750C                            jne .L_false
  1285 00000EFC 48B8-                           mov rax, sob_boolean_true
  1285 00000EFE [0300000000000000] 
  1286 00000F06 EB0A                            jmp .L_end
  1287                                  .L_false:
  1288 00000F08 48B8-                           mov rax, sob_boolean_false
  1288 00000F0A [0200000000000000] 
  1289                                  .L_end:
  1290                                          LEAVE
    38 00000F12 C9                  <1>  leave
  1291 00000F13 C21800                          ret AND_KILL_FRAME(1)
  1292                                  
  1293                                  L_code_ptr_is_closure:
  1294                                          ENTER
    33 00000F16 C8000000            <1>  enter 0, 0
    34 00000F1A 4883E4F0            <1>  and rsp, ~15
  1295 00000F1E 48837D1801                      cmp COUNT, 1
  1296 00000F23 0F852B0F0000                    jne L_error_arg_count_1
  1297 00000F29 488B4520                        mov rax, PARAM(0)
  1298 00000F2D 803805                          cmp byte [rax], T_closure
  1299 00000F30 750C                            jne .L_false
  1300 00000F32 48B8-                           mov rax, sob_boolean_true
  1300 00000F34 [0300000000000000] 
  1301 00000F3C EB0A                            jmp .L_end
  1302                                  .L_false:
  1303 00000F3E 48B8-                           mov rax, sob_boolean_false
  1303 00000F40 [0200000000000000] 
  1304                                  .L_end:
  1305                                          LEAVE
    38 00000F48 C9                  <1>  leave
  1306 00000F49 C21800                          ret AND_KILL_FRAME(1)
  1307                                  
  1308                                  L_code_ptr_is_real:
  1309                                          ENTER
    33 00000F4C C8000000            <1>  enter 0, 0
    34 00000F50 4883E4F0            <1>  and rsp, ~15
  1310 00000F54 48837D1801                      cmp COUNT, 1
  1311 00000F59 0F85F50E0000                    jne L_error_arg_count_1
  1312 00000F5F 488B4520                        mov rax, PARAM(0)
  1313 00000F63 803812                          cmp byte [rax], T_real
  1314 00000F66 750C                            jne .L_false
  1315 00000F68 48B8-                           mov rax, sob_boolean_true
  1315 00000F6A [0300000000000000] 
  1316 00000F72 EB0A                            jmp .L_end
  1317                                  .L_false:
  1318 00000F74 48B8-                           mov rax, sob_boolean_false
  1318 00000F76 [0200000000000000] 
  1319                                  .L_end:
  1320                                          LEAVE
    38 00000F7E C9                  <1>  leave
  1321 00000F7F C21800                          ret AND_KILL_FRAME(1)
  1322                                  
  1323                                  L_code_ptr_is_rational:
  1324                                          ENTER
    33 00000F82 C8000000            <1>  enter 0, 0
    34 00000F86 4883E4F0            <1>  and rsp, ~15
  1325 00000F8A 48837D1801                      cmp COUNT, 1
  1326 00000F8F 0F85BF0E0000                    jne L_error_arg_count_1
  1327 00000F95 488B4520                        mov rax, PARAM(0)
  1328 00000F99 803811                          cmp byte [rax], T_rational
  1329 00000F9C 750C                            jne .L_false
  1330 00000F9E 48B8-                           mov rax, sob_boolean_true
  1330 00000FA0 [0300000000000000] 
  1331 00000FA8 EB0A                            jmp .L_end
  1332                                  .L_false:
  1333 00000FAA 48B8-                           mov rax, sob_boolean_false
  1333 00000FAC [0200000000000000] 
  1334                                  .L_end:
  1335                                          LEAVE
    38 00000FB4 C9                  <1>  leave
  1336 00000FB5 C21800                          ret AND_KILL_FRAME(1)
  1337                                  
  1338                                  L_code_ptr_is_boolean:
  1339                                          ENTER
    33 00000FB8 C8000000            <1>  enter 0, 0
    34 00000FBC 4883E4F0            <1>  and rsp, ~15
  1340 00000FC0 48837D1801                      cmp COUNT, 1
  1341 00000FC5 0F85890E0000                    jne L_error_arg_count_1
  1342 00000FCB 488B4520                        mov rax, PARAM(0)
  1343 00000FCF 8A18                            mov bl, byte [rax]
  1344 00000FD1 80E308                          and bl, T_boolean
  1345 00000FD4 740C                            je .L_false
  1346 00000FD6 48B8-                           mov rax, sob_boolean_true
  1346 00000FD8 [0300000000000000] 
  1347 00000FE0 EB0A                            jmp .L_end
  1348                                  .L_false:
  1349 00000FE2 48B8-                           mov rax, sob_boolean_false
  1349 00000FE4 [0200000000000000] 
  1350                                  .L_end:
  1351                                          LEAVE
    38 00000FEC C9                  <1>  leave
  1352 00000FED C21800                          ret AND_KILL_FRAME(1)
  1353                                          
  1354                                  L_code_ptr_is_number:
  1355                                          ENTER
    33 00000FF0 C8000000            <1>  enter 0, 0
    34 00000FF4 4883E4F0            <1>  and rsp, ~15
  1356 00000FF8 48837D1801                      cmp COUNT, 1
  1357 00000FFD 0F85510E0000                    jne L_error_arg_count_1
  1358 00001003 488B4520                        mov rax, PARAM(0)
  1359 00001007 8A18                            mov bl, byte [rax]
  1360 00001009 80E310                          and bl, T_number
  1361 0000100C 740C                            je .L_false
  1362 0000100E 48B8-                           mov rax, sob_boolean_true
  1362 00001010 [0300000000000000] 
  1363 00001018 EB0A                            jmp .L_end
  1364                                  .L_false:
  1365 0000101A 48B8-                           mov rax, sob_boolean_false
  1365 0000101C [0200000000000000] 
  1366                                  .L_end:
  1367                                          LEAVE
    38 00001024 C9                  <1>  leave
  1368 00001025 C21800                          ret AND_KILL_FRAME(1)
  1369                                          
  1370                                  L_code_ptr_is_collection:
  1371                                          ENTER
    33 00001028 C8000000            <1>  enter 0, 0
    34 0000102C 4883E4F0            <1>  and rsp, ~15
  1372 00001030 48837D1801                      cmp COUNT, 1
  1373 00001035 0F85190E0000                    jne L_error_arg_count_1
  1374 0000103B 488B4520                        mov rax, PARAM(0)
  1375 0000103F 8A18                            mov bl, byte [rax]
  1376 00001041 80E320                          and bl, T_collection
  1377 00001044 740C                            je .L_false
  1378 00001046 48B8-                           mov rax, sob_boolean_true
  1378 00001048 [0300000000000000] 
  1379 00001050 EB0A                            jmp .L_end
  1380                                  .L_false:
  1381 00001052 48B8-                           mov rax, sob_boolean_false
  1381 00001054 [0200000000000000] 
  1382                                  .L_end:
  1383                                          LEAVE
    38 0000105C C9                  <1>  leave
  1384 0000105D C21800                          ret AND_KILL_FRAME(1)
  1385                                  
  1386                                  L_code_ptr_cons:
  1387                                          ENTER
    33 00001060 C8000000            <1>  enter 0, 0
    34 00001064 4883E4F0            <1>  and rsp, ~15
  1388 00001068 48837D1802                      cmp COUNT, 2
  1389 0000106D 0F85160E0000                    jne L_error_arg_count_2
  1390 00001073 BF11000000                      mov rdi, (1 + 8 + 8)
  1391 00001078 E866F7FFFF                      call malloc
  1392 0000107D C60021                          mov byte [rax], T_pair
  1393 00001080 488B5D20                        mov rbx, PARAM(0)
  1394 00001084 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1395 00001088 488B5D28                        mov rbx, PARAM(1)
  1396 0000108C 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1397                                          LEAVE
    38 00001090 C9                  <1>  leave
  1398 00001091 C22000                          ret AND_KILL_FRAME(2)
  1399                                  
  1400                                  L_code_ptr_display_sexpr:
  1401                                          ENTER
    33 00001094 C8000000            <1>  enter 0, 0
    34 00001098 4883E4F0            <1>  and rsp, ~15
  1402 0000109C 48837D1801                      cmp COUNT, 1
  1403 000010A1 0F85AD0D0000                    jne L_error_arg_count_1
  1404 000010A7 488B7D20                        mov rdi, PARAM(0)
  1405 000010AB E84EF7FFFF                      call print_sexpr
  1406 000010B0 48B8-                           mov rax, sob_void
  1406 000010B2 [0000000000000000] 
  1407                                          LEAVE
    38 000010BA C9                  <1>  leave
  1408 000010BB C21800                          ret AND_KILL_FRAME(1)
  1409                                  
  1410                                  L_code_ptr_write_char:
  1411                                          ENTER
    33 000010BE C8000000            <1>  enter 0, 0
    34 000010C2 4883E4F0            <1>  and rsp, ~15
  1412 000010C6 48837D1801                      cmp COUNT, 1
  1413 000010CB 0F85830D0000                    jne L_error_arg_count_1
  1414 000010D1 488B4520                        mov rax, PARAM(0)
  1415                                          assert_char(rax)
    42 000010D5 803802              <1>  cmp byte [%1], %2
    43 000010D8 0F854A0E0000        <1>  jne L_error_incorrect_type
  1416 000010DE 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  1417 000010E1 4825FF000000                    and rax, 255
  1418 000010E7 48BF-                           mov rdi, fmt_char
  1418 000010E9 [6A02000000000000] 
  1419 000010F1 4889C6                          mov rsi, rax
  1420 000010F4 B800000000                      mov rax, 0
  1421                                  	ENTER
    33 000010F9 C8000000            <1>  enter 0, 0
    34 000010FD 4883E4F0            <1>  and rsp, ~15
  1422 00001101 E8(00000000)                    call printf
  1423                                  	LEAVE
    38 00001106 C9                  <1>  leave
  1424 00001107 48B8-                           mov rax, sob_void
  1424 00001109 [0000000000000000] 
  1425                                          LEAVE
    38 00001111 C9                  <1>  leave
  1426 00001112 C21800                          ret AND_KILL_FRAME(1)
  1427                                  
  1428                                  L_code_ptr_car:
  1429                                          ENTER
    33 00001115 C8000000            <1>  enter 0, 0
    34 00001119 4883E4F0            <1>  and rsp, ~15
  1430 0000111D 48837D1801                      cmp COUNT, 1
  1431 00001122 0F852C0D0000                    jne L_error_arg_count_1
  1432 00001128 488B4520                        mov rax, PARAM(0)
  1433                                          assert_pair(rax)
    42 0000112C 803821              <1>  cmp byte [%1], %2
    43 0000112F 0F85F30D0000        <1>  jne L_error_incorrect_type
  1434 00001135 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  1435                                          LEAVE
    38 00001139 C9                  <1>  leave
  1436 0000113A C21800                          ret AND_KILL_FRAME(1)
  1437                                          
  1438                                  L_code_ptr_cdr:
  1439                                          ENTER
    33 0000113D C8000000            <1>  enter 0, 0
    34 00001141 4883E4F0            <1>  and rsp, ~15
  1440 00001145 48837D1801                      cmp COUNT, 1
  1441 0000114A 0F85040D0000                    jne L_error_arg_count_1
  1442 00001150 488B4520                        mov rax, PARAM(0)
  1443                                          assert_pair(rax)
    42 00001154 803821              <1>  cmp byte [%1], %2
    43 00001157 0F85CB0D0000        <1>  jne L_error_incorrect_type
  1444 0000115D 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  1445                                          LEAVE
    38 00001161 C9                  <1>  leave
  1446 00001162 C21800                          ret AND_KILL_FRAME(1)
  1447                                          
  1448                                  L_code_ptr_string_length:
  1449                                          ENTER
    33 00001165 C8000000            <1>  enter 0, 0
    34 00001169 4883E4F0            <1>  and rsp, ~15
  1450 0000116D 48837D1801                      cmp COUNT, 1
  1451 00001172 0F85DC0C0000                    jne L_error_arg_count_1
  1452 00001178 488B4520                        mov rax, PARAM(0)
  1453                                          assert_string(rax)
    42 0000117C 803803              <1>  cmp byte [%1], %2
    43 0000117F 0F85A30D0000        <1>  jne L_error_incorrect_type
  1454 00001185 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  1455 00001189 E83A0C0000                      call make_integer
  1456                                          LEAVE
    38 0000118E C9                  <1>  leave
  1457 0000118F C21800                          ret AND_KILL_FRAME(1)
  1458                                  
  1459                                  L_code_ptr_vector_length:
  1460                                          ENTER
    33 00001192 C8000000            <1>  enter 0, 0
    34 00001196 4883E4F0            <1>  and rsp, ~15
  1461 0000119A 48837D1801                      cmp COUNT, 1
  1462 0000119F 0F85AF0C0000                    jne L_error_arg_count_1
  1463 000011A5 488B4520                        mov rax, PARAM(0)
  1464                                          assert_vector(rax)
    42 000011A9 803822              <1>  cmp byte [%1], %2
    43 000011AC 0F85760D0000        <1>  jne L_error_incorrect_type
  1465 000011B2 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  1466 000011B6 E80D0C0000                      call make_integer
  1467                                          LEAVE
    38 000011BB C9                  <1>  leave
  1468 000011BC C21800                          ret AND_KILL_FRAME(1)
  1469                                  
  1470                                  L_code_ptr_real_to_integer:
  1471                                          ENTER
    33 000011BF C8000000            <1>  enter 0, 0
    34 000011C3 4883E4F0            <1>  and rsp, ~15
  1472 000011C7 48837D1801                      cmp COUNT, 1
  1473 000011CC 0F85820C0000                    jne L_error_arg_count_1
  1474 000011D2 488B5D20                        mov rbx, PARAM(0)
  1475                                          assert_real(rbx)
    42 000011D6 803B12              <1>  cmp byte [%1], %2
    43 000011D9 0F85490D0000        <1>  jne L_error_incorrect_type
  1476 000011DF F20F104301                      movsd xmm0, qword [rbx + 1]
  1477 000011E4 F2480F2CF8                      cvttsd2si rdi, xmm0
  1478 000011E9 E8DA0B0000                      call make_integer
  1479                                          LEAVE
    38 000011EE C9                  <1>  leave
  1480 000011EF C21800                          ret AND_KILL_FRAME(1)
  1481                                  
  1482                                  L_code_ptr_exit:
  1483                                          ENTER
    33 000011F2 C8000000            <1>  enter 0, 0
    34 000011F6 4883E4F0            <1>  and rsp, ~15
  1484 000011FA 48837D1800                      cmp COUNT, 0
  1485 000011FF 0F851A0C0000                    jne L_error_arg_count_0
  1486 00001205 B800000000                      mov rax, 0
  1487 0000120A E8(00000000)                    call exit
  1488                                  
  1489                                  L_code_ptr_integer_to_real:
  1490                                          ENTER
    33 0000120F C8000000            <1>  enter 0, 0
    34 00001213 4883E4F0            <1>  and rsp, ~15
  1491 00001217 48837D1801                      cmp COUNT, 1
  1492 0000121C 0F85320C0000                    jne L_error_arg_count_1
  1493 00001222 488B4520                        mov rax, PARAM(0)
  1494                                          assert_integer(rax)
    47                              <1>  assert_rational(%1)
    42 00001226 803811              <2>  cmp byte [%1], %2
    43 00001229 0F85F90C0000        <2>  jne L_error_incorrect_type
    48 0000122F 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001234 0F85EE0C0000        <1>  jne L_error_incorrect_type
  1495 0000123A FF7001                          push qword [rax + 1]
  1496 0000123D F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1497 00001243 E8640B0000                      call make_real
  1498                                          LEAVE
    38 00001248 C9                  <1>  leave
  1499 00001249 C21800                          ret AND_KILL_FRAME(1)
  1500                                  
  1501                                  L_code_ptr_rational_to_real:
  1502                                          ENTER
    33 0000124C C8000000            <1>  enter 0, 0
    34 00001250 4883E4F0            <1>  and rsp, ~15
  1503 00001254 48837D1801                      cmp COUNT, 1
  1504 00001259 0F85F50B0000                    jne L_error_arg_count_1
  1505 0000125F 488B4520                        mov rax, PARAM(0)
  1506                                          assert_rational(rax)
    42 00001263 803811              <1>  cmp byte [%1], %2
    43 00001266 0F85BC0C0000        <1>  jne L_error_incorrect_type
  1507 0000126C FF7001                          push qword [rax + 1]
  1508 0000126F F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1509 00001275 FF7009                          push qword [rax + 1 + 8]
  1510 00001278 F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  1511 0000127E F20F5EC1                        divsd xmm0, xmm1
  1512 00001282 E8250B0000                      call make_real
  1513                                          LEAVE
    38 00001287 C9                  <1>  leave
  1514 00001288 C21800                          ret AND_KILL_FRAME(1)
  1515                                  
  1516                                  L_code_ptr_char_to_integer:
  1517                                          ENTER
    33 0000128B C8000000            <1>  enter 0, 0
    34 0000128F 4883E4F0            <1>  and rsp, ~15
  1518 00001293 48837D1801                      cmp COUNT, 1
  1519 00001298 0F85B60B0000                    jne L_error_arg_count_1
  1520 0000129E 488B4520                        mov rax, PARAM(0)
  1521                                          assert_char(rax)
    42 000012A2 803802              <1>  cmp byte [%1], %2
    43 000012A5 0F857D0C0000        <1>  jne L_error_incorrect_type
  1522 000012AB 8A4001                          mov al, byte [rax + 1]
  1523 000012AE 4825FF000000                    and rax, 255
  1524 000012B4 4889C7                          mov rdi, rax
  1525 000012B7 E80C0B0000                      call make_integer
  1526                                          LEAVE
    38 000012BC C9                  <1>  leave
  1527 000012BD C21800                          ret AND_KILL_FRAME(1)
  1528                                  
  1529                                  L_code_ptr_integer_to_char:
  1530                                          ENTER
    33 000012C0 C8000000            <1>  enter 0, 0
    34 000012C4 4883E4F0            <1>  and rsp, ~15
  1531 000012C8 48837D1801                      cmp COUNT, 1
  1532 000012CD 0F85810B0000                    jne L_error_arg_count_1
  1533 000012D3 488B4520                        mov rax, PARAM(0)
  1534                                          assert_integer(rax)
    47                              <1>  assert_rational(%1)
    42 000012D7 803811              <2>  cmp byte [%1], %2
    43 000012DA 0F85480C0000        <2>  jne L_error_incorrect_type
    48 000012E0 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000012E5 0F853D0C0000        <1>  jne L_error_incorrect_type
  1535 000012EB 488B5801                        mov rbx, qword [rax + 1]
  1536 000012EF 4883FB00                        cmp rbx, 0
  1537 000012F3 0F8EF50A0000                    jle L_error_integer_range
  1538 000012F9 4881FB00010000                  cmp rbx, 256
  1539 00001300 0F8DE80A0000                    jge L_error_integer_range
  1540 00001306 BF02000000                      mov rdi, (1 + 1)
  1541 0000130B E8D3F4FFFF                      call malloc
  1542 00001310 C60002                          mov byte [rax], T_char
  1543 00001313 885801                          mov byte [rax + 1], bl
  1544                                          LEAVE
    38 00001316 C9                  <1>  leave
  1545 00001317 C21800                          ret AND_KILL_FRAME(1)
  1546                                  
  1547                                  L_code_ptr_trng:
  1548                                          ENTER
    33 0000131A C8000000            <1>  enter 0, 0
    34 0000131E 4883E4F0            <1>  and rsp, ~15
  1549 00001322 48837D1800                      cmp COUNT, 0
  1550 00001327 0F85F20A0000                    jne L_error_arg_count_0
  1551 0000132D 480FC7F7                        rdrand rdi
  1552 00001331 48D1EF                          shr rdi, 1
  1553 00001334 E88F0A0000                      call make_integer
  1554                                          LEAVE
    38 00001339 C9                  <1>  leave
  1555 0000133A C21000                          ret AND_KILL_FRAME(0)
  1556                                  
  1557                                  L_code_ptr_is_zero:
  1558                                          ENTER
    33 0000133D C8000000            <1>  enter 0, 0
    34 00001341 4883E4F0            <1>  and rsp, ~15
  1559 00001345 48837D1801                      cmp COUNT, 1
  1560 0000134A 0F85040B0000                    jne L_error_arg_count_1
  1561 00001350 488B4520                        mov rax, PARAM(0)
  1562 00001354 803811                          cmp byte [rax], T_rational
  1563 00001357 740A                            je .L_rational
  1564 00001359 803812                          cmp byte [rax], T_real
  1565 0000135C 740E                            je .L_real
  1566 0000135E E9C50B0000                      jmp L_error_incorrect_type
  1567                                  .L_rational:
  1568 00001363 4883780100                      cmp qword [rax + 1], 0
  1569 00001368 7420                            je .L_zero
  1570 0000136A EB12                            jmp .L_not_zero
  1571                                  .L_real:
  1572 0000136C 660FEFC0                        pxor xmm0, xmm0
  1573 00001370 FF7001                          push qword [rax + 1]
  1574 00001373 F20F100C24                      movsd xmm1, qword [rsp]
  1575 00001378 660F2EC1                        ucomisd xmm0, xmm1
  1576 0000137C 740C                            je .L_zero
  1577                                  .L_not_zero:
  1578 0000137E 48B8-                           mov rax, sob_boolean_false
  1578 00001380 [0200000000000000] 
  1579 00001388 EB0A                            jmp .L_end
  1580                                  .L_zero:
  1581 0000138A 48B8-                           mov rax, sob_boolean_true
  1581 0000138C [0300000000000000] 
  1582                                  .L_end:
  1583                                          LEAVE
    38 00001394 C9                  <1>  leave
  1584 00001395 C21800                          ret AND_KILL_FRAME(1)
  1585                                  
  1586                                  L_code_ptr_is_integer:
  1587                                          ENTER
    33 00001398 C8000000            <1>  enter 0, 0
    34 0000139C 4883E4F0            <1>  and rsp, ~15
  1588 000013A0 48837D1801                      cmp COUNT, 1
  1589 000013A5 0F85A90A0000                    jne L_error_arg_count_1
  1590 000013AB 488B4520                        mov rax, PARAM(0)
  1591 000013AF 803811                          cmp byte [rax], T_rational
  1592 000013B2 7513                            jne .L_false
  1593 000013B4 4883780901                      cmp qword [rax + 1 + 8], 1
  1594 000013B9 750C                            jne .L_false
  1595 000013BB 48B8-                           mov rax, sob_boolean_true
  1595 000013BD [0300000000000000] 
  1596 000013C5 EB0A                            jmp .L_exit
  1597                                  .L_false:
  1598 000013C7 48B8-                           mov rax, sob_boolean_false
  1598 000013C9 [0200000000000000] 
  1599                                  .L_exit:
  1600                                          LEAVE
    38 000013D1 C9                  <1>  leave
  1601 000013D2 C21800                          ret AND_KILL_FRAME(1)
  1602                                  
  1603                                  L_code_ptr_raw_bin_add_rr:
  1604                                          ENTER
    33 000013D5 C8000000            <1>  enter 0, 0
    34 000013D9 4883E4F0            <1>  and rsp, ~15
  1605 000013DD 48837D1802                      cmp COUNT, 2
  1606 000013E2 0F85A10A0000                    jne L_error_arg_count_2
  1607 000013E8 488B5D20                        mov rbx, PARAM(0)
  1608                                          assert_real(rbx)
    42 000013EC 803B12              <1>  cmp byte [%1], %2
    43 000013EF 0F85330B0000        <1>  jne L_error_incorrect_type
  1609 000013F5 488B4D28                        mov rcx, PARAM(1)
  1610                                          assert_real(rcx)
    42 000013F9 803912              <1>  cmp byte [%1], %2
    43 000013FC 0F85260B0000        <1>  jne L_error_incorrect_type
  1611 00001402 F20F104301                      movsd xmm0, qword [rbx + 1]
  1612 00001407 F20F104901                      movsd xmm1, qword [rcx + 1]
  1613 0000140C F20F58C1                        addsd xmm0, xmm1
  1614 00001410 E897090000                      call make_real
  1615                                          LEAVE
    38 00001415 C9                  <1>  leave
  1616 00001416 C22000                          ret AND_KILL_FRAME(2)
  1617                                  
  1618                                  L_code_ptr_raw_bin_sub_rr:
  1619                                          ENTER
    33 00001419 C8000000            <1>  enter 0, 0
    34 0000141D 4883E4F0            <1>  and rsp, ~15
  1620 00001421 48837D1802                      cmp COUNT, 2
  1621 00001426 0F855D0A0000                    jne L_error_arg_count_2
  1622 0000142C 488B5D20                        mov rbx, PARAM(0)
  1623                                          assert_real(rbx)
    42 00001430 803B12              <1>  cmp byte [%1], %2
    43 00001433 0F85EF0A0000        <1>  jne L_error_incorrect_type
  1624 00001439 488B4D28                        mov rcx, PARAM(1)
  1625                                          assert_real(rcx)
    42 0000143D 803912              <1>  cmp byte [%1], %2
    43 00001440 0F85E20A0000        <1>  jne L_error_incorrect_type
  1626 00001446 F20F104301                      movsd xmm0, qword [rbx + 1]
  1627 0000144B F20F104901                      movsd xmm1, qword [rcx + 1]
  1628 00001450 F20F5CC1                        subsd xmm0, xmm1
  1629 00001454 E853090000                      call make_real
  1630                                          LEAVE
    38 00001459 C9                  <1>  leave
  1631 0000145A C22000                          ret AND_KILL_FRAME(2)
  1632                                  
  1633                                  L_code_ptr_raw_bin_mul_rr:
  1634                                          ENTER
    33 0000145D C8000000            <1>  enter 0, 0
    34 00001461 4883E4F0            <1>  and rsp, ~15
  1635 00001465 48837D1802                      cmp COUNT, 2
  1636 0000146A 0F85190A0000                    jne L_error_arg_count_2
  1637 00001470 488B5D20                        mov rbx, PARAM(0)
  1638                                          assert_real(rbx)
    42 00001474 803B12              <1>  cmp byte [%1], %2
    43 00001477 0F85AB0A0000        <1>  jne L_error_incorrect_type
  1639 0000147D 488B4D28                        mov rcx, PARAM(1)
  1640                                          assert_real(rcx)
    42 00001481 803912              <1>  cmp byte [%1], %2
    43 00001484 0F859E0A0000        <1>  jne L_error_incorrect_type
  1641 0000148A F20F104301                      movsd xmm0, qword [rbx + 1]
  1642 0000148F F20F104901                      movsd xmm1, qword [rcx + 1]
  1643 00001494 F20F59C1                        mulsd xmm0, xmm1
  1644 00001498 E80F090000                      call make_real
  1645                                          LEAVE
    38 0000149D C9                  <1>  leave
  1646 0000149E C22000                          ret AND_KILL_FRAME(2)
  1647                                  
  1648                                  L_code_ptr_raw_bin_div_rr:
  1649                                          ENTER
    33 000014A1 C8000000            <1>  enter 0, 0
    34 000014A5 4883E4F0            <1>  and rsp, ~15
  1650 000014A9 48837D1802                      cmp COUNT, 2
  1651 000014AE 0F85D5090000                    jne L_error_arg_count_2
  1652 000014B4 488B5D20                        mov rbx, PARAM(0)
  1653                                          assert_real(rbx)
    42 000014B8 803B12              <1>  cmp byte [%1], %2
    43 000014BB 0F85670A0000        <1>  jne L_error_incorrect_type
  1654 000014C1 488B4D28                        mov rcx, PARAM(1)
  1655                                          assert_real(rcx)
    42 000014C5 803912              <1>  cmp byte [%1], %2
    43 000014C8 0F855A0A0000        <1>  jne L_error_incorrect_type
  1656 000014CE F20F104301                      movsd xmm0, qword [rbx + 1]
  1657 000014D3 F20F104901                      movsd xmm1, qword [rcx + 1]
  1658 000014D8 660FEFD2                        pxor xmm2, xmm2
  1659 000014DC 660F2ECA                        ucomisd xmm1, xmm2
  1660 000014E0 0F84730A0000                    je L_error_division_by_zero
  1661 000014E6 F20F5EC1                        divsd xmm0, xmm1
  1662 000014EA E8BD080000                      call make_real
  1663                                          LEAVE
    38 000014EF C9                  <1>  leave
  1664 000014F0 C22000                          ret AND_KILL_FRAME(2)
  1665                                  
  1666                                  L_code_ptr_raw_bin_add_qq:
  1667                                          ENTER
    33 000014F3 C8000000            <1>  enter 0, 0
    34 000014F7 4883E4F0            <1>  and rsp, ~15
  1668 000014FB 48837D1802                      cmp COUNT, 2
  1669 00001500 0F8583090000                    jne L_error_arg_count_2
  1670 00001506 4C8B4520                        mov r8, PARAM(0)
  1671                                          assert_rational(r8)
    42 0000150A 41803811            <1>  cmp byte [%1], %2
    43 0000150E 0F85140A0000        <1>  jne L_error_incorrect_type
  1672 00001514 4C8B4D28                        mov r9, PARAM(1)
  1673                                          assert_rational(r9)
    42 00001518 41803911            <1>  cmp byte [%1], %2
    43 0000151C 0F85060A0000        <1>  jne L_error_incorrect_type
  1674 00001522 498B4001                        mov rax, qword [r8 + 1] ; num1
  1675 00001526 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1676 0000152A 4899                            cqo
  1677 0000152C 48F7EB                          imul rbx
  1678 0000152F 4889C6                          mov rsi, rax
  1679 00001532 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1680 00001536 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1681 0000153A 4899                            cqo
  1682 0000153C 48F7EB                          imul rbx
  1683 0000153F 4801C6                          add rsi, rax
  1684 00001542 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1685 00001546 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1686 0000154A 4899                            cqo
  1687 0000154C 48F7EB                          imul rbx
  1688 0000154F 4889C7                          mov rdi, rax
  1689 00001552 E827010000                      call normalize_rational
  1690                                          LEAVE
    38 00001557 C9                  <1>  leave
  1691 00001558 C22000                          ret AND_KILL_FRAME(2)
  1692                                  
  1693                                  L_code_ptr_raw_bin_sub_qq:
  1694                                          ENTER
    33 0000155B C8000000            <1>  enter 0, 0
    34 0000155F 4883E4F0            <1>  and rsp, ~15
  1695 00001563 48837D1802                      cmp COUNT, 2
  1696 00001568 0F851B090000                    jne L_error_arg_count_2
  1697 0000156E 4C8B4520                        mov r8, PARAM(0)
  1698                                          assert_rational(r8)
    42 00001572 41803811            <1>  cmp byte [%1], %2
    43 00001576 0F85AC090000        <1>  jne L_error_incorrect_type
  1699 0000157C 4C8B4D28                        mov r9, PARAM(1)
  1700                                          assert_rational(r9)
    42 00001580 41803911            <1>  cmp byte [%1], %2
    43 00001584 0F859E090000        <1>  jne L_error_incorrect_type
  1701 0000158A 498B4001                        mov rax, qword [r8 + 1] ; num1
  1702 0000158E 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1703 00001592 4899                            cqo
  1704 00001594 48F7EB                          imul rbx
  1705 00001597 4889C6                          mov rsi, rax
  1706 0000159A 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1707 0000159E 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1708 000015A2 4899                            cqo
  1709 000015A4 48F7EB                          imul rbx
  1710 000015A7 4829C6                          sub rsi, rax
  1711 000015AA 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1712 000015AE 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1713 000015B2 4899                            cqo
  1714 000015B4 48F7EB                          imul rbx
  1715 000015B7 4889C7                          mov rdi, rax
  1716 000015BA E8BF000000                      call normalize_rational
  1717                                          LEAVE
    38 000015BF C9                  <1>  leave
  1718 000015C0 C22000                          ret AND_KILL_FRAME(2)
  1719                                  
  1720                                  L_code_ptr_raw_bin_mul_qq:
  1721                                          ENTER
    33 000015C3 C8000000            <1>  enter 0, 0
    34 000015C7 4883E4F0            <1>  and rsp, ~15
  1722 000015CB 48837D1802                      cmp COUNT, 2
  1723 000015D0 0F85B3080000                    jne L_error_arg_count_2
  1724 000015D6 4C8B4520                        mov r8, PARAM(0)
  1725                                          assert_rational(r8)
    42 000015DA 41803811            <1>  cmp byte [%1], %2
    43 000015DE 0F8544090000        <1>  jne L_error_incorrect_type
  1726 000015E4 4C8B4D28                        mov r9, PARAM(1)
  1727                                          assert_rational(r9)
    42 000015E8 41803911            <1>  cmp byte [%1], %2
    43 000015EC 0F8536090000        <1>  jne L_error_incorrect_type
  1728 000015F2 498B4001                        mov rax, qword [r8 + 1] ; num1
  1729 000015F6 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1730 000015FA 4899                            cqo
  1731 000015FC 48F7EB                          imul rbx
  1732 000015FF 4889C6                          mov rsi, rax
  1733 00001602 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1734 00001606 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1735 0000160A 4899                            cqo
  1736 0000160C 48F7EB                          imul rbx
  1737 0000160F 4889C7                          mov rdi, rax
  1738 00001612 E867000000                      call normalize_rational
  1739                                          LEAVE
    38 00001617 C9                  <1>  leave
  1740 00001618 C22000                          ret AND_KILL_FRAME(2)
  1741                                          
  1742                                  L_code_ptr_raw_bin_div_qq:
  1743                                          ENTER
    33 0000161B C8000000            <1>  enter 0, 0
    34 0000161F 4883E4F0            <1>  and rsp, ~15
  1744 00001623 48837D1802                      cmp COUNT, 2
  1745 00001628 0F855B080000                    jne L_error_arg_count_2
  1746 0000162E 4C8B4520                        mov r8, PARAM(0)
  1747                                          assert_rational(r8)
    42 00001632 41803811            <1>  cmp byte [%1], %2
    43 00001636 0F85EC080000        <1>  jne L_error_incorrect_type
  1748 0000163C 4C8B4D28                        mov r9, PARAM(1)
  1749                                          assert_rational(r9)
    42 00001640 41803911            <1>  cmp byte [%1], %2
    43 00001644 0F85DE080000        <1>  jne L_error_incorrect_type
  1750 0000164A 4983790100                      cmp qword [r9 + 1], 0
  1751 0000164F 0F8404090000                    je L_error_division_by_zero
  1752 00001655 498B4001                        mov rax, qword [r8 + 1] ; num1
  1753 00001659 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1754 0000165D 4899                            cqo
  1755 0000165F 48F7EB                          imul rbx
  1756 00001662 4889C6                          mov rsi, rax
  1757 00001665 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1758 00001669 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1759 0000166D 4899                            cqo
  1760 0000166F 48F7EB                          imul rbx
  1761 00001672 4889C7                          mov rdi, rax
  1762 00001675 E804000000                      call normalize_rational
  1763                                          LEAVE
    38 0000167A C9                  <1>  leave
  1764 0000167B C22000                          ret AND_KILL_FRAME(2)
  1765                                          
  1766                                  normalize_rational:
  1767 0000167E 56                              push rsi
  1768 0000167F 57                              push rdi
  1769 00001680 E839000000                      call gcd
  1770 00001685 4889C3                          mov rbx, rax
  1771 00001688 58                              pop rax
  1772 00001689 4899                            cqo
  1773 0000168B 48F7FB                          idiv rbx
  1774 0000168E 4989C0                          mov r8, rax
  1775 00001691 58                              pop rax
  1776 00001692 4899                            cqo
  1777 00001694 48F7FB                          idiv rbx
  1778 00001697 4989C1                          mov r9, rax
  1779 0000169A BF11000000                      mov rdi, (1 + 8 + 8)
  1780 0000169F E83FF1FFFF                      call malloc
  1781 000016A4 C60011                          mov byte [rax], T_rational
  1782 000016A7 4C894801                        mov qword [rax + 1], r9
  1783 000016AB 4C894009                        mov qword [rax + 1 + 8], r8
  1784 000016AF C3                              ret
  1785                                  
  1786                                  iabs:
  1787 000016B0 4889F8                          mov rax, rdi
  1788 000016B3 4883F800                        cmp rax, 0
  1789 000016B7 7C01                            jl .Lneg
  1790 000016B9 C3                              ret
  1791                                  .Lneg:
  1792 000016BA 48F7D8                          neg rax
  1793 000016BD C3                              ret
  1794                                  
  1795                                  gcd:
  1796 000016BE E8EDFFFFFF                      call iabs
  1797 000016C3 4889C3                          mov rbx, rax
  1798 000016C6 4889F7                          mov rdi, rsi
  1799 000016C9 E8E2FFFFFF                      call iabs
  1800 000016CE 4883F800                        cmp rax, 0
  1801 000016D2 7502                            jne .L0
  1802 000016D4 4893                            xchg rax, rbx
  1803                                  .L0:
  1804 000016D6 4883FB00                        cmp rbx, 0
  1805 000016DA 740C                            je .L1
  1806 000016DC 4899                            cqo
  1807 000016DE 48F7F3                          div rbx
  1808 000016E1 4889D0                          mov rax, rdx
  1809 000016E4 4893                            xchg rax, rbx
  1810 000016E6 EBEE                            jmp .L0
  1811                                  .L1:
  1812 000016E8 C3                              ret
  1813                                  
  1814                                  L_code_ptr_error:
  1815                                          ENTER
    33 000016E9 C8000000            <1>  enter 0, 0
    34 000016ED 4883E4F0            <1>  and rsp, ~15
  1816 000016F1 48837D1802                      cmp COUNT, 2
  1817 000016F6 0F858D070000                    jne L_error_arg_count_2
  1818 000016FC 488B7520                        mov rsi, PARAM(0)
  1819                                          assert_symbol(rsi)
    42 00001700 803E04              <1>  cmp byte [%1], %2
    43 00001703 0F851F080000        <1>  jne L_error_incorrect_type
  1820 00001709 488B7528                        mov rsi, PARAM(1)
  1821                                          assert_string(rsi)
    42 0000170D 803E03              <1>  cmp byte [%1], %2
    43 00001710 0F8512080000        <1>  jne L_error_incorrect_type
  1822 00001716 48BF-                           mov rdi, fmt_scheme_error_part_1
  1822 00001718 [A203000000000000] 
  1823 00001720 B800000000                      mov rax, 0
  1824                                  	ENTER
    33 00001725 C8000000            <1>  enter 0, 0
    34 00001729 4883E4F0            <1>  and rsp, ~15
  1825 0000172D E8(00000000)                    call printf
  1826                                  	LEAVE
    38 00001732 C9                  <1>  leave
  1827 00001733 488B7D20                        mov rdi, PARAM(0)
  1828 00001737 E8C2F0FFFF                      call print_sexpr
  1829 0000173C 48BF-                           mov rdi, fmt_scheme_error_part_2
  1829 0000173E [B603000000000000] 
  1830 00001746 B800000000                      mov rax, 0
  1831                                  	ENTER
    33 0000174B C8000000            <1>  enter 0, 0
    34 0000174F 4883E4F0            <1>  and rsp, ~15
  1832 00001753 E8(00000000)                    call printf
  1833                                  	LEAVE
    38 00001758 C9                  <1>  leave
  1834 00001759 488B4528                        mov rax, PARAM(1)       ; sob_string
  1835 0000175D BE01000000                      mov rsi, 1              ; size = 1 byte
  1836 00001762 488B5001                        mov rdx, qword [rax + 1] ; length
  1837 00001766 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  1838 0000176A 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
  1839 00001772 E8(00000000)                    call fwrite
  1840 00001777 48BF-                           mov rdi, fmt_scheme_error_part_3
  1840 00001779 [F803000000000000] 
  1841 00001781 B800000000                      mov rax, 0
  1842                                  	ENTER
    33 00001786 C8000000            <1>  enter 0, 0
    34 0000178A 4883E4F0            <1>  and rsp, ~15
  1843 0000178E E8(00000000)                    call printf
  1844                                  	LEAVE
    38 00001793 C9                  <1>  leave
  1845 00001794 48C7C0F7FFFFFF                  mov rax, -9
  1846 0000179B E8(00000000)                    call exit
  1847                                  
  1848                                  L_code_ptr_raw_less_than_rr:
  1849                                          ENTER
    33 000017A0 C8000000            <1>  enter 0, 0
    34 000017A4 4883E4F0            <1>  and rsp, ~15
  1850 000017A8 48837D1802                      cmp COUNT, 2
  1851 000017AD 0F85D6060000                    jne L_error_arg_count_2
  1852 000017B3 488B7520                        mov rsi, PARAM(0)
  1853                                          assert_real(rsi)
    42 000017B7 803E12              <1>  cmp byte [%1], %2
    43 000017BA 0F8568070000        <1>  jne L_error_incorrect_type
  1854 000017C0 488B7D28                        mov rdi, PARAM(1)
  1855                                          assert_real(rdi)
    42 000017C4 803F12              <1>  cmp byte [%1], %2
    43 000017C7 0F855B070000        <1>  jne L_error_incorrect_type
  1856 000017CD F20F104601                      movsd xmm0, qword [rsi + 1]
  1857 000017D2 F20F104F01                      movsd xmm1, qword [rdi + 1]
  1858 000017D7 660F2FC1                        comisd xmm0, xmm1
  1859 000017DB 730C                            jae .L_false
  1860 000017DD 48B8-                           mov rax, sob_boolean_true
  1860 000017DF [0300000000000000] 
  1861 000017E7 EB0A                            jmp .L_exit
  1862                                  .L_false:
  1863 000017E9 48B8-                           mov rax, sob_boolean_false
  1863 000017EB [0200000000000000] 
  1864                                  .L_exit:
  1865                                          LEAVE
    38 000017F3 C9                  <1>  leave
  1866 000017F4 C22000                          ret AND_KILL_FRAME(2)
  1867                                          
  1868                                  L_code_ptr_raw_less_than_qq:
  1869                                          ENTER
    33 000017F7 C8000000            <1>  enter 0, 0
    34 000017FB 4883E4F0            <1>  and rsp, ~15
  1870 000017FF 48837D1802                      cmp COUNT, 2
  1871 00001804 0F857F060000                    jne L_error_arg_count_2
  1872 0000180A 488B7520                        mov rsi, PARAM(0)
  1873                                          assert_rational(rsi)
    42 0000180E 803E11              <1>  cmp byte [%1], %2
    43 00001811 0F8511070000        <1>  jne L_error_incorrect_type
  1874 00001817 488B7D28                        mov rdi, PARAM(1)
  1875                                          assert_rational(rdi)
    42 0000181B 803F11              <1>  cmp byte [%1], %2
    43 0000181E 0F8504070000        <1>  jne L_error_incorrect_type
  1876 00001824 488B4601                        mov rax, qword [rsi + 1] ; num1
  1877 00001828 4899                            cqo
  1878 0000182A 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  1879 0000182E 4889C1                          mov rcx, rax
  1880 00001831 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
  1881 00001835 4899                            cqo
  1882 00001837 48F76F01                        imul qword [rdi + 1]          ; num2
  1883 0000183B 4829C1                          sub rcx, rax
  1884 0000183E 7D0C                            jge .L_false
  1885 00001840 48B8-                           mov rax, sob_boolean_true
  1885 00001842 [0300000000000000] 
  1886 0000184A EB0A                            jmp .L_exit
  1887                                  .L_false:
  1888 0000184C 48B8-                           mov rax, sob_boolean_false
  1888 0000184E [0200000000000000] 
  1889                                  .L_exit:
  1890                                          LEAVE
    38 00001856 C9                  <1>  leave
  1891 00001857 C22000                          ret AND_KILL_FRAME(2)
  1892                                  
  1893                                  
  1894                                  L_code_ptr_raw_equal_rr:
  1895                                          ENTER
    33 0000185A C8000000            <1>  enter 0, 0
    34 0000185E 4883E4F0            <1>  and rsp, ~15
  1896 00001862 48837D1802                      cmp COUNT, 2
  1897 00001867 0F851C060000                    jne L_error_arg_count_2
  1898 0000186D 488B7520                        mov rsi, PARAM(0)
  1899                                          assert_real(rsi)
    42 00001871 803E12              <1>  cmp byte [%1], %2
    43 00001874 0F85AE060000        <1>  jne L_error_incorrect_type
  1900 0000187A 488B7D28                        mov rdi, PARAM(1)
  1901                                          assert_real(rdi)
    42 0000187E 803F12              <1>  cmp byte [%1], %2
    43 00001881 0F85A1060000        <1>  jne L_error_incorrect_type
  1902 00001887 F20F104601                      movsd xmm0, qword [rsi + 1]
  1903 0000188C F20F104F01                      movsd xmm1, qword [rdi + 1]
  1904 00001891 660F2FC1                        comisd xmm0, xmm1
  1905 00001895 750C                            jne .L_false
  1906 00001897 48B8-                           mov rax, sob_boolean_true
  1906 00001899 [0300000000000000] 
  1907 000018A1 EB0A                            jmp .L_exit
  1908                                  .L_false:
  1909 000018A3 48B8-                           mov rax, sob_boolean_false
  1909 000018A5 [0200000000000000] 
  1910                                  .L_exit:
  1911                                          LEAVE
    38 000018AD C9                  <1>  leave
  1912 000018AE C22000                          ret AND_KILL_FRAME(2)
  1913                                          
  1914                                  L_code_ptr_raw_equal_qq:
  1915                                          ENTER
    33 000018B1 C8000000            <1>  enter 0, 0
    34 000018B5 4883E4F0            <1>  and rsp, ~15
  1916 000018B9 48837D1802                      cmp COUNT, 2
  1917 000018BE 0F85C5050000                    jne L_error_arg_count_2
  1918 000018C4 488B7520                        mov rsi, PARAM(0)
  1919                                          assert_rational(rsi)
    42 000018C8 803E11              <1>  cmp byte [%1], %2
    43 000018CB 0F8557060000        <1>  jne L_error_incorrect_type
  1920 000018D1 488B7D28                        mov rdi, PARAM(1)
  1921                                          assert_rational(rdi)
    42 000018D5 803F11              <1>  cmp byte [%1], %2
    43 000018D8 0F854A060000        <1>  jne L_error_incorrect_type
  1922 000018DE 488B4601                        mov rax, qword [rsi + 1] ; num1
  1923 000018E2 4899                            cqo
  1924 000018E4 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  1925 000018E8 4889C1                          mov rcx, rax
  1926 000018EB 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  1927 000018EF 4899                            cqo
  1928 000018F1 48F76F01                        imul qword [rdi + 1]          ; num2
  1929 000018F5 4829C1                          sub rcx, rax
  1930 000018F8 750C                            jne .L_false
  1931 000018FA 48B8-                           mov rax, sob_boolean_true
  1931 000018FC [0300000000000000] 
  1932 00001904 EB0A                            jmp .L_exit
  1933                                  .L_false:
  1934 00001906 48B8-                           mov rax, sob_boolean_false
  1934 00001908 [0200000000000000] 
  1935                                  .L_exit:
  1936                                          LEAVE
    38 00001910 C9                  <1>  leave
  1937 00001911 C22000                          ret AND_KILL_FRAME(2)
  1938                                  
  1939                                  L_code_ptr_quotient:
  1940                                          ENTER
    33 00001914 C8000000            <1>  enter 0, 0
    34 00001918 4883E4F0            <1>  and rsp, ~15
  1941 0000191C 48837D1802                      cmp COUNT, 2
  1942 00001921 0F8562050000                    jne L_error_arg_count_2
  1943 00001927 488B7520                        mov rsi, PARAM(0)
  1944                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 0000192B 803E11              <2>  cmp byte [%1], %2
    43 0000192E 0F85F4050000        <2>  jne L_error_incorrect_type
    48 00001934 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001939 0F85E9050000        <1>  jne L_error_incorrect_type
  1945 0000193F 488B7D28                        mov rdi, PARAM(1)
  1946                                          assert_integer(rdi)
    47                              <1>  assert_rational(%1)
    42 00001943 803F11              <2>  cmp byte [%1], %2
    43 00001946 0F85DC050000        <2>  jne L_error_incorrect_type
    48 0000194C 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001951 0F85D1050000        <1>  jne L_error_incorrect_type
  1947 00001957 488B4601                        mov rax, qword [rsi + 1]
  1948 0000195B 488B5F01                        mov rbx, qword [rdi + 1]
  1949 0000195F 4883FB00                        cmp rbx, 0
  1950 00001963 0F84F0050000                    je L_error_division_by_zero
  1951 00001969 4899                            cqo
  1952 0000196B 48F7FB                          idiv rbx
  1953 0000196E 4889C7                          mov rdi, rax
  1954 00001971 E852040000                      call make_integer
  1955                                          LEAVE
    38 00001976 C9                  <1>  leave
  1956 00001977 C22000                          ret AND_KILL_FRAME(2)
  1957                                          
  1958                                  L_code_ptr_remainder:
  1959                                          ENTER
    33 0000197A C8000000            <1>  enter 0, 0
    34 0000197E 4883E4F0            <1>  and rsp, ~15
  1960 00001982 48837D1802                      cmp COUNT, 2
  1961 00001987 0F85FC040000                    jne L_error_arg_count_2
  1962 0000198D 488B7520                        mov rsi, PARAM(0)
  1963                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001991 803E11              <2>  cmp byte [%1], %2
    43 00001994 0F858E050000        <2>  jne L_error_incorrect_type
    48 0000199A 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 0000199F 0F8583050000        <1>  jne L_error_incorrect_type
  1964 000019A5 488B7D28                        mov rdi, PARAM(1)
  1965                                          assert_integer(rdi)
    47                              <1>  assert_rational(%1)
    42 000019A9 803F11              <2>  cmp byte [%1], %2
    43 000019AC 0F8576050000        <2>  jne L_error_incorrect_type
    48 000019B2 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000019B7 0F856B050000        <1>  jne L_error_incorrect_type
  1966 000019BD 488B4601                        mov rax, qword [rsi + 1]
  1967 000019C1 488B5F01                        mov rbx, qword [rdi + 1]
  1968 000019C5 4883FB00                        cmp rbx, 0
  1969 000019C9 0F848A050000                    je L_error_division_by_zero
  1970 000019CF 4899                            cqo
  1971 000019D1 48F7FB                          idiv rbx
  1972 000019D4 4889D7                          mov rdi, rdx
  1973 000019D7 E8EC030000                      call make_integer
  1974                                          LEAVE
    38 000019DC C9                  <1>  leave
  1975 000019DD C22000                          ret AND_KILL_FRAME(2)
  1976                                  
  1977                                  L_code_ptr_set_car:
  1978                                          ENTER
    33 000019E0 C8000000            <1>  enter 0, 0
    34 000019E4 4883E4F0            <1>  and rsp, ~15
  1979 000019E8 48837D1802                      cmp COUNT, 2
  1980 000019ED 0F8596040000                    jne L_error_arg_count_2
  1981 000019F3 488B4520                        mov rax, PARAM(0)
  1982                                          assert_pair(rax)
    42 000019F7 803821              <1>  cmp byte [%1], %2
    43 000019FA 0F8528050000        <1>  jne L_error_incorrect_type
  1983 00001A00 488B5D28                        mov rbx, PARAM(1)
  1984 00001A04 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1985 00001A08 48B8-                           mov rax, sob_void
  1985 00001A0A [0000000000000000] 
  1986                                          LEAVE
    38 00001A12 C9                  <1>  leave
  1987 00001A13 C22000                          ret AND_KILL_FRAME(2)
  1988                                  
  1989                                  L_code_ptr_set_cdr:
  1990                                          ENTER
    33 00001A16 C8000000            <1>  enter 0, 0
    34 00001A1A 4883E4F0            <1>  and rsp, ~15
  1991 00001A1E 48837D1802                      cmp COUNT, 2
  1992 00001A23 0F8560040000                    jne L_error_arg_count_2
  1993 00001A29 488B4520                        mov rax, PARAM(0)
  1994                                          assert_pair(rax)
    42 00001A2D 803821              <1>  cmp byte [%1], %2
    43 00001A30 0F85F2040000        <1>  jne L_error_incorrect_type
  1995 00001A36 488B5D28                        mov rbx, PARAM(1)
  1996 00001A3A 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1997 00001A3E 48B8-                           mov rax, sob_void
  1997 00001A40 [0000000000000000] 
  1998                                          LEAVE
    38 00001A48 C9                  <1>  leave
  1999 00001A49 C22000                          ret AND_KILL_FRAME(2)
  2000                                  
  2001                                  L_code_ptr_string_ref:
  2002                                          ENTER
    33 00001A4C C8000000            <1>  enter 0, 0
    34 00001A50 4883E4F0            <1>  and rsp, ~15
  2003 00001A54 48837D1802                      cmp COUNT, 2
  2004 00001A59 0F852A040000                    jne L_error_arg_count_2
  2005 00001A5F 488B7D20                        mov rdi, PARAM(0)
  2006                                          assert_string(rdi)
    42 00001A63 803F03              <1>  cmp byte [%1], %2
    43 00001A66 0F85BC040000        <1>  jne L_error_incorrect_type
  2007 00001A6C 488B7528                        mov rsi, PARAM(1)
  2008                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001A70 803E11              <2>  cmp byte [%1], %2
    43 00001A73 0F85AF040000        <2>  jne L_error_incorrect_type
    48 00001A79 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001A7E 0F85A4040000        <1>  jne L_error_incorrect_type
  2009 00001A84 488B5701                        mov rdx, qword [rdi + 1]
  2010 00001A88 488B4E01                        mov rcx, qword [rsi + 1]
  2011 00001A8C 4839D1                          cmp rcx, rdx
  2012 00001A8F 0F8D59030000                    jge L_error_integer_range
  2013 00001A95 4883F900                        cmp rcx, 0
  2014 00001A99 0F8C4F030000                    jl L_error_integer_range
  2015 00001A9F 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
  2016 00001AA3 BF02000000                      mov rdi, 2
  2017 00001AA8 E836EDFFFF                      call malloc
  2018 00001AAD C60002                          mov byte [rax], T_char
  2019 00001AB0 885801                          mov byte [rax + 1], bl
  2020                                          LEAVE
    38 00001AB3 C9                  <1>  leave
  2021 00001AB4 C22000                          ret AND_KILL_FRAME(2)
  2022                                  
  2023                                  L_code_ptr_vector_ref:
  2024                                          ENTER
    33 00001AB7 C8000000            <1>  enter 0, 0
    34 00001ABB 4883E4F0            <1>  and rsp, ~15
  2025 00001ABF 48837D1802                      cmp COUNT, 2
  2026 00001AC4 0F85BF030000                    jne L_error_arg_count_2
  2027 00001ACA 488B7D20                        mov rdi, PARAM(0)
  2028                                          assert_vector(rdi)
    42 00001ACE 803F22              <1>  cmp byte [%1], %2
    43 00001AD1 0F8551040000        <1>  jne L_error_incorrect_type
  2029 00001AD7 488B7528                        mov rsi, PARAM(1)
  2030                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001ADB 803E11              <2>  cmp byte [%1], %2
    43 00001ADE 0F8544040000        <2>  jne L_error_incorrect_type
    48 00001AE4 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001AE9 0F8539040000        <1>  jne L_error_incorrect_type
  2031 00001AEF 488B5701                        mov rdx, qword [rdi + 1]
  2032 00001AF3 488B4E01                        mov rcx, qword [rsi + 1]
  2033 00001AF7 4839D1                          cmp rcx, rdx
  2034 00001AFA 0F8DEE020000                    jge L_error_integer_range
  2035 00001B00 4883F900                        cmp rcx, 0
  2036 00001B04 0F8CE4020000                    jl L_error_integer_range
  2037 00001B0A 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
  2038                                          LEAVE
    38 00001B0F C9                  <1>  leave
  2039 00001B10 C22000                          ret AND_KILL_FRAME(2)
  2040                                  
  2041                                  L_code_ptr_vector_set:
  2042                                          ENTER
    33 00001B13 C8000000            <1>  enter 0, 0
    34 00001B17 4883E4F0            <1>  and rsp, ~15
  2043 00001B1B 48837D1803                      cmp COUNT, 3
  2044 00001B20 0F85CD030000                    jne L_error_arg_count_3
  2045 00001B26 488B7D20                        mov rdi, PARAM(0)
  2046                                          assert_vector(rdi)
    42 00001B2A 803F22              <1>  cmp byte [%1], %2
    43 00001B2D 0F85F5030000        <1>  jne L_error_incorrect_type
  2047 00001B33 488B7528                        mov rsi, PARAM(1)
  2048                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001B37 803E11              <2>  cmp byte [%1], %2
    43 00001B3A 0F85E8030000        <2>  jne L_error_incorrect_type
    48 00001B40 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001B45 0F85DD030000        <1>  jne L_error_incorrect_type
  2049 00001B4B 488B5701                        mov rdx, qword [rdi + 1]
  2050 00001B4F 488B4E01                        mov rcx, qword [rsi + 1]
  2051 00001B53 4839D1                          cmp rcx, rdx
  2052 00001B56 0F8D92020000                    jge L_error_integer_range
  2053 00001B5C 4883F900                        cmp rcx, 0
  2054 00001B60 0F8C88020000                    jl L_error_integer_range
  2055 00001B66 488B4530                        mov rax, PARAM(2)
  2056 00001B6A 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
  2057 00001B6F 48B8-                           mov rax, sob_void
  2057 00001B71 [0000000000000000] 
  2058                                          LEAVE
    38 00001B79 C9                  <1>  leave
  2059 00001B7A C22800                          ret AND_KILL_FRAME(3)
  2060                                  
  2061                                  L_code_ptr_string_set:
  2062                                          ENTER
    33 00001B7D C8000000            <1>  enter 0, 0
    34 00001B81 4883E4F0            <1>  and rsp, ~15
  2063 00001B85 48837D1803                      cmp COUNT, 3
  2064 00001B8A 0F8563030000                    jne L_error_arg_count_3
  2065 00001B90 488B7D20                        mov rdi, PARAM(0)
  2066                                          assert_string(rdi)
    42 00001B94 803F03              <1>  cmp byte [%1], %2
    43 00001B97 0F858B030000        <1>  jne L_error_incorrect_type
  2067 00001B9D 488B7528                        mov rsi, PARAM(1)
  2068                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001BA1 803E11              <2>  cmp byte [%1], %2
    43 00001BA4 0F857E030000        <2>  jne L_error_incorrect_type
    48 00001BAA 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001BAF 0F8573030000        <1>  jne L_error_incorrect_type
  2069 00001BB5 488B5701                        mov rdx, qword [rdi + 1]
  2070 00001BB9 488B4E01                        mov rcx, qword [rsi + 1]
  2071 00001BBD 4839D1                          cmp rcx, rdx
  2072 00001BC0 0F8D28020000                    jge L_error_integer_range
  2073 00001BC6 4883F900                        cmp rcx, 0
  2074 00001BCA 0F8C1E020000                    jl L_error_integer_range
  2075 00001BD0 488B4530                        mov rax, PARAM(2)
  2076                                          assert_char(rax)
    42 00001BD4 803802              <1>  cmp byte [%1], %2
    43 00001BD7 0F854B030000        <1>  jne L_error_incorrect_type
  2077 00001BDD 8A4001                          mov al, byte [rax + 1]
  2078 00001BE0 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
  2079 00001BE4 48B8-                           mov rax, sob_void
  2079 00001BE6 [0000000000000000] 
  2080                                          LEAVE
    38 00001BEE C9                  <1>  leave
  2081 00001BEF C22800                          ret AND_KILL_FRAME(3)
  2082                                  
  2083                                  L_code_ptr_make_vector:
  2084                                          ENTER
    33 00001BF2 C8000000            <1>  enter 0, 0
    34 00001BF6 4883E4F0            <1>  and rsp, ~15
  2085 00001BFA 48837D1802                      cmp COUNT, 2
  2086 00001BFF 0F8584020000                    jne L_error_arg_count_2
  2087 00001C05 488B4D20                        mov rcx, PARAM(0)
  2088                                          assert_integer(rcx)
    47                              <1>  assert_rational(%1)
    42 00001C09 803911              <2>  cmp byte [%1], %2
    43 00001C0C 0F8516030000        <2>  jne L_error_incorrect_type
    48 00001C12 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001C17 0F850B030000        <1>  jne L_error_incorrect_type
  2089 00001C1D 488B4901                        mov rcx, qword [rcx + 1]
  2090 00001C21 4883F900                        cmp rcx, 0
  2091 00001C25 0F8CC3010000                    jl L_error_integer_range
  2092 00001C2B 488B5528                        mov rdx, PARAM(1)
  2093 00001C2F 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
  2094 00001C37 E8A7EBFFFF                      call malloc
  2095 00001C3C C60022                          mov byte [rax], T_vector
  2096 00001C3F 48894801                        mov qword [rax + 1], rcx
  2097 00001C43 41B800000000                    mov r8, 0
  2098                                  .L0:
  2099 00001C49 4939C8                          cmp r8, rcx
  2100 00001C4C 740A                            je .L1
  2101 00001C4E 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
  2102 00001C53 49FFC0                          inc r8
  2103 00001C56 EBF1                            jmp .L0
  2104                                  .L1:
  2105                                          LEAVE
    38 00001C58 C9                  <1>  leave
  2106 00001C59 C22000                          ret AND_KILL_FRAME(2)
  2107                                          
  2108                                  L_code_ptr_make_string:
  2109                                          ENTER
    33 00001C5C C8000000            <1>  enter 0, 0
    34 00001C60 4883E4F0            <1>  and rsp, ~15
  2110 00001C64 48837D1802                      cmp COUNT, 2
  2111 00001C69 0F851A020000                    jne L_error_arg_count_2
  2112 00001C6F 488B4D20                        mov rcx, PARAM(0)
  2113                                          assert_integer(rcx)
    47                              <1>  assert_rational(%1)
    42 00001C73 803911              <2>  cmp byte [%1], %2
    43 00001C76 0F85AC020000        <2>  jne L_error_incorrect_type
    48 00001C7C 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001C81 0F85A1020000        <1>  jne L_error_incorrect_type
  2114 00001C87 488B4901                        mov rcx, qword [rcx + 1]
  2115 00001C8B 4883F900                        cmp rcx, 0
  2116 00001C8F 0F8C59010000                    jl L_error_integer_range
  2117 00001C95 488B5528                        mov rdx, PARAM(1)
  2118                                          assert_char(rdx)
    42 00001C99 803A02              <1>  cmp byte [%1], %2
    43 00001C9C 0F8586020000        <1>  jne L_error_incorrect_type
  2119 00001CA2 8A5201                          mov dl, byte [rdx + 1]
  2120 00001CA5 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
  2121 00001CA9 E835EBFFFF                      call malloc
  2122 00001CAE C60003                          mov byte [rax], T_string
  2123 00001CB1 48894801                        mov qword [rax + 1], rcx
  2124 00001CB5 41B800000000                    mov r8, 0
  2125                                  .L0:
  2126 00001CBB 4939C8                          cmp r8, rcx
  2127 00001CBE 740A                            je .L1
  2128 00001CC0 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
  2129 00001CC5 49FFC0                          inc r8
  2130 00001CC8 EBF1                            jmp .L0
  2131                                  .L1:
  2132                                          LEAVE
    38 00001CCA C9                  <1>  leave
  2133 00001CCB C22000                          ret AND_KILL_FRAME(2)
  2134                                  
  2135                                  L_code_ptr_numerator:
  2136                                          ENTER
    33 00001CCE C8000000            <1>  enter 0, 0
    34 00001CD2 4883E4F0            <1>  and rsp, ~15
  2137 00001CD6 48837D1801                      cmp COUNT, 1
  2138 00001CDB 0F8573010000                    jne L_error_arg_count_1
  2139 00001CE1 488B4520                        mov rax, PARAM(0)
  2140                                          assert_rational(rax)
    42 00001CE5 803811              <1>  cmp byte [%1], %2
    43 00001CE8 0F853A020000        <1>  jne L_error_incorrect_type
  2141 00001CEE 488B7801                        mov rdi, qword [rax + 1]
  2142 00001CF2 E8D1000000                      call make_integer
  2143                                          LEAVE
    38 00001CF7 C9                  <1>  leave
  2144 00001CF8 C21800                          ret AND_KILL_FRAME(1)
  2145                                          
  2146                                  L_code_ptr_denominator:
  2147                                          ENTER
    33 00001CFB C8000000            <1>  enter 0, 0
    34 00001CFF 4883E4F0            <1>  and rsp, ~15
  2148 00001D03 48837D1801                      cmp COUNT, 1
  2149 00001D08 0F8546010000                    jne L_error_arg_count_1
  2150 00001D0E 488B4520                        mov rax, PARAM(0)
  2151                                          assert_rational(rax)
    42 00001D12 803811              <1>  cmp byte [%1], %2
    43 00001D15 0F850D020000        <1>  jne L_error_incorrect_type
  2152 00001D1B 488B7809                        mov rdi, qword [rax + 1 + 8]
  2153 00001D1F E8A4000000                      call make_integer
  2154                                          LEAVE
    38 00001D24 C9                  <1>  leave
  2155 00001D25 C21800                          ret AND_KILL_FRAME(1)
  2156                                  
  2157                                  L_code_ptr_eq:
  2158                                  	ENTER
    33 00001D28 C8000000            <1>  enter 0, 0
    34 00001D2C 4883E4F0            <1>  and rsp, ~15
  2159 00001D30 48837D1802              	cmp COUNT, 2
  2160 00001D35 0F854E010000            	jne L_error_arg_count_2
  2161 00001D3B 488B7D20                	mov rdi, PARAM(0)
  2162 00001D3F 488B7528                	mov rsi, PARAM(1)
  2163 00001D43 4839F7                  	cmp rdi, rsi
  2164 00001D46 744A                    	je .L_eq_true
  2165 00001D48 8A17                    	mov dl, byte [rdi]
  2166 00001D4A 3A16                    	cmp dl, byte [rsi]
  2167 00001D4C 7550                    	jne .L_eq_false
  2168 00001D4E 80FA02                  	cmp dl, T_char
  2169 00001D51 7437                    	je .L_char
  2170 00001D53 80FA04                  	cmp dl, T_symbol
  2171 00001D56 742A                    	je .L_symbol
  2172 00001D58 80FA12                  	cmp dl, T_real
  2173 00001D5B 741D                    	je .L_real
  2174 00001D5D 80FA11                  	cmp dl, T_rational
  2175 00001D60 7402                    	je .L_rational
  2176 00001D62 EB3A                    	jmp .L_eq_false
  2177                                  .L_rational:
  2178 00001D64 488B4601                	mov rax, qword [rsi + 1]
  2179 00001D68 483B4701                	cmp rax, qword [rdi + 1]
  2180 00001D6C 7530                    	jne .L_eq_false
  2181 00001D6E 488B4609                	mov rax, qword [rsi + 1 + 8]
  2182 00001D72 483B4709                	cmp rax, qword [rdi + 1 + 8]
  2183 00001D76 7526                    	jne .L_eq_false
  2184 00001D78 EB18                    	jmp .L_eq_true
  2185                                  .L_real:
  2186 00001D7A 488B4601                	mov rax, qword [rsi + 1]
  2187 00001D7E 483B4701                	cmp rax, qword [rdi + 1]
  2188                                  .L_symbol:
  2189                                  	; never reached, because symbols are static!
  2190                                  	; but I'm keeping it in case, I'll ever change
  2191                                  	; the implementation
  2192 00001D82 488B4601                	mov rax, qword [rsi + 1]
  2193 00001D86 483B4701                	cmp rax, qword [rdi + 1]
  2194                                  .L_char:
  2195 00001D8A 8A5E01                  	mov bl, byte [rsi + 1]
  2196 00001D8D 3A5F01                  	cmp bl, byte [rdi + 1]
  2197 00001D90 750C                    	jne .L_eq_false
  2198                                  .L_eq_true:
  2199 00001D92 48B8-                   	mov rax, sob_boolean_true
  2199 00001D94 [0300000000000000] 
  2200 00001D9C EB0A                    	jmp .L_eq_exit
  2201                                  .L_eq_false:
  2202 00001D9E 48B8-                   	mov rax, sob_boolean_false
  2202 00001DA0 [0200000000000000] 
  2203                                  .L_eq_exit:
  2204                                  	LEAVE
    38 00001DA8 C9                  <1>  leave
  2205 00001DA9 C22000                  	ret AND_KILL_FRAME(2)
  2206                                  
  2207                                  make_real:
  2208                                          ENTER
    33 00001DAC C8000000            <1>  enter 0, 0
    34 00001DB0 4883E4F0            <1>  and rsp, ~15
  2209 00001DB4 BF09000000                      mov rdi, (1 + 8)
  2210 00001DB9 E825EAFFFF                      call malloc
  2211 00001DBE C60012                          mov byte [rax], T_real
  2212 00001DC1 F20F114001                      movsd qword [rax + 1], xmm0
  2213                                          LEAVE
    38 00001DC6 C9                  <1>  leave
  2214 00001DC7 C3                              ret
  2215                                          
  2216                                  make_integer:
  2217                                          ENTER
    33 00001DC8 C8000000            <1>  enter 0, 0
    34 00001DCC 4883E4F0            <1>  and rsp, ~15
  2218 00001DD0 4889FE                          mov rsi, rdi
  2219 00001DD3 BF11000000                      mov rdi, (1 + 8 + 8)
  2220 00001DD8 E806EAFFFF                      call malloc
  2221 00001DDD C60011                          mov byte [rax], T_rational
  2222 00001DE0 48897001                        mov qword [rax + 1], rsi
  2223 00001DE4 48C7400901000000                mov qword [rax + 1 + 8], 1
  2224                                          LEAVE
    38 00001DEC C9                  <1>  leave
  2225 00001DED C3                              ret
  2226                                          
  2227                                  L_error_integer_range:
  2228 00001DEE 488B3C25[00000000]              mov rdi, qword [stderr]
  2229 00001DF6 48BE-                           mov rsi, fmt_integer_range
  2229 00001DF8 [6F03000000000000] 
  2230 00001E00 B800000000                      mov rax, 0
  2231                                  	ENTER
    33 00001E05 C8000000            <1>  enter 0, 0
    34 00001E09 4883E4F0            <1>  and rsp, ~15
  2232 00001E0D E8(00000000)                    call fprintf
  2233                                  	LEAVE
    38 00001E12 C9                  <1>  leave
  2234 00001E13 48C7C0FBFFFFFF                  mov rax, -5
  2235 00001E1A E8(00000000)                    call exit
  2236                                  
  2237                                  L_error_arg_count_0:
  2238 00001E1F 488B3C25[00000000]              mov rdi, qword [stderr]
  2239 00001E27 48BE-                           mov rsi, fmt_arg_count_0
  2239 00001E29 [6D02000000000000] 
  2240 00001E31 488B5518                        mov rdx, COUNT
  2241 00001E35 B800000000                      mov rax, 0
  2242                                  	ENTER
    33 00001E3A C8000000            <1>  enter 0, 0
    34 00001E3E 4883E4F0            <1>  and rsp, ~15
  2243 00001E42 E8(00000000)                    call fprintf
  2244                                  	LEAVE
    38 00001E47 C9                  <1>  leave
  2245 00001E48 48C7C0FDFFFFFF                  mov rax, -3
  2246 00001E4F E8(00000000)                    call exit
  2247                                  
  2248                                  L_error_arg_count_1:
  2249 00001E54 488B3C25[00000000]              mov rdi, qword [stderr]
  2250 00001E5C 48BE-                           mov rsi, fmt_arg_count_1
  2250 00001E5E [9502000000000000] 
  2251 00001E66 488B5518                        mov rdx, COUNT
  2252 00001E6A B800000000                      mov rax, 0
  2253                                  	ENTER
    33 00001E6F C8000000            <1>  enter 0, 0
    34 00001E73 4883E4F0            <1>  and rsp, ~15
  2254 00001E77 E8(00000000)                    call fprintf
  2255                                  	LEAVE
    38 00001E7C C9                  <1>  leave
  2256 00001E7D 48C7C0FDFFFFFF                  mov rax, -3
  2257 00001E84 E8(00000000)                    call exit
  2258                                  
  2259                                  L_error_arg_count_2:
  2260 00001E89 488B3C25[00000000]              mov rdi, qword [stderr]
  2261 00001E91 48BE-                           mov rsi, fmt_arg_count_2
  2261 00001E93 [FB02000000000000] 
  2262 00001E9B 488B5518                        mov rdx, COUNT
  2263 00001E9F B800000000                      mov rax, 0
  2264                                  	ENTER
    33 00001EA4 C8000000            <1>  enter 0, 0
    34 00001EA8 4883E4F0            <1>  and rsp, ~15
  2265 00001EAC E8(00000000)                    call fprintf
  2266                                  	LEAVE
    38 00001EB1 C9                  <1>  leave
  2267 00001EB2 48C7C0FDFFFFFF                  mov rax, -3
  2268 00001EB9 E8(00000000)                    call exit
  2269                                  
  2270                                  L_error_arg_count_12:
  2271 00001EBE 488B3C25[00000000]              mov rdi, qword [stderr]
  2272 00001EC6 48BE-                           mov rsi, fmt_arg_count_12
  2272 00001EC8 [BB02000000000000] 
  2273 00001ED0 488B5518                        mov rdx, COUNT
  2274 00001ED4 B800000000                      mov rax, 0
  2275                                  	ENTER
    33 00001ED9 C8000000            <1>  enter 0, 0
    34 00001EDD 4883E4F0            <1>  and rsp, ~15
  2276 00001EE1 E8(00000000)                    call fprintf
  2277                                  	LEAVE
    38 00001EE6 C9                  <1>  leave
  2278 00001EE7 48C7C0FDFFFFFF                  mov rax, -3
  2279 00001EEE E8(00000000)                    call exit
  2280                                  
  2281                                  L_error_arg_count_3:
  2282 00001EF3 488B3C25[00000000]              mov rdi, qword [stderr]
  2283 00001EFB 48BE-                           mov rsi, fmt_arg_count_3
  2283 00001EFD [2203000000000000] 
  2284 00001F05 488B5518                        mov rdx, COUNT
  2285 00001F09 B800000000                      mov rax, 0
  2286                                  	ENTER
    33 00001F0E C8000000            <1>  enter 0, 0
    34 00001F12 4883E4F0            <1>  and rsp, ~15
  2287 00001F16 E8(00000000)                    call fprintf
  2288                                  	LEAVE
    38 00001F1B C9                  <1>  leave
  2289 00001F1C 48C7C0FDFFFFFF                  mov rax, -3
  2290 00001F23 E8(00000000)                    call exit
  2291                                          
  2292                                  L_error_incorrect_type:
  2293 00001F28 488B3C25[00000000]              mov rdi, qword [stderr]
  2294 00001F30 48BE-                           mov rsi, fmt_type
  2294 00001F32 [4B03000000000000] 
  2295 00001F3A B800000000                      mov rax, 0
  2296                                  	ENTER
    33 00001F3F C8000000            <1>  enter 0, 0
    34 00001F43 4883E4F0            <1>  and rsp, ~15
  2297 00001F47 E8(00000000)                    call fprintf
  2298                                  	LEAVE
    38 00001F4C C9                  <1>  leave
  2299 00001F4D 48C7C0FCFFFFFF                  mov rax, -4
  2300 00001F54 E8(00000000)                    call exit
  2301                                  
  2302                                  L_error_division_by_zero:
  2303 00001F59 488B3C25[00000000]              mov rdi, qword [stderr]
  2304 00001F61 48BE-                           mov rsi, fmt_division_by_zero
  2304 00001F63 [8C03000000000000] 
  2305 00001F6B B800000000                      mov rax, 0
  2306                                  	ENTER
    33 00001F70 C8000000            <1>  enter 0, 0
    34 00001F74 4883E4F0            <1>  and rsp, ~15
  2307 00001F78 E8(00000000)                    call fprintf
  2308                                  	LEAVE
    38 00001F7D C9                  <1>  leave
  2309 00001F7E 48C7C0F8FFFFFF                  mov rax, -8
  2310 00001F85 E8(00000000)                    call exit
  2311                                  
  2312                                  section .data
  2313                                  fmt_char:
  2314 0000026A 256300                          db `%c\0`
  2315                                  fmt_arg_count_0:
  2316 0000026D 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
  2316 00000276 74696E67207A65726F-
  2316 0000027F 20617267756D656E74-
  2316 00000288 732E20466F756E6420-
  2316 00000291 25640A00           
  2317                                  fmt_arg_count_1:
  2318 00000295 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
  2318 0000029E 74696E67206F6E6520-
  2318 000002A7 617267756D656E742E-
  2318 000002B0 20466F756E64202564-
  2318 000002B9 0A00               
  2319                                  fmt_arg_count_12:
  2320 000002BB 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
  2320 000002C4 74696E67206F6E6520-
  2320 000002CD 726571756972656420-
  2320 000002D6 616E64206F6E65206F-
  2320 000002DF 7074696F6E616C2061-
  2320 000002E8 7267756D656E742E20-
  2320 000002F1 466F756E642025640A-
  2320 000002FA 00                 
  2321                                  fmt_arg_count_2:
  2322 000002FB 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
  2322 00000304 74696E672074776F20-
  2322 0000030D 617267756D656E7473-
  2322 00000316 2E20466F756E642025-
  2322 0000031F 640A00             
  2323                                  fmt_arg_count_3:
  2324 00000322 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
  2324 0000032B 74696E672074687265-
  2324 00000334 6520617267756D656E-
  2324 0000033D 74732E20466F756E64-
  2324 00000346 2025640A00         
  2325                                  fmt_type:
  2326 0000034B 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
  2326 00000354 696F6E207061737365-
  2326 0000035D 6420696E636F727265-
  2326 00000366 637420747970650A00 
  2327                                  fmt_integer_range:
  2328 0000036F 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
  2328 00000378 7265637420696E7465-
  2328 00000381 6765722072616E6765-
  2328 0000038A 0A00               
  2329                                  fmt_division_by_zero:
  2330 0000038C 212121204469766973-             db `!!! Division by zero\n\0`
  2330 00000395 696F6E206279207A65-
  2330 0000039E 726F0A00           
  2331                                  fmt_scheme_error_part_1:
  2332 000003A2 0A2121212054686520-             db `\n!!! The procedure \0`
  2332 000003AB 70726F636564757265-
  2332 000003B4 2000               
  2333                                  fmt_scheme_error_part_2:
  2334 000003B6 2061736B656420746F-             db ` asked to terminate the program\n`
  2334 000003BF 207465726D696E6174-
  2334 000003C8 65207468652070726F-
  2334 000003D1 6772616D0A         
  2335 000003D6 202020207769746820-             db `    with the following message:\n\n\0`
  2335 000003DF 74686520666F6C6C6F-
  2335 000003E8 77696E67206D657373-
  2335 000003F1 6167653A0A0A00     
  2336                                  fmt_scheme_error_part_3:
  2337 000003F8 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
  2337 00000401 210A0A00           
