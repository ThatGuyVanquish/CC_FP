     1                                  %define T_void 				0
     2                                  %define T_nil 				1
     3                                  %define T_char 				2
     4                                  %define T_string 			3
     5                                  %define T_symbol 			4
     6                                  %define T_closure 			5
     7                                  %define T_boolean 			8
     8                                  %define T_boolean_false 		(T_boolean | 1)
     9                                  %define T_boolean_true 			(T_boolean | 2)
    10                                  %define T_number 			16
    11                                  %define T_rational 			(T_number | 1)
    12                                  %define T_real 				(T_number | 2)
    13                                  %define T_collection 			32
    14                                  %define T_pair 				(T_collection | 1)
    15                                  %define T_vector 			(T_collection | 2)
    16                                  
    17                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    18                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    19                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    20                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    21                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    22                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    23                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    24                                  
    25                                  %define OLD_RDP 			qword [rbp]
    26                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    27                                  %define ENV 				qword [rbp + 8 * 2]
    28                                  %define COUNT 				qword [rbp + 8 * 3]
    29                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    30                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    31                                  
    32                                  %macro ENTER 0
    33                                  	enter 0, 0
    34                                  	and rsp, ~15
    35                                  %endmacro
    36                                  
    37                                  %macro LEAVE 0
    38                                  	leave
    39                                  %endmacro
    40                                  
    41                                  %macro assert_type 2
    42                                          cmp byte [%1], %2
    43                                          jne L_error_incorrect_type
    44                                  %endmacro
    45                                  
    46                                  %macro assert_type_integer 1
    47                                          assert_rational(%1)
    48                                          cmp qword [%1 + 1 + 8], 1
    49                                          jne L_error_incorrect_type
    50                                  %endmacro
    51                                  
    52                                  %define assert_void(reg)		assert_type reg, T_void
    53                                  %define assert_nil(reg)			assert_type reg, T_nil
    54                                  %define assert_char(reg)		assert_type reg, T_char
    55                                  %define assert_string(reg)		assert_type reg, T_string
    56                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    57                                  %define assert_closure(reg)		assert_type reg, T_closure
    58                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    59                                  %define assert_rational(reg)		assert_type reg, T_rational
    60                                  %define assert_integer(reg)		assert_type_integer reg
    61                                  %define assert_real(reg)		assert_type reg, T_real
    62                                  %define assert_pair(reg)		assert_type reg, T_pair
    63                                  %define assert_vector(reg)		assert_type reg, T_vector
    64                                  
    65                                  %define sob_void			(L_constants + 0)
    66                                  %define sob_nil				(L_constants + 1)
    67                                  %define sob_boolean_false		(L_constants + 2)
    68                                  %define sob_boolean_true		(L_constants + 3)
    69                                  %define sob_char_nul			(L_constants + 4)
    70                                  
    71                                  %define bytes(n)			(n)
    72                                  %define kbytes(n) 			(bytes(n) << 10)
    73                                  %define mbytes(n) 			(kbytes(n) << 10)
    74                                  %define gbytes(n) 			(mbytes(n) << 10)
    75                                  
    76                                  section .data
    77                                  L_constants:
    78 00000000 00                      	db T_void
    79 00000001 01                      	db T_nil
    80 00000002 09                      	db T_boolean_false
    81 00000003 0A                      	db T_boolean_true
    82 00000004 0200                    	db T_char, 0x00	; #\x0
    83 00000006 11                      	db T_rational	; 2
    84 00000007 020000000000000001-     	dq 2, 1
    84 00000010 00000000000000     
    85 00000017 11                      	db T_rational	; 1
    86 00000018 010000000000000001-     	dq 1, 1
    86 00000021 00000000000000     
    87                                  
    88                                  section .bss
    89                                  free_var_0:	; location of null?
    90 00000000 ????????????????        	resq 1
    91                                  free_var_1:	; location of pair?
    92 00000008 ????????????????        	resq 1
    93                                  free_var_2:	; location of void?
    94 00000010 ????????????????        	resq 1
    95                                  free_var_3:	; location of char?
    96 00000018 ????????????????        	resq 1
    97                                  free_var_4:	; location of string?
    98 00000020 ????????????????        	resq 1
    99                                  free_var_5:	; location of symbol?
   100 00000028 ????????????????        	resq 1
   101                                  free_var_6:	; location of vector?
   102 00000030 ????????????????        	resq 1
   103                                  free_var_7:	; location of procedure?
   104 00000038 ????????????????        	resq 1
   105                                  free_var_8:	; location of real?
   106 00000040 ????????????????        	resq 1
   107                                  free_var_9:	; location of rational?
   108 00000048 ????????????????        	resq 1
   109                                  free_var_10:	; location of boolean?
   110 00000050 ????????????????        	resq 1
   111                                  free_var_11:	; location of number?
   112 00000058 ????????????????        	resq 1
   113                                  free_var_12:	; location of collection?
   114 00000060 ????????????????        	resq 1
   115                                  free_var_13:	; location of cons
   116 00000068 ????????????????        	resq 1
   117                                  free_var_14:	; location of display-sexpr
   118 00000070 ????????????????        	resq 1
   119                                  free_var_15:	; location of write-char
   120 00000078 ????????????????        	resq 1
   121                                  free_var_16:	; location of car
   122 00000080 ????????????????        	resq 1
   123                                  free_var_17:	; location of cdr
   124 00000088 ????????????????        	resq 1
   125                                  free_var_18:	; location of string-length
   126 00000090 ????????????????        	resq 1
   127                                  free_var_19:	; location of vector-length
   128 00000098 ????????????????        	resq 1
   129                                  free_var_20:	; location of real->integer
   130 000000A0 ????????????????        	resq 1
   131                                  free_var_21:	; location of exit
   132 000000A8 ????????????????        	resq 1
   133                                  free_var_22:	; location of integer->real
   134 000000B0 ????????????????        	resq 1
   135                                  free_var_23:	; location of rational->real
   136 000000B8 ????????????????        	resq 1
   137                                  free_var_24:	; location of char->integer
   138 000000C0 ????????????????        	resq 1
   139                                  free_var_25:	; location of integer->char
   140 000000C8 ????????????????        	resq 1
   141                                  free_var_26:	; location of trng
   142 000000D0 ????????????????        	resq 1
   143                                  free_var_27:	; location of zero?
   144 000000D8 ????????????????        	resq 1
   145                                  free_var_28:	; location of integer?
   146 000000E0 ????????????????        	resq 1
   147                                  free_var_29:	; location of __bin-apply
   148 000000E8 ????????????????        	resq 1
   149                                  free_var_30:	; location of __bin-add-rr
   150 000000F0 ????????????????        	resq 1
   151                                  free_var_31:	; location of __bin-sub-rr
   152 000000F8 ????????????????        	resq 1
   153                                  free_var_32:	; location of __bin-mul-rr
   154 00000100 ????????????????        	resq 1
   155                                  free_var_33:	; location of __bin-div-rr
   156 00000108 ????????????????        	resq 1
   157                                  free_var_34:	; location of __bin-add-qq
   158 00000110 ????????????????        	resq 1
   159                                  free_var_35:	; location of __bin-sub-qq
   160 00000118 ????????????????        	resq 1
   161                                  free_var_36:	; location of __bin-mul-qq
   162 00000120 ????????????????        	resq 1
   163                                  free_var_37:	; location of __bin-div-qq
   164 00000128 ????????????????        	resq 1
   165                                  free_var_38:	; location of error
   166 00000130 ????????????????        	resq 1
   167                                  free_var_39:	; location of __bin-less-than-rr
   168 00000138 ????????????????        	resq 1
   169                                  free_var_40:	; location of __bin-less-than-qq
   170 00000140 ????????????????        	resq 1
   171                                  free_var_41:	; location of __bin-equal-rr
   172 00000148 ????????????????        	resq 1
   173                                  free_var_42:	; location of __bin-equal-qq
   174 00000150 ????????????????        	resq 1
   175                                  free_var_43:	; location of quotient
   176 00000158 ????????????????        	resq 1
   177                                  free_var_44:	; location of remainder
   178 00000160 ????????????????        	resq 1
   179                                  free_var_45:	; location of set-car!
   180 00000168 ????????????????        	resq 1
   181                                  free_var_46:	; location of set-cdr!
   182 00000170 ????????????????        	resq 1
   183                                  free_var_47:	; location of string-ref
   184 00000178 ????????????????        	resq 1
   185                                  free_var_48:	; location of vector-ref
   186 00000180 ????????????????        	resq 1
   187                                  free_var_49:	; location of vector-set!
   188 00000188 ????????????????        	resq 1
   189                                  free_var_50:	; location of string-set!
   190 00000190 ????????????????        	resq 1
   191                                  free_var_51:	; location of make-vector
   192 00000198 ????????????????        	resq 1
   193                                  free_var_52:	; location of make-string
   194 000001A0 ????????????????        	resq 1
   195                                  free_var_53:	; location of numerator
   196 000001A8 ????????????????        	resq 1
   197                                  free_var_54:	; location of denominator
   198 000001B0 ????????????????        	resq 1
   199                                  free_var_55:	; location of eq?
   200 000001B8 ????????????????        	resq 1
   201                                  
   202                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar
   203                                  global main
   204                                  section .text
   205                                  main:
   206 00000000 C8000000                        enter 0, 0
   207                                          
   208                                  	; building closure for null?
   209 00000004 48BF-                   	mov rdi, free_var_0
   209 00000006 [0000000000000000] 
   210 0000000E 48BE-                   	mov rsi, L_code_ptr_is_null
   210 00000010 [670D000000000000] 
   211 00000018 E8220D0000              	call bind_primitive
   212                                  
   213                                  	; building closure for pair?
   214 0000001D 48BF-                   	mov rdi, free_var_1
   214 0000001F [0800000000000000] 
   215 00000027 48BE-                   	mov rsi, L_code_ptr_is_pair
   215 00000029 [9D0D000000000000] 
   216 00000031 E8090D0000              	call bind_primitive
   217                                  
   218                                  	; building closure for void?
   219 00000036 48BF-                   	mov rdi, free_var_2
   219 00000038 [1000000000000000] 
   220 00000040 48BE-                   	mov rsi, L_code_ptr_is_void
   220 00000042 [D30D000000000000] 
   221 0000004A E8F00C0000              	call bind_primitive
   222                                  
   223                                  	; building closure for char?
   224 0000004F 48BF-                   	mov rdi, free_var_3
   224 00000051 [1800000000000000] 
   225 00000059 48BE-                   	mov rsi, L_code_ptr_is_char
   225 0000005B [090E000000000000] 
   226 00000063 E8D70C0000              	call bind_primitive
   227                                  
   228                                  	; building closure for string?
   229 00000068 48BF-                   	mov rdi, free_var_4
   229 0000006A [2000000000000000] 
   230 00000072 48BE-                   	mov rsi, L_code_ptr_is_string
   230 00000074 [3F0E000000000000] 
   231 0000007C E8BE0C0000              	call bind_primitive
   232                                  
   233                                  	; building closure for symbol?
   234 00000081 48BF-                   	mov rdi, free_var_5
   234 00000083 [2800000000000000] 
   235 0000008B 48BE-                   	mov rsi, L_code_ptr_is_symbol
   235 0000008D [750E000000000000] 
   236 00000095 E8A50C0000              	call bind_primitive
   237                                  
   238                                  	; building closure for vector?
   239 0000009A 48BF-                   	mov rdi, free_var_6
   239 0000009C [3000000000000000] 
   240 000000A4 48BE-                   	mov rsi, L_code_ptr_is_vector
   240 000000A6 [AB0E000000000000] 
   241 000000AE E88C0C0000              	call bind_primitive
   242                                  
   243                                  	; building closure for procedure?
   244 000000B3 48BF-                   	mov rdi, free_var_7
   244 000000B5 [3800000000000000] 
   245 000000BD 48BE-                   	mov rsi, L_code_ptr_is_closure
   245 000000BF [E10E000000000000] 
   246 000000C7 E8730C0000              	call bind_primitive
   247                                  
   248                                  	; building closure for real?
   249 000000CC 48BF-                   	mov rdi, free_var_8
   249 000000CE [4000000000000000] 
   250 000000D6 48BE-                   	mov rsi, L_code_ptr_is_real
   250 000000D8 [170F000000000000] 
   251 000000E0 E85A0C0000              	call bind_primitive
   252                                  
   253                                  	; building closure for rational?
   254 000000E5 48BF-                   	mov rdi, free_var_9
   254 000000E7 [4800000000000000] 
   255 000000EF 48BE-                   	mov rsi, L_code_ptr_is_rational
   255 000000F1 [4D0F000000000000] 
   256 000000F9 E8410C0000              	call bind_primitive
   257                                  
   258                                  	; building closure for boolean?
   259 000000FE 48BF-                   	mov rdi, free_var_10
   259 00000100 [5000000000000000] 
   260 00000108 48BE-                   	mov rsi, L_code_ptr_is_boolean
   260 0000010A [830F000000000000] 
   261 00000112 E8280C0000              	call bind_primitive
   262                                  
   263                                  	; building closure for number?
   264 00000117 48BF-                   	mov rdi, free_var_11
   264 00000119 [5800000000000000] 
   265 00000121 48BE-                   	mov rsi, L_code_ptr_is_number
   265 00000123 [BB0F000000000000] 
   266 0000012B E80F0C0000              	call bind_primitive
   267                                  
   268                                  	; building closure for collection?
   269 00000130 48BF-                   	mov rdi, free_var_12
   269 00000132 [6000000000000000] 
   270 0000013A 48BE-                   	mov rsi, L_code_ptr_is_collection
   270 0000013C [F30F000000000000] 
   271 00000144 E8F60B0000              	call bind_primitive
   272                                  
   273                                  	; building closure for cons
   274 00000149 48BF-                   	mov rdi, free_var_13
   274 0000014B [6800000000000000] 
   275 00000153 48BE-                   	mov rsi, L_code_ptr_cons
   275 00000155 [2B10000000000000] 
   276 0000015D E8DD0B0000              	call bind_primitive
   277                                  
   278                                  	; building closure for display-sexpr
   279 00000162 48BF-                   	mov rdi, free_var_14
   279 00000164 [7000000000000000] 
   280 0000016C 48BE-                   	mov rsi, L_code_ptr_display_sexpr
   280 0000016E [5F10000000000000] 
   281 00000176 E8C40B0000              	call bind_primitive
   282                                  
   283                                  	; building closure for write-char
   284 0000017B 48BF-                   	mov rdi, free_var_15
   284 0000017D [7800000000000000] 
   285 00000185 48BE-                   	mov rsi, L_code_ptr_write_char
   285 00000187 [8910000000000000] 
   286 0000018F E8AB0B0000              	call bind_primitive
   287                                  
   288                                  	; building closure for car
   289 00000194 48BF-                   	mov rdi, free_var_16
   289 00000196 [8000000000000000] 
   290 0000019E 48BE-                   	mov rsi, L_code_ptr_car
   290 000001A0 [E010000000000000] 
   291 000001A8 E8920B0000              	call bind_primitive
   292                                  
   293                                  	; building closure for cdr
   294 000001AD 48BF-                   	mov rdi, free_var_17
   294 000001AF [8800000000000000] 
   295 000001B7 48BE-                   	mov rsi, L_code_ptr_cdr
   295 000001B9 [0811000000000000] 
   296 000001C1 E8790B0000              	call bind_primitive
   297                                  
   298                                  	; building closure for string-length
   299 000001C6 48BF-                   	mov rdi, free_var_18
   299 000001C8 [9000000000000000] 
   300 000001D0 48BE-                   	mov rsi, L_code_ptr_string_length
   300 000001D2 [3011000000000000] 
   301 000001DA E8600B0000              	call bind_primitive
   302                                  
   303                                  	; building closure for vector-length
   304 000001DF 48BF-                   	mov rdi, free_var_19
   304 000001E1 [9800000000000000] 
   305 000001E9 48BE-                   	mov rsi, L_code_ptr_vector_length
   305 000001EB [5D11000000000000] 
   306 000001F3 E8470B0000              	call bind_primitive
   307                                  
   308                                  	; building closure for real->integer
   309 000001F8 48BF-                   	mov rdi, free_var_20
   309 000001FA [A000000000000000] 
   310 00000202 48BE-                   	mov rsi, L_code_ptr_real_to_integer
   310 00000204 [8A11000000000000] 
   311 0000020C E82E0B0000              	call bind_primitive
   312                                  
   313                                  	; building closure for exit
   314 00000211 48BF-                   	mov rdi, free_var_21
   314 00000213 [A800000000000000] 
   315 0000021B 48BE-                   	mov rsi, L_code_ptr_exit
   315 0000021D [BD11000000000000] 
   316 00000225 E8150B0000              	call bind_primitive
   317                                  
   318                                  	; building closure for integer->real
   319 0000022A 48BF-                   	mov rdi, free_var_22
   319 0000022C [B000000000000000] 
   320 00000234 48BE-                   	mov rsi, L_code_ptr_integer_to_real
   320 00000236 [DA11000000000000] 
   321 0000023E E8FC0A0000              	call bind_primitive
   322                                  
   323                                  	; building closure for rational->real
   324 00000243 48BF-                   	mov rdi, free_var_23
   324 00000245 [B800000000000000] 
   325 0000024D 48BE-                   	mov rsi, L_code_ptr_rational_to_real
   325 0000024F [1712000000000000] 
   326 00000257 E8E30A0000              	call bind_primitive
   327                                  
   328                                  	; building closure for char->integer
   329 0000025C 48BF-                   	mov rdi, free_var_24
   329 0000025E [C000000000000000] 
   330 00000266 48BE-                   	mov rsi, L_code_ptr_char_to_integer
   330 00000268 [5612000000000000] 
   331 00000270 E8CA0A0000              	call bind_primitive
   332                                  
   333                                  	; building closure for integer->char
   334 00000275 48BF-                   	mov rdi, free_var_25
   334 00000277 [C800000000000000] 
   335 0000027F 48BE-                   	mov rsi, L_code_ptr_integer_to_char
   335 00000281 [8B12000000000000] 
   336 00000289 E8B10A0000              	call bind_primitive
   337                                  
   338                                  	; building closure for trng
   339 0000028E 48BF-                   	mov rdi, free_var_26
   339 00000290 [D000000000000000] 
   340 00000298 48BE-                   	mov rsi, L_code_ptr_trng
   340 0000029A [E512000000000000] 
   341 000002A2 E8980A0000              	call bind_primitive
   342                                  
   343                                  	; building closure for zero?
   344 000002A7 48BF-                   	mov rdi, free_var_27
   344 000002A9 [D800000000000000] 
   345 000002B1 48BE-                   	mov rsi, L_code_ptr_is_zero
   345 000002B3 [0813000000000000] 
   346 000002BB E87F0A0000              	call bind_primitive
   347                                  
   348                                  	; building closure for integer?
   349 000002C0 48BF-                   	mov rdi, free_var_28
   349 000002C2 [E000000000000000] 
   350 000002CA 48BE-                   	mov rsi, L_code_ptr_is_integer
   350 000002CC [6313000000000000] 
   351 000002D4 E8660A0000              	call bind_primitive
   352                                  
   353                                  	; building closure for __bin-apply
   354 000002D9 48BF-                   	mov rdi, free_var_29
   354 000002DB [E800000000000000] 
   355 000002E3 48BE-                   	mov rsi, L_code_ptr_bin_apply
   355 000002E5 [670D000000000000] 
   356 000002ED E84D0A0000              	call bind_primitive
   357                                  
   358                                  	; building closure for __bin-add-rr
   359 000002F2 48BF-                   	mov rdi, free_var_30
   359 000002F4 [F000000000000000] 
   360 000002FC 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_rr
   360 000002FE [A013000000000000] 
   361 00000306 E8340A0000              	call bind_primitive
   362                                  
   363                                  	; building closure for __bin-sub-rr
   364 0000030B 48BF-                   	mov rdi, free_var_31
   364 0000030D [F800000000000000] 
   365 00000315 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_rr
   365 00000317 [E413000000000000] 
   366 0000031F E81B0A0000              	call bind_primitive
   367                                  
   368                                  	; building closure for __bin-mul-rr
   369 00000324 48BF-                   	mov rdi, free_var_32
   369 00000326 [0001000000000000] 
   370 0000032E 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_rr
   370 00000330 [2814000000000000] 
   371 00000338 E8020A0000              	call bind_primitive
   372                                  
   373                                  	; building closure for __bin-div-rr
   374 0000033D 48BF-                   	mov rdi, free_var_33
   374 0000033F [0801000000000000] 
   375 00000347 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_rr
   375 00000349 [6C14000000000000] 
   376 00000351 E8E9090000              	call bind_primitive
   377                                  
   378                                  	; building closure for __bin-add-qq
   379 00000356 48BF-                   	mov rdi, free_var_34
   379 00000358 [1001000000000000] 
   380 00000360 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_qq
   380 00000362 [BE14000000000000] 
   381 0000036A E8D0090000              	call bind_primitive
   382                                  
   383                                  	; building closure for __bin-sub-qq
   384 0000036F 48BF-                   	mov rdi, free_var_35
   384 00000371 [1801000000000000] 
   385 00000379 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_qq
   385 0000037B [2615000000000000] 
   386 00000383 E8B7090000              	call bind_primitive
   387                                  
   388                                  	; building closure for __bin-mul-qq
   389 00000388 48BF-                   	mov rdi, free_var_36
   389 0000038A [2001000000000000] 
   390 00000392 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_qq
   390 00000394 [8E15000000000000] 
   391 0000039C E89E090000              	call bind_primitive
   392                                  
   393                                  	; building closure for __bin-div-qq
   394 000003A1 48BF-                   	mov rdi, free_var_37
   394 000003A3 [2801000000000000] 
   395 000003AB 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_qq
   395 000003AD [E615000000000000] 
   396 000003B5 E885090000              	call bind_primitive
   397                                  
   398                                  	; building closure for error
   399 000003BA 48BF-                   	mov rdi, free_var_38
   399 000003BC [3001000000000000] 
   400 000003C4 48BE-                   	mov rsi, L_code_ptr_error
   400 000003C6 [B416000000000000] 
   401 000003CE E86C090000              	call bind_primitive
   402                                  
   403                                  	; building closure for __bin-less-than-rr
   404 000003D3 48BF-                   	mov rdi, free_var_39
   404 000003D5 [3801000000000000] 
   405 000003DD 48BE-                   	mov rsi, L_code_ptr_raw_less_than_rr
   405 000003DF [6B17000000000000] 
   406 000003E7 E853090000              	call bind_primitive
   407                                  
   408                                  	; building closure for __bin-less-than-qq
   409 000003EC 48BF-                   	mov rdi, free_var_40
   409 000003EE [4001000000000000] 
   410 000003F6 48BE-                   	mov rsi, L_code_ptr_raw_less_than_qq
   410 000003F8 [C217000000000000] 
   411 00000400 E83A090000              	call bind_primitive
   412                                  
   413                                  	; building closure for __bin-equal-rr
   414 00000405 48BF-                   	mov rdi, free_var_41
   414 00000407 [4801000000000000] 
   415 0000040F 48BE-                   	mov rsi, L_code_ptr_raw_equal_rr
   415 00000411 [2518000000000000] 
   416 00000419 E821090000              	call bind_primitive
   417                                  
   418                                  	; building closure for __bin-equal-qq
   419 0000041E 48BF-                   	mov rdi, free_var_42
   419 00000420 [5001000000000000] 
   420 00000428 48BE-                   	mov rsi, L_code_ptr_raw_equal_qq
   420 0000042A [7C18000000000000] 
   421 00000432 E808090000              	call bind_primitive
   422                                  
   423                                  	; building closure for quotient
   424 00000437 48BF-                   	mov rdi, free_var_43
   424 00000439 [5801000000000000] 
   425 00000441 48BE-                   	mov rsi, L_code_ptr_quotient
   425 00000443 [DF18000000000000] 
   426 0000044B E8EF080000              	call bind_primitive
   427                                  
   428                                  	; building closure for remainder
   429 00000450 48BF-                   	mov rdi, free_var_44
   429 00000452 [6001000000000000] 
   430 0000045A 48BE-                   	mov rsi, L_code_ptr_remainder
   430 0000045C [4519000000000000] 
   431 00000464 E8D6080000              	call bind_primitive
   432                                  
   433                                  	; building closure for set-car!
   434 00000469 48BF-                   	mov rdi, free_var_45
   434 0000046B [6801000000000000] 
   435 00000473 48BE-                   	mov rsi, L_code_ptr_set_car
   435 00000475 [AB19000000000000] 
   436 0000047D E8BD080000              	call bind_primitive
   437                                  
   438                                  	; building closure for set-cdr!
   439 00000482 48BF-                   	mov rdi, free_var_46
   439 00000484 [7001000000000000] 
   440 0000048C 48BE-                   	mov rsi, L_code_ptr_set_cdr
   440 0000048E [E119000000000000] 
   441 00000496 E8A4080000              	call bind_primitive
   442                                  
   443                                  	; building closure for string-ref
   444 0000049B 48BF-                   	mov rdi, free_var_47
   444 0000049D [7801000000000000] 
   445 000004A5 48BE-                   	mov rsi, L_code_ptr_string_ref
   445 000004A7 [171A000000000000] 
   446 000004AF E88B080000              	call bind_primitive
   447                                  
   448                                  	; building closure for vector-ref
   449 000004B4 48BF-                   	mov rdi, free_var_48
   449 000004B6 [8001000000000000] 
   450 000004BE 48BE-                   	mov rsi, L_code_ptr_vector_ref
   450 000004C0 [821A000000000000] 
   451 000004C8 E872080000              	call bind_primitive
   452                                  
   453                                  	; building closure for vector-set!
   454 000004CD 48BF-                   	mov rdi, free_var_49
   454 000004CF [8801000000000000] 
   455 000004D7 48BE-                   	mov rsi, L_code_ptr_vector_set
   455 000004D9 [DE1A000000000000] 
   456 000004E1 E859080000              	call bind_primitive
   457                                  
   458                                  	; building closure for string-set!
   459 000004E6 48BF-                   	mov rdi, free_var_50
   459 000004E8 [9001000000000000] 
   460 000004F0 48BE-                   	mov rsi, L_code_ptr_string_set
   460 000004F2 [481B000000000000] 
   461 000004FA E840080000              	call bind_primitive
   462                                  
   463                                  	; building closure for make-vector
   464 000004FF 48BF-                   	mov rdi, free_var_51
   464 00000501 [9801000000000000] 
   465 00000509 48BE-                   	mov rsi, L_code_ptr_make_vector
   465 0000050B [BD1B000000000000] 
   466 00000513 E827080000              	call bind_primitive
   467                                  
   468                                  	; building closure for make-string
   469 00000518 48BF-                   	mov rdi, free_var_52
   469 0000051A [A001000000000000] 
   470 00000522 48BE-                   	mov rsi, L_code_ptr_make_string
   470 00000524 [271C000000000000] 
   471 0000052C E80E080000              	call bind_primitive
   472                                  
   473                                  	; building closure for numerator
   474 00000531 48BF-                   	mov rdi, free_var_53
   474 00000533 [A801000000000000] 
   475 0000053B 48BE-                   	mov rsi, L_code_ptr_numerator
   475 0000053D [991C000000000000] 
   476 00000545 E8F5070000              	call bind_primitive
   477                                  
   478                                  	; building closure for denominator
   479 0000054A 48BF-                   	mov rdi, free_var_54
   479 0000054C [B001000000000000] 
   480 00000554 48BE-                   	mov rsi, L_code_ptr_denominator
   480 00000556 [C61C000000000000] 
   481 0000055E E8DC070000              	call bind_primitive
   482                                  
   483                                  	; building closure for eq?
   484 00000563 48BF-                   	mov rdi, free_var_55
   484 00000565 [B801000000000000] 
   485 0000056D 48BE-                   	mov rsi, L_code_ptr_eq
   485 0000056F [F31C000000000000] 
   486 00000577 E8C3070000              	call bind_primitive
   487                                  
   488 0000057C 68[01000000]            	push sob_nil	; hold 8 bytes for magic
   489 00000581 48B8-                   	mov rax, qword L_constants + 6 ;'Moshe was in: ScmConst' sexpr
   489 00000583 [0600000000000000] 
   490 0000058B 50                      	push rax;'Moshe was in: ScmApplic' (proc, args, Non_tail_call)
   491 0000058C 48B8-                   	mov rax, qword L_constants + 23 ;'Moshe was in: ScmConst' sexpr
   491 0000058E [1700000000000000] 
   492 00000596 50                      	push rax;'Moshe was in: ScmApplic' (proc, args, Non_tail_call)
   493 00000597 6A02                    	push 2;'Moshe was in: ScmApplic' (proc, args, Non_tail_call)
   494 00000599 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   495 0000059E E80B020000              	call malloc
   496 000005A3 50                      	push rax
   497 000005A4 BF00000000              	mov rdi, 8 * 0	; new rib
   498 000005A9 E800020000              	call malloc
   499 000005AE 50                      	push rax
   500 000005AF BF08000000              	mov rdi, 8 * 1	; extended env
   501 000005B4 E8F5010000              	call malloc
   502 000005B9 488B7D10                	mov rdi, ENV
   503 000005BD BE00000000              	mov rsi, 0
   504 000005C2 BA01000000              	mov rdx, 1
   505                                  .L_lambda_opt_env_loop_0001:	; ext_env[i + 1] <-- env[i]
   506 000005C7 4883FE01                	cmp rsi, 1
   507 000005CB 7410                    	je .L_lambda_opt_env_end_0001
   508 000005CD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   509 000005D1 48890CD0                	mov qword [rax + 8 * rdx], rcx
   510 000005D5 48FFC6                  	inc rsi
   511 000005D8 48FFC2                  	inc rdx
   512 000005DB EBEA                    	jmp .L_lambda_opt_env_loop_0001
   513                                  .L_lambda_opt_env_end_0001:
   514 000005DD 5B                      	pop rbx
   515 000005DE BE00000000              	mov rsi, 0
   516                                  .L_lambda_opt_params_loop_0001:	; copy params
   517 000005E3 4883FE00                	cmp rsi, 0
   518 000005E7 740E                    	je .L_lambda_opt_params_end_0001
   519 000005E9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   520 000005EE 488914F3                	mov qword [rbx + 8 * rsi], rdx
   521 000005F2 48FFC6                  	inc rsi
   522 000005F5 EBEC                    	jmp .L_lambda_opt_params_loop_0001
   523                                  .L_lambda_opt_params_end_0001:
   524 000005F7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   525 000005FA 4889C3                  	mov rbx, rax
   526 000005FD 58                      	pop rax
   527 000005FE C60005                  	mov byte [rax], T_closure
   528 00000601 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   529 00000605 48C74009[12060000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0001
   530 0000060D E9AE000000              	jmp .L_lambda_opt_end_0001
   531                                  .L_lambda_opt_code_0001:	; lambda-opt body
   532 00000612 48837C241002            	cmp qword [rsp + 8 * 2], 2
   533 00000618 7D0B                    	jge .L_lambda_opt_arity_check_ok_0001
   534 0000061A FF742410                	push qword [rsp + 8 * 2]
   535 0000061E 6A02                    	push 2
   536 00000620 E956010000              	jmp L_error_incorrect_arity_opt
   537                                  .L_lambda_opt_arity_check_ok_0001:
   538 00000625 C8000000                	enter 0, 0
   539 00000629 488B7518                	mov rsi, COUNT	; rsi holds the index of current parameter
   540 0000062D 48FFCE                  	dec rsi
   541 00000630 4C8B4518                	mov r8, COUNT	; r8 holds the amount of parameters left to put in the list
   542 00000634 4983E802                	sub r8, 2
   543 00000638 48BA-                   	mov rdx, sob_nil
   543 0000063A [0100000000000000] 
   544                                  .L_lambda_opt_optional_list_loop_0001:
   545 00000642 4983F800                	cmp r8, 0
   546 00000646 7425                    	je .L_lambda_opt_optional_list_end_0001
   547 00000648 4C8B4CF520              	mov r9, PARAM(rsi)
   548 0000064D BF11000000              	mov rdi, 1 + 8 + 8; store enough memory for a pair struct in rdi to call malloc
   549 00000652 E857010000              	call malloc
   550 00000657 C60021                  	mov byte [rax], T_pair
   551 0000065A 4C894801                	mov SOB_PAIR_CAR(rax), r9
   552 0000065E 48895009                	mov SOB_PAIR_CDR(rax), rdx
   553 00000662 4889C2                  	mov rdx, rax
   554 00000665 48FFCE                  	dec rsi
   555 00000668 49FFC8                  	dec r8
   556 0000066B EBD5                    	jmp .L_lambda_opt_optional_list_loop_0001
   557                                  .L_lambda_opt_optional_list_end_0001:
   558 0000066D 48895530                	mov PARAM(2), rdx
   559 00000671 48837D1803              	cmp COUNT, 3
   560 00000676 7E40                    	jle .L_lambda_opt_wrap_things_up_0001
   561                                  .L_lambda_opt_arity_check_more_0001:
   562                                  			; r8 will hold the amount of values left to push up
   563                                  			; initial value is List.length params' + previously stored values + magic
   564 00000678 41B807000000            	mov r8, 2 + 4 + 1
   565                                  			; r9 will hold a constant offset to store the current value at
   566                                  			; I.E. we'll store [rbp + 8 * r8] at [rbp + 8 * (r8 + r9)]
   567 0000067E 4C8B4D18                	mov r9, COUNT
   568 00000682 4983E903                	sub r9, 3
   569                                  			; calculate initial offset = rbp + 8 * (index - 1) and store at rsi
   570 00000686 4C89C6                  	mov rsi, r8
   571 00000689 48FFCE                  	dec rsi
   572 0000068C 48C1E603                	shl rsi, 3	; 3 left shifts cause (((* 2)* 2)* 2)
   573 00000690 4801EE                  	add rsi, rbp
   574                                  .L_lambda_opt_stack_setup_loop_0001:
   575 00000693 4983F800                	cmp r8, 0
   576 00000697 7410                    	je .L_lambda_opt_stack_setup_end_0001
   577 00000699 488B3E                  	mov rdi, [rsi]	; rdi holds the current value to be moved
   578 0000069C 4A893CCE                	mov [rsi + 8 * r9], rdi
   579 000006A0 49FFC8                  	dec r8
   580 000006A3 4883EE08                	sub rsi, 8
   581 000006A7 EBEA                    	jmp .L_lambda_opt_stack_setup_loop_0001
   582                                  .L_lambda_opt_stack_setup_end_0001:
   583 000006A9 49C1E103                	shl r9, 3	; multiply offset by 8 to get the number of bytes to add to rbp
   584 000006AD 4C01CD                  	add rbp, r9
   585 000006B0 48C7451803000000        	mov COUNT, 3
   586                                  .L_lambda_opt_wrap_things_up_0001:
   587 000006B8 488B4530                	mov rax, qword [rbp + 8 * (4 + 2)] ;'Moshe was in: ScmVarGet' (Var' (v, Param minor))
   588 000006BC C9                      	leave
   589 000006BD C22800                  	ret 8 * (2 + 3)
   590                                  .L_lambda_opt_end_0001:	; new closure is in rax
   591                                  	assert_closure(rax);'Moshe was in: ScmApplic' (proc, args, Non_tail_call)
    42 000006C0 803805              <1>  cmp byte [%1], %2
    43 000006C3 0F852A180000        <1>  jne L_error_incorrect_type
   592 000006C9 FF7001                  	push SOB_CLOSURE_ENV(rax);'Moshe was in: ScmApplic' (proc, args, Non_tail_call)
   593 000006CC FF5009                  	call SOB_CLOSURE_CODE(rax);'Moshe was in: ScmApplic' (proc, args, Non_tail_call)
   594                                  
   595 000006CF 4889C7                  	mov rdi, rax
   596 000006D2 E8E8000000              	call print_sexpr_if_not_void
   597                                  
   598 000006D7 48BF-                           mov rdi, fmt_memory_usage
   598 000006D9 [8700000000000000] 
   599 000006E1 488B3425[0E010000]              mov rsi, qword [top_of_memory]
   600 000006E9 4881EE[C0010000]                sub rsi, memory
   601 000006F0 B800000000                      mov rax, 0
   602                                  	ENTER
    33 000006F5 C8000000            <1>  enter 0, 0
    34 000006F9 4883E4F0            <1>  and rsp, ~15
   603 000006FD E8(00000000)                    call printf
   604                                  	LEAVE
    38 00000702 C9                  <1>  leave
   605 00000703 C9                      	leave
   606 00000704 C3                      	ret
   607                                  
   608                                  L_error_non_closure:
   609 00000705 488B3C25[00000000]              mov rdi, qword [stderr]
   610 0000070D 48BE-                           mov rsi, fmt_non_closure
   610 0000070F [BE00000000000000] 
   611 00000717 B800000000                      mov rax, 0
   612                                  	ENTER
    33 0000071C C8000000            <1>  enter 0, 0
    34 00000720 4883E4F0            <1>  and rsp, ~15
   613 00000724 E8(00000000)                    call fprintf
   614                                  	LEAVE
    38 00000729 C9                  <1>  leave
   615 0000072A 48C7C0FEFFFFFF                  mov rax, -2
   616 00000731 E8(00000000)                    call exit
   617                                  
   618                                  L_error_improper_list:
   619 00000736 488B3C25[00000000]      	mov rdi, qword [stderr]
   620 0000073E 48BE-                   	mov rsi, fmt_error_improper_list
   620 00000740 [E600000000000000] 
   621 00000748 B800000000              	mov rax, 0
   622                                  	ENTER
    33 0000074D C8000000            <1>  enter 0, 0
    34 00000751 4883E4F0            <1>  and rsp, ~15
   623 00000755 E8(00000000)            	call fprintf
   624                                  	LEAVE
    38 0000075A C9                  <1>  leave
   625 0000075B 48C7C0F9FFFFFF          	mov rax, -7
   626 00000762 E8(00000000)            	call exit
   627                                  
   628                                  L_error_incorrect_arity_simple:
   629 00000767 488B3C25[00000000]              mov rdi, qword [stderr]
   630 0000076F 48BE-                           mov rsi, fmt_incorrect_arity_simple
   630 00000771 [2800000000000000] 
   631 00000779 EB12                            jmp L_error_incorrect_arity_common
   632                                  L_error_incorrect_arity_opt:
   633 0000077B 488B3C25[00000000]              mov rdi, qword [stderr]
   634 00000783 48BE-                           mov rsi, fmt_incorrect_arity_opt
   634 00000785 [5300000000000000] 
   635                                  L_error_incorrect_arity_common:
   636 0000078D 5A                              pop rdx
   637 0000078E 59                              pop rcx
   638 0000078F B800000000                      mov rax, 0
   639                                  	ENTER
    33 00000794 C8000000            <1>  enter 0, 0
    34 00000798 4883E4F0            <1>  and rsp, ~15
   640 0000079C E8(00000000)                    call fprintf
   641                                  	LEAVE
    38 000007A1 C9                  <1>  leave
   642 000007A2 48C7C0FAFFFFFF                  mov rax, -6
   643 000007A9 E8(00000000)                    call exit
   644                                  
   645                                  section .data
   646                                  fmt_incorrect_arity_simple:
   647 00000028 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
   647 00000031 74656420256C642061-
   647 0000003A 7267756D656E74732C-
   647 00000043 206275742067697665-
   647 0000004C 6E20256C640A00     
   648                                  fmt_incorrect_arity_opt:
   649 00000053 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
   649 0000005C 746564206174206C65-
   649 00000065 61737420256C642061-
   649 0000006E 7267756D656E74732C-
   649 00000077 206275742067697665-
   649 00000080 6E20256C640A00     
   650                                  fmt_memory_usage:
   651 00000087 0A0A21212120557365-             db `\n\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
   651 00000090 6420256C6420627974-
   651 00000099 6573206F662064796E-
   651 000000A2 616D6963616C6C792D-
   651 000000AB 616C6C6F6361746564-
   651 000000B4 206D656D6F72790A0A-
   651 000000BD 00                 
   652                                  fmt_non_closure:
   653 000000BE 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
   653 000000C7 7074696E6720746F20-
   653 000000D0 6170706C792061206E-
   653 000000D9 6F6E2D636C6F737572-
   653 000000E2 65210A00           
   654                                  fmt_error_improper_list:
   655 000000E6 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
   655 000000EF 7267756D656E742069-
   655 000000F8 73206E6F7420612070-
   655 00000101 726F706572206C6973-
   655 0000010A 74210A00           
   656                                  
   657                                  section .bss
   658                                  memory:
   659 000001C0 <res 40000000h>         	resb gbytes(1)
   660                                  
   661                                  section .data
   662                                  top_of_memory:
   663 0000010E [C001000000000000]              dq memory
   664                                  
   665                                  section .text
   666                                  malloc:
   667 000007AE 488B0425[0E010000]              mov rax, qword [top_of_memory]
   668 000007B6 48013C25[0E010000]              add qword [top_of_memory], rdi
   669 000007BE C3                              ret
   670                                          
   671                                  print_sexpr_if_not_void:
   672 000007BF 4881FF[00000000]        	cmp rdi, sob_void
   673 000007C6 7501                    	jne print_sexpr
   674 000007C8 C3                      	ret
   675                                  
   676                                  section .data
   677                                  fmt_void:
   678 00000116 233C766F69643E00        	db `#<void>\0`
   679                                  fmt_nil:
   680 0000011E 282900                  	db `()\0`
   681                                  fmt_boolean_false:
   682 00000121 236600                  	db `#f\0`
   683                                  fmt_boolean_true:
   684 00000124 237400                  	db `#t\0`
   685                                  fmt_char_backslash:
   686 00000127 235C5C00                	db `#\\\\\0`
   687                                  fmt_char_dquote:
   688 0000012B 235C2200                	db `#\\"\0`
   689                                  fmt_char_simple:
   690 0000012F 235C256300              	db `#\\%c\0`
   691                                  fmt_char_null:
   692 00000134 235C6E756C00            	db `#\\nul\0`
   693                                  fmt_char_bell:
   694 0000013A 235C62656C6C00          	db `#\\bell\0`
   695                                  fmt_char_backspace:
   696 00000141 235C6261636B737061-     	db `#\\backspace\0`
   696 0000014A 636500             
   697                                  fmt_char_tab:
   698 0000014D 235C74616200            	db `#\\tab\0`
   699                                  fmt_char_newline:
   700 00000153 235C6E65776C696E65-     	db `#\\newline\0`
   700 0000015C 00                 
   701                                  fmt_char_formfeed:
   702 0000015D 235C7061676500          	db `#\\page\0`
   703                                  fmt_char_return:
   704 00000164 235C72657475726E00      	db `#\\return\0`
   705                                  fmt_char_escape:
   706 0000016D 235C65736300            	db `#\\esc\0`
   707                                  fmt_char_space:
   708 00000173 235C737061636500        	db `#\\space\0`
   709                                  fmt_char_hex:
   710 0000017B 235C782530325800        	db `#\\x%02X\0`
   711                                  fmt_closure:
   712 00000183 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
   712 0000018C 206174203078253038-
   712 00000195 5820656E763D307825-
   712 0000019E 30385820636F64653D-
   712 000001A7 3078253038583E00   
   713                                  fmt_lparen:
   714 000001AF 2800                    	db `(\0`
   715                                  fmt_dotted_pair:
   716 000001B1 202E2000                	db ` . \0`
   717                                  fmt_rparen:
   718 000001B5 2900                    	db `)\0`
   719                                  fmt_space:
   720 000001B7 2000                    	db ` \0`
   721                                  fmt_empty_vector:
   722 000001B9 23282900                	db `#()\0`
   723                                  fmt_vector:
   724 000001BD 232800                  	db `#(\0`
   725                                  fmt_real:
   726 000001C0 256600                  	db `%f\0`
   727                                  fmt_fraction:
   728 000001C3 256C642F256C6400        	db `%ld/%ld\0`
   729                                  fmt_zero:
   730 000001CB 3000                    	db `0\0`
   731                                  fmt_int:
   732 000001CD 256C6400                	db `%ld\0`
   733                                  fmt_unknown_sexpr_error:
   734 000001D1 0A0A21212120457272-     	db `\n\n!!! Error: Unknown type of sexpr (0x%02X) `
   734 000001DA 6F723A20556E6B6E6F-
   734 000001E3 776E2074797065206F-
   734 000001EC 662073657870722028-
   734 000001F5 3078253032582920   
   735 000001FD 617420616464726573-     	db `at address 0x%08X\n\n\0`
   735 00000206 73203078253038580A-
   735 0000020F 0A00               
   736                                  fmt_dquote:
   737 00000211 2200                    	db `\"\0`
   738                                  fmt_string_char:
   739 00000213 256300                          db `%c\0`
   740                                  fmt_string_char_7:
   741 00000216 5C6100                          db `\\a\0`
   742                                  fmt_string_char_8:
   743 00000219 5C6200                          db `\\b\0`
   744                                  fmt_string_char_9:
   745 0000021C 5C7400                          db `\\t\0`
   746                                  fmt_string_char_10:
   747 0000021F 5C6E00                          db `\\n\0`
   748                                  fmt_string_char_11:
   749 00000222 5C7600                          db `\\v\0`
   750                                  fmt_string_char_12:
   751 00000225 5C6600                          db `\\f\0`
   752                                  fmt_string_char_13:
   753 00000228 5C7200                          db `\\r\0`
   754                                  fmt_string_char_34:
   755 0000022B 5C2200                          db `\\"\0`
   756                                  fmt_string_char_92:
   757 0000022E 5C5C00                          db `\\\\\0`
   758                                  fmt_string_char_hex:
   759 00000231 5C7825583B00                    db `\\x%X;\0`
   760                                  
   761                                  section .text
   762                                  
   763                                  print_sexpr:
   764                                  	ENTER
    33 000007C9 C8000000            <1>  enter 0, 0
    34 000007CD 4883E4F0            <1>  and rsp, ~15
   765 000007D1 8A07                    	mov al, byte [rdi]
   766 000007D3 3C00                    	cmp al, T_void
   767 000007D5 744D                    	je .Lvoid
   768 000007D7 3C01                    	cmp al, T_nil
   769 000007D9 7458                    	je .Lnil
   770 000007DB 3C09                    	cmp al, T_boolean_false
   771 000007DD 7463                    	je .Lboolean_false
   772 000007DF 3C0A                    	cmp al, T_boolean_true
   773 000007E1 746E                    	je .Lboolean_true
   774 000007E3 3C02                    	cmp al, T_char
   775 000007E5 7479                    	je .Lchar
   776 000007E7 3C04                    	cmp al, T_symbol
   777 000007E9 0F84BB010000            	je .Lsymbol
   778 000007EF 3C21                    	cmp al, T_pair
   779 000007F1 0F84D6010000            	je .Lpair
   780 000007F7 3C22                    	cmp al, T_vector
   781 000007F9 0F849F020000            	je .Lvector
   782 000007FF 3C05                    	cmp al, T_closure
   783 00000801 0F8489010000            	je .Lclosure
   784 00000807 3C12                    	cmp al, T_real
   785 00000809 0F8430030000            	je .Lreal
   786 0000080F 3C11                    	cmp al, T_rational
   787 00000811 0F8456030000            	je .Lrational
   788 00000817 3C03                    	cmp al, T_string
   789 00000819 0F848F030000            	je .Lstring
   790                                  
   791 0000081F E9C7040000              	jmp .Lunknown_sexpr_type
   792                                  
   793                                  .Lvoid:
   794 00000824 48BF-                   	mov rdi, fmt_void
   794 00000826 [1601000000000000] 
   795 0000082E E9F5040000              	jmp .Lemit
   796                                  
   797                                  .Lnil:
   798 00000833 48BF-                   	mov rdi, fmt_nil
   798 00000835 [1E01000000000000] 
   799 0000083D E9E6040000              	jmp .Lemit
   800                                  
   801                                  .Lboolean_false:
   802 00000842 48BF-                   	mov rdi, fmt_boolean_false
   802 00000844 [2101000000000000] 
   803 0000084C E9D7040000              	jmp .Lemit
   804                                  
   805                                  .Lboolean_true:
   806 00000851 48BF-                   	mov rdi, fmt_boolean_true
   806 00000853 [2401000000000000] 
   807 0000085B E9C8040000              	jmp .Lemit
   808                                  
   809                                  .Lchar:
   810 00000860 8A4701                  	mov al, byte [rdi + 1]
   811 00000863 3C20                    	cmp al, ' '
   812 00000865 7E28                    	jle .Lchar_whitespace
   813 00000867 3C5C                    	cmp al, 92 		; backslash
   814 00000869 0F847C000000            	je .Lchar_backslash
   815 0000086F 3C22                    	cmp al, '"'
   816 00000871 0F8483000000            	je .Lchar_dquote
   817 00000877 4825FF000000            	and rax, 255
   818 0000087D 48BF-                   	mov rdi, fmt_char_simple
   818 0000087F [2F01000000000000] 
   819 00000887 4889C6                  	mov rsi, rax
   820 0000088A E999040000              	jmp .Lemit
   821                                  
   822                                  .Lchar_whitespace:
   823 0000088F 3C00                    	cmp al, 0
   824 00000891 7476                    	je .Lchar_null
   825 00000893 3C07                    	cmp al, 7
   826 00000895 0F847D000000            	je .Lchar_bell
   827 0000089B 3C08                    	cmp al, 8
   828 0000089D 0F8484000000            	je .Lchar_backspace
   829 000008A3 3C09                    	cmp al, 9
   830 000008A5 0F848B000000            	je .Lchar_tab
   831 000008AB 3C0A                    	cmp al, 10
   832 000008AD 0F8492000000            	je .Lchar_newline
   833 000008B3 3C0C                    	cmp al, 12
   834 000008B5 0F8499000000            	je .Lchar_formfeed
   835 000008BB 3C0D                    	cmp al, 13
   836 000008BD 0F84A0000000            	je .Lchar_return
   837 000008C3 3C1B                    	cmp al, 27
   838 000008C5 0F84A7000000            	je .Lchar_escape
   839 000008CB 4825FF000000            	and rax, 255
   840 000008D1 3C20                    	cmp al, ' '
   841 000008D3 0F84A8000000            	je .Lchar_space
   842 000008D9 48BF-                   	mov rdi, fmt_char_hex
   842 000008DB [7B01000000000000] 
   843 000008E3 4889C6                  	mov rsi, rax
   844 000008E6 E93D040000              	jmp .Lemit	
   845                                  
   846                                  .Lchar_backslash:
   847 000008EB 48BF-                   	mov rdi, fmt_char_backslash
   847 000008ED [2701000000000000] 
   848 000008F5 E92E040000              	jmp .Lemit
   849                                  
   850                                  .Lchar_dquote:
   851 000008FA 48BF-                   	mov rdi, fmt_char_dquote
   851 000008FC [2B01000000000000] 
   852 00000904 E91F040000              	jmp .Lemit
   853                                  
   854                                  .Lchar_null:
   855 00000909 48BF-                   	mov rdi, fmt_char_null
   855 0000090B [3401000000000000] 
   856 00000913 E910040000              	jmp .Lemit
   857                                  
   858                                  .Lchar_bell:
   859 00000918 48BF-                   	mov rdi, fmt_char_bell
   859 0000091A [3A01000000000000] 
   860 00000922 E901040000              	jmp .Lemit
   861                                  
   862                                  .Lchar_backspace:
   863 00000927 48BF-                   	mov rdi, fmt_char_backspace
   863 00000929 [4101000000000000] 
   864 00000931 E9F2030000              	jmp .Lemit
   865                                  
   866                                  .Lchar_tab:
   867 00000936 48BF-                   	mov rdi, fmt_char_tab
   867 00000938 [4D01000000000000] 
   868 00000940 E9E3030000              	jmp .Lemit
   869                                  
   870                                  .Lchar_newline:
   871 00000945 48BF-                   	mov rdi, fmt_char_newline
   871 00000947 [5301000000000000] 
   872 0000094F E9D4030000              	jmp .Lemit
   873                                  
   874                                  .Lchar_formfeed:
   875 00000954 48BF-                   	mov rdi, fmt_char_formfeed
   875 00000956 [5D01000000000000] 
   876 0000095E E9C5030000              	jmp .Lemit
   877                                  
   878                                  .Lchar_return:
   879 00000963 48BF-                   	mov rdi, fmt_char_return
   879 00000965 [6401000000000000] 
   880 0000096D E9B6030000              	jmp .Lemit
   881                                  
   882                                  .Lchar_escape:
   883 00000972 48BF-                   	mov rdi, fmt_char_escape
   883 00000974 [6D01000000000000] 
   884 0000097C E9A7030000              	jmp .Lemit
   885                                  
   886                                  .Lchar_space:
   887 00000981 48BF-                   	mov rdi, fmt_char_space
   887 00000983 [7301000000000000] 
   888 0000098B E998030000              	jmp .Lemit
   889                                  
   890                                  .Lclosure:
   891 00000990 4889FE                  	mov rsi, qword rdi
   892 00000993 48BF-                   	mov rdi, fmt_closure
   892 00000995 [8301000000000000] 
   893 0000099D 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
   894 000009A1 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
   895 000009A5 E97E030000              	jmp .Lemit
   896                                  
   897                                  .Lsymbol:
   898 000009AA 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
   899 000009AE BE01000000              	mov rsi, 1		 ; size = 1 byte
   900 000009B3 488B5701                	mov rdx, qword [rdi + 1] ; length
   901 000009B7 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
   902 000009BB 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
   903 000009C3 E8(00000000)            	call fwrite
   904 000009C8 E970030000              	jmp .Lend
   905                                  	
   906                                  .Lpair:
   907 000009CD 57                      	push rdi
   908 000009CE 48BF-                   	mov rdi, fmt_lparen
   908 000009D0 [AF01000000000000] 
   909 000009D8 B800000000              	mov rax, 0
   910                                          ENTER
    33 000009DD C8000000            <1>  enter 0, 0
    34 000009E1 4883E4F0            <1>  and rsp, ~15
   911 000009E5 E8(00000000)            	call printf
   912                                          LEAVE
    38 000009EA C9                  <1>  leave
   913 000009EB 488B3C24                	mov rdi, qword [rsp] 	; pair
   914 000009EF 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   915 000009F3 E8D1FDFFFF              	call print_sexpr
   916 000009F8 5F                      	pop rdi 		; pair
   917 000009F9 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   918                                  .Lcdr:
   919 000009FD 8A07                    	mov al, byte [rdi]
   920 000009FF 3C01                    	cmp al, T_nil
   921 00000A01 7447                    	je .Lcdr_nil
   922 00000A03 3C21                    	cmp al, T_pair
   923 00000A05 7462                    	je .Lcdr_pair
   924 00000A07 57                      	push rdi
   925 00000A08 48BF-                   	mov rdi, fmt_dotted_pair
   925 00000A0A [B101000000000000] 
   926 00000A12 B800000000              	mov rax, 0
   927                                  	ENTER
    33 00000A17 C8000000            <1>  enter 0, 0
    34 00000A1B 4883E4F0            <1>  and rsp, ~15
   928 00000A1F E8(00000000)            	call printf
   929                                  	LEAVE
    38 00000A24 C9                  <1>  leave
   930 00000A25 5F                      	pop rdi
   931 00000A26 E89EFDFFFF              	call print_sexpr
   932 00000A2B 48BF-                   	mov rdi, fmt_rparen
   932 00000A2D [B501000000000000] 
   933 00000A35 B800000000              	mov rax, 0
   934                                  	ENTER
    33 00000A3A C8000000            <1>  enter 0, 0
    34 00000A3E 4883E4F0            <1>  and rsp, ~15
   935 00000A42 E8(00000000)            	call printf
   936                                  	LEAVE
    38 00000A47 C9                  <1>  leave
   937                                  	LEAVE
    38 00000A48 C9                  <1>  leave
   938 00000A49 C3                      	ret
   939                                  
   940                                  .Lcdr_nil:
   941 00000A4A 48BF-                   	mov rdi, fmt_rparen
   941 00000A4C [B501000000000000] 
   942 00000A54 B800000000              	mov rax, 0
   943                                  	ENTER
    33 00000A59 C8000000            <1>  enter 0, 0
    34 00000A5D 4883E4F0            <1>  and rsp, ~15
   944 00000A61 E8(00000000)            	call printf
   945                                  	LEAVE
    38 00000A66 C9                  <1>  leave
   946                                  	LEAVE
    38 00000A67 C9                  <1>  leave
   947 00000A68 C3                      	ret
   948                                  
   949                                  .Lcdr_pair:
   950 00000A69 57                      	push rdi
   951 00000A6A 48BF-                   	mov rdi, fmt_space
   951 00000A6C [B701000000000000] 
   952 00000A74 B800000000              	mov rax, 0
   953                                  	ENTER
    33 00000A79 C8000000            <1>  enter 0, 0
    34 00000A7D 4883E4F0            <1>  and rsp, ~15
   954 00000A81 E8(00000000)            	call printf
   955                                  	LEAVE
    38 00000A86 C9                  <1>  leave
   956 00000A87 488B3C24                	mov rdi, qword [rsp]
   957 00000A8B 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   958 00000A8F E835FDFFFF              	call print_sexpr
   959 00000A94 5F                      	pop rdi
   960 00000A95 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   961 00000A99 E95FFFFFFF              	jmp .Lcdr
   962                                  
   963                                  .Lvector:
   964 00000A9E 488B4701                	mov rax, qword [rdi + 1] ; length
   965 00000AA2 4883F800                	cmp rax, 0
   966 00000AA6 0F8484000000            	je .Lvector_empty
   967 00000AAC 57                      	push rdi
   968 00000AAD 48BF-                   	mov rdi, fmt_vector
   968 00000AAF [BD01000000000000] 
   969 00000AB7 B800000000              	mov rax, 0
   970                                  	ENTER
    33 00000ABC C8000000            <1>  enter 0, 0
    34 00000AC0 4883E4F0            <1>  and rsp, ~15
   971 00000AC4 E8(00000000)            	call printf
   972                                  	LEAVE
    38 00000AC9 C9                  <1>  leave
   973 00000ACA 488B3C24                	mov rdi, qword [rsp]
   974 00000ACE FF7701                  	push qword [rdi + 1]
   975 00000AD1 6A01                    	push 1
   976 00000AD3 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
   977 00000AD7 E8EDFCFFFF              	call print_sexpr
   978                                  .Lvector_loop:
   979                                  	; [rsp] index
   980                                  	; [rsp + 8*1] limit
   981                                  	; [rsp + 8*2] vector
   982 00000ADC 488B0424                	mov rax, qword [rsp]
   983 00000AE0 483B442408              	cmp rax, qword [rsp + 8*1]
   984 00000AE5 7436                    	je .Lvector_end
   985 00000AE7 48BF-                   	mov rdi, fmt_space
   985 00000AE9 [B701000000000000] 
   986 00000AF1 B800000000              	mov rax, 0
   987                                  	ENTER
    33 00000AF6 C8000000            <1>  enter 0, 0
    34 00000AFA 4883E4F0            <1>  and rsp, ~15
   988 00000AFE E8(00000000)            	call printf
   989                                  	LEAVE
    38 00000B03 C9                  <1>  leave
   990 00000B04 488B0424                	mov rax, qword [rsp]
   991 00000B08 488B5C2410              	mov rbx, qword [rsp + 8*2]
   992 00000B0D 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
   993 00000B12 E8B2FCFFFF              	call print_sexpr
   994 00000B17 48FF0424                	inc qword [rsp]
   995 00000B1B EBBF                    	jmp .Lvector_loop
   996                                  
   997                                  .Lvector_end:
   998 00000B1D 4883C418                	add rsp, 8*3
   999 00000B21 48BF-                   	mov rdi, fmt_rparen
   999 00000B23 [B501000000000000] 
  1000 00000B2B E9F8010000              	jmp .Lemit	
  1001                                  
  1002                                  .Lvector_empty:
  1003 00000B30 48BF-                   	mov rdi, fmt_empty_vector
  1003 00000B32 [B901000000000000] 
  1004 00000B3A E9E9010000              	jmp .Lemit
  1005                                  
  1006                                  .Lreal:
  1007 00000B3F FF7701                  	push qword [rdi + 1]
  1008 00000B42 F20F100424              	movsd xmm0, qword [rsp]
  1009 00000B47 4883C408                	add rsp, 8*1
  1010 00000B4B 48BF-                   	mov rdi, fmt_real
  1010 00000B4D [C001000000000000] 
  1011 00000B55 B801000000              	mov rax, 1
  1012                                  	ENTER
    33 00000B5A C8000000            <1>  enter 0, 0
    34 00000B5E 4883E4F0            <1>  and rsp, ~15
  1013 00000B62 E8(00000000)            	call printf
  1014                                  	LEAVE
    38 00000B67 C9                  <1>  leave
  1015 00000B68 E9D0010000              	jmp .Lend
  1016                                  
  1017                                  .Lrational:
  1018 00000B6D 488B7701                	mov rsi, qword [rdi + 1]
  1019 00000B71 488B5709                	mov rdx, qword [rdi + 1 + 8]
  1020 00000B75 4883FE00                	cmp rsi, 0
  1021 00000B79 7415                    	je .Lrat_zero
  1022 00000B7B 4883FA01                	cmp rdx, 1
  1023 00000B7F 741E                    	je .Lrat_int
  1024 00000B81 48BF-                   	mov rdi, fmt_fraction
  1024 00000B83 [C301000000000000] 
  1025 00000B8B E998010000              	jmp .Lemit
  1026                                  
  1027                                  .Lrat_zero:
  1028 00000B90 48BF-                   	mov rdi, fmt_zero
  1028 00000B92 [CB01000000000000] 
  1029 00000B9A E989010000              	jmp .Lemit
  1030                                  
  1031                                  .Lrat_int:
  1032 00000B9F 48BF-                   	mov rdi, fmt_int
  1032 00000BA1 [CD01000000000000] 
  1033 00000BA9 E97A010000              	jmp .Lemit
  1034                                  
  1035                                  .Lstring:
  1036 00000BAE 488D4709                	lea rax, [rdi + 1 + 8]
  1037 00000BB2 50                      	push rax
  1038 00000BB3 FF7701                  	push qword [rdi + 1]
  1039 00000BB6 48BF-                   	mov rdi, fmt_dquote
  1039 00000BB8 [1102000000000000] 
  1040 00000BC0 B800000000              	mov rax, 0
  1041                                  	ENTER
    33 00000BC5 C8000000            <1>  enter 0, 0
    34 00000BC9 4883E4F0            <1>  and rsp, ~15
  1042 00000BCD E8(00000000)            	call printf
  1043                                  	LEAVE
    38 00000BD2 C9                  <1>  leave
  1044                                  .Lstring_loop:
  1045                                  	; qword [rsp]: limit
  1046                                  	; qword [rsp + 8*1]: char *
  1047 00000BD3 48833C2400              	cmp qword [rsp], 0
  1048 00000BD8 0F84FD000000            	je .Lstring_end
  1049 00000BDE 488B442408              	mov rax, qword [rsp + 8*1]
  1050 00000BE3 8A00                    	mov al, byte [rax]
  1051 00000BE5 4825FF000000            	and rax, 255
  1052 00000BEB 3C07                    	cmp al, 7
  1053 00000BED 7468                            je .Lstring_char_7
  1054 00000BEF 3C08                            cmp al, 8
  1055 00000BF1 7470                            je .Lstring_char_8
  1056 00000BF3 3C09                            cmp al, 9
  1057 00000BF5 7478                            je .Lstring_char_9
  1058 00000BF7 3C0A                            cmp al, 10
  1059 00000BF9 0F847C000000                    je .Lstring_char_10
  1060 00000BFF 3C0B                            cmp al, 11
  1061 00000C01 0F8480000000                    je .Lstring_char_11
  1062 00000C07 3C0C                            cmp al, 12
  1063 00000C09 0F8484000000                    je .Lstring_char_12
  1064 00000C0F 3C0D                            cmp al, 13
  1065 00000C11 0F8488000000                    je .Lstring_char_13
  1066 00000C17 3C22                            cmp al, 34
  1067 00000C19 0F848C000000                    je .Lstring_char_34
  1068 00000C1F 3C5C                            cmp al, 92              ;         je .Lstring_char_92
  1070 00000C21 3C20                            cmp al, ' '
  1071 00000C23 0F8CA0000000                    jl .Lstring_char_hex
  1072 00000C29 48BF-                           mov rdi, fmt_string_char
  1072 00000C2B [1302000000000000] 
  1073 00000C33 4889C6                          mov rsi, rax
  1074                                  .Lstring_char_emit:
  1075 00000C36 B800000000                      mov rax, 0
  1076                                          ENTER
    33 00000C3B C8000000            <1>  enter 0, 0
    34 00000C3F 4883E4F0            <1>  and rsp, ~15
  1077 00000C43 E8(00000000)                    call printf
  1078                                          LEAVE
    38 00000C48 C9                  <1>  leave
  1079 00000C49 48FF0C24                        dec qword [rsp]
  1080 00000C4D 48FF442408                      inc qword [rsp + 8*1]
  1081 00000C52 E97CFFFFFF                      jmp .Lstring_loop
  1082                                  
  1083                                  .Lstring_char_7:
  1084 00000C57 48BF-                           mov rdi, fmt_string_char_7
  1084 00000C59 [1602000000000000] 
  1085 00000C61 EBD3                            jmp .Lstring_char_emit
  1086                                  
  1087                                  .Lstring_char_8:
  1088 00000C63 48BF-                           mov rdi, fmt_string_char_8
  1088 00000C65 [1902000000000000] 
  1089 00000C6D EBC7                            jmp .Lstring_char_emit
  1090                                          
  1091                                  .Lstring_char_9:
  1092 00000C6F 48BF-                           mov rdi, fmt_string_char_9
  1092 00000C71 [1C02000000000000] 
  1093 00000C79 EBBB                            jmp .Lstring_char_emit
  1094                                  
  1095                                  .Lstring_char_10:
  1096 00000C7B 48BF-                           mov rdi, fmt_string_char_10
  1096 00000C7D [1F02000000000000] 
  1097 00000C85 EBAF                            jmp .Lstring_char_emit
  1098                                  
  1099                                  .Lstring_char_11:
  1100 00000C87 48BF-                           mov rdi, fmt_string_char_11
  1100 00000C89 [2202000000000000] 
  1101 00000C91 EBA3                            jmp .Lstring_char_emit
  1102                                  
  1103                                  .Lstring_char_12:
  1104 00000C93 48BF-                           mov rdi, fmt_string_char_12
  1104 00000C95 [2502000000000000] 
  1105 00000C9D EB97                            jmp .Lstring_char_emit
  1106                                  
  1107                                  .Lstring_char_13:
  1108 00000C9F 48BF-                           mov rdi, fmt_string_char_13
  1108 00000CA1 [2802000000000000] 
  1109 00000CA9 EB8B                            jmp .Lstring_char_emit
  1110                                  
  1111                                  .Lstring_char_34:
  1112 00000CAB 48BF-                           mov rdi, fmt_string_char_34
  1112 00000CAD [2B02000000000000] 
  1113 00000CB5 E97CFFFFFF                      jmp .Lstring_char_emit
  1114                                  
  1115                                  .Lstring_char_92:
  1116 00000CBA 48BF-                           mov rdi, fmt_string_char_92
  1116 00000CBC [2E02000000000000] 
  1117 00000CC4 E96DFFFFFF                      jmp .Lstring_char_emit
  1118                                  
  1119                                  .Lstring_char_hex:
  1120 00000CC9 48BF-                           mov rdi, fmt_string_char_hex
  1120 00000CCB [3102000000000000] 
  1121 00000CD3 4889C6                          mov rsi, rax
  1122 00000CD6 E95BFFFFFF                      jmp .Lstring_char_emit        
  1123                                  
  1124                                  .Lstring_end:
  1125 00000CDB 4883C410                	add rsp, 8 * 2
  1126 00000CDF 48BF-                   	mov rdi, fmt_dquote
  1126 00000CE1 [1102000000000000] 
  1127 00000CE9 EB3D                    	jmp .Lemit
  1128                                  
  1129                                  .Lunknown_sexpr_type:
  1130 00000CEB 48BE-                   	mov rsi, fmt_unknown_sexpr_error
  1130 00000CED [D101000000000000] 
  1131 00000CF5 4825FF000000            	and rax, 255
  1132 00000CFB 4889C2                  	mov rdx, rax
  1133 00000CFE 4889F9                  	mov rcx, rdi
  1134 00000D01 488B3C25[00000000]      	mov rdi, qword [stderr]
  1135 00000D09 B800000000              	mov rax, 0
  1136                                  	ENTER
    33 00000D0E C8000000            <1>  enter 0, 0
    34 00000D12 4883E4F0            <1>  and rsp, ~15
  1137 00000D16 E8(00000000)            	call fprintf
  1138                                  	LEAVE
    38 00000D1B C9                  <1>  leave
  1139 00000D1C 48C7C0FFFFFFFF          	mov rax, -1
  1140 00000D23 E8(00000000)            	call exit
  1141                                  
  1142                                  .Lemit:
  1143 00000D28 B800000000              	mov rax, 0
  1144                                  	ENTER
    33 00000D2D C8000000            <1>  enter 0, 0
    34 00000D31 4883E4F0            <1>  and rsp, ~15
  1145 00000D35 E8(00000000)            	call printf
  1146                                  	LEAVE
    38 00000D3A C9                  <1>  leave
  1147 00000D3B EB00                    	jmp .Lend
  1148                                  
  1149                                  .Lend:
  1150                                  	LEAVE
    38 00000D3D C9                  <1>  leave
  1151 00000D3E C3                      	ret
  1152                                  
  1153                                  ;;; rdi: address of free variable
  1154                                  ;;; rsi: address of code-pointer
  1155                                  bind_primitive:
  1156                                          ENTER
    33 00000D3F C8000000            <1>  enter 0, 0
    34 00000D43 4883E4F0            <1>  and rsp, ~15
  1157 00000D47 57                              push rdi
  1158 00000D48 BF11000000                      mov rdi, (1 + 8 + 8)
  1159 00000D4D E85CFAFFFF                      call malloc
  1160 00000D52 5F                              pop rdi
  1161 00000D53 C60005                          mov byte [rax], T_closure
  1162 00000D56 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  1163 00000D5E 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  1164 00000D62 488907                          mov qword [rdi], rax
  1165                                          LEAVE
    38 00000D65 C9                  <1>  leave
  1166 00000D66 C3                              ret
  1167                                  
  1168                                  ;;; PLEASE IMPLEMENT THIS PROCEDURE
  1169                                  L_code_ptr_bin_apply:
  1170                                  	
  1171                                  L_code_ptr_is_null:
  1172                                          ENTER
    33 00000D67 C8000000            <1>  enter 0, 0
    34 00000D6B 4883E4F0            <1>  and rsp, ~15
  1173 00000D6F 48837D1801                      cmp COUNT, 1
  1174 00000D74 0F85A5100000                    jne L_error_arg_count_1
  1175 00000D7A 488B4520                        mov rax, PARAM(0)
  1176 00000D7E 803801                          cmp byte [rax], T_nil
  1177 00000D81 750C                            jne .L_false
  1178 00000D83 48B8-                           mov rax, sob_boolean_true
  1178 00000D85 [0300000000000000] 
  1179 00000D8D EB0A                            jmp .L_end
  1180                                  .L_false:
  1181 00000D8F 48B8-                           mov rax, sob_boolean_false
  1181 00000D91 [0200000000000000] 
  1182                                  .L_end:
  1183                                          LEAVE
    38 00000D99 C9                  <1>  leave
  1184 00000D9A C21800                          ret AND_KILL_FRAME(1)
  1185                                  
  1186                                  L_code_ptr_is_pair:
  1187                                          ENTER
    33 00000D9D C8000000            <1>  enter 0, 0
    34 00000DA1 4883E4F0            <1>  and rsp, ~15
  1188 00000DA5 48837D1801                      cmp COUNT, 1
  1189 00000DAA 0F856F100000                    jne L_error_arg_count_1
  1190 00000DB0 488B4520                        mov rax, PARAM(0)
  1191 00000DB4 803821                          cmp byte [rax], T_pair
  1192 00000DB7 750C                            jne .L_false
  1193 00000DB9 48B8-                           mov rax, sob_boolean_true
  1193 00000DBB [0300000000000000] 
  1194 00000DC3 EB0A                            jmp .L_end
  1195                                  .L_false:
  1196 00000DC5 48B8-                           mov rax, sob_boolean_false
  1196 00000DC7 [0200000000000000] 
  1197                                  .L_end:
  1198                                          LEAVE
    38 00000DCF C9                  <1>  leave
  1199 00000DD0 C21800                          ret AND_KILL_FRAME(1)
  1200                                          
  1201                                  L_code_ptr_is_void:
  1202                                          ENTER
    33 00000DD3 C8000000            <1>  enter 0, 0
    34 00000DD7 4883E4F0            <1>  and rsp, ~15
  1203 00000DDB 48837D1801                      cmp COUNT, 1
  1204 00000DE0 0F8539100000                    jne L_error_arg_count_1
  1205 00000DE6 488B4520                        mov rax, PARAM(0)
  1206 00000DEA 803800                          cmp byte [rax], T_void
  1207 00000DED 750C                            jne .L_false
  1208 00000DEF 48B8-                           mov rax, sob_boolean_true
  1208 00000DF1 [0300000000000000] 
  1209 00000DF9 EB0A                            jmp .L_end
  1210                                  .L_false:
  1211 00000DFB 48B8-                           mov rax, sob_boolean_false
  1211 00000DFD [0200000000000000] 
  1212                                  .L_end:
  1213                                          LEAVE
    38 00000E05 C9                  <1>  leave
  1214 00000E06 C21800                          ret AND_KILL_FRAME(1)
  1215                                  
  1216                                  L_code_ptr_is_char:
  1217                                          ENTER
    33 00000E09 C8000000            <1>  enter 0, 0
    34 00000E0D 4883E4F0            <1>  and rsp, ~15
  1218 00000E11 48837D1801                      cmp COUNT, 1
  1219 00000E16 0F8503100000                    jne L_error_arg_count_1
  1220 00000E1C 488B4520                        mov rax, PARAM(0)
  1221 00000E20 803802                          cmp byte [rax], T_char
  1222 00000E23 750C                            jne .L_false
  1223 00000E25 48B8-                           mov rax, sob_boolean_true
  1223 00000E27 [0300000000000000] 
  1224 00000E2F EB0A                            jmp .L_end
  1225                                  .L_false:
  1226 00000E31 48B8-                           mov rax, sob_boolean_false
  1226 00000E33 [0200000000000000] 
  1227                                  .L_end:
  1228                                          LEAVE
    38 00000E3B C9                  <1>  leave
  1229 00000E3C C21800                          ret AND_KILL_FRAME(1)
  1230                                  
  1231                                  L_code_ptr_is_string:
  1232                                          ENTER
    33 00000E3F C8000000            <1>  enter 0, 0
    34 00000E43 4883E4F0            <1>  and rsp, ~15
  1233 00000E47 48837D1801                      cmp COUNT, 1
  1234 00000E4C 0F85CD0F0000                    jne L_error_arg_count_1
  1235 00000E52 488B4520                        mov rax, PARAM(0)
  1236 00000E56 803803                          cmp byte [rax], T_string
  1237 00000E59 750C                            jne .L_false
  1238 00000E5B 48B8-                           mov rax, sob_boolean_true
  1238 00000E5D [0300000000000000] 
  1239 00000E65 EB0A                            jmp .L_end
  1240                                  .L_false:
  1241 00000E67 48B8-                           mov rax, sob_boolean_false
  1241 00000E69 [0200000000000000] 
  1242                                  .L_end:
  1243                                          LEAVE
    38 00000E71 C9                  <1>  leave
  1244 00000E72 C21800                          ret AND_KILL_FRAME(1)
  1245                                  
  1246                                  L_code_ptr_is_symbol:
  1247                                          ENTER
    33 00000E75 C8000000            <1>  enter 0, 0
    34 00000E79 4883E4F0            <1>  and rsp, ~15
  1248 00000E7D 48837D1801                      cmp COUNT, 1
  1249 00000E82 0F85970F0000                    jne L_error_arg_count_1
  1250 00000E88 488B4520                        mov rax, PARAM(0)
  1251 00000E8C 803804                          cmp byte [rax], T_symbol
  1252 00000E8F 750C                            jne .L_false
  1253 00000E91 48B8-                           mov rax, sob_boolean_true
  1253 00000E93 [0300000000000000] 
  1254 00000E9B EB0A                            jmp .L_end
  1255                                  .L_false:
  1256 00000E9D 48B8-                           mov rax, sob_boolean_false
  1256 00000E9F [0200000000000000] 
  1257                                  .L_end:
  1258                                          LEAVE
    38 00000EA7 C9                  <1>  leave
  1259 00000EA8 C21800                          ret AND_KILL_FRAME(1)
  1260                                  
  1261                                  L_code_ptr_is_vector:
  1262                                          ENTER
    33 00000EAB C8000000            <1>  enter 0, 0
    34 00000EAF 4883E4F0            <1>  and rsp, ~15
  1263 00000EB3 48837D1801                      cmp COUNT, 1
  1264 00000EB8 0F85610F0000                    jne L_error_arg_count_1
  1265 00000EBE 488B4520                        mov rax, PARAM(0)
  1266 00000EC2 803822                          cmp byte [rax], T_vector
  1267 00000EC5 750C                            jne .L_false
  1268 00000EC7 48B8-                           mov rax, sob_boolean_true
  1268 00000EC9 [0300000000000000] 
  1269 00000ED1 EB0A                            jmp .L_end
  1270                                  .L_false:
  1271 00000ED3 48B8-                           mov rax, sob_boolean_false
  1271 00000ED5 [0200000000000000] 
  1272                                  .L_end:
  1273                                          LEAVE
    38 00000EDD C9                  <1>  leave
  1274 00000EDE C21800                          ret AND_KILL_FRAME(1)
  1275                                  
  1276                                  L_code_ptr_is_closure:
  1277                                          ENTER
    33 00000EE1 C8000000            <1>  enter 0, 0
    34 00000EE5 4883E4F0            <1>  and rsp, ~15
  1278 00000EE9 48837D1801                      cmp COUNT, 1
  1279 00000EEE 0F852B0F0000                    jne L_error_arg_count_1
  1280 00000EF4 488B4520                        mov rax, PARAM(0)
  1281 00000EF8 803805                          cmp byte [rax], T_closure
  1282 00000EFB 750C                            jne .L_false
  1283 00000EFD 48B8-                           mov rax, sob_boolean_true
  1283 00000EFF [0300000000000000] 
  1284 00000F07 EB0A                            jmp .L_end
  1285                                  .L_false:
  1286 00000F09 48B8-                           mov rax, sob_boolean_false
  1286 00000F0B [0200000000000000] 
  1287                                  .L_end:
  1288                                          LEAVE
    38 00000F13 C9                  <1>  leave
  1289 00000F14 C21800                          ret AND_KILL_FRAME(1)
  1290                                  
  1291                                  L_code_ptr_is_real:
  1292                                          ENTER
    33 00000F17 C8000000            <1>  enter 0, 0
    34 00000F1B 4883E4F0            <1>  and rsp, ~15
  1293 00000F1F 48837D1801                      cmp COUNT, 1
  1294 00000F24 0F85F50E0000                    jne L_error_arg_count_1
  1295 00000F2A 488B4520                        mov rax, PARAM(0)
  1296 00000F2E 803812                          cmp byte [rax], T_real
  1297 00000F31 750C                            jne .L_false
  1298 00000F33 48B8-                           mov rax, sob_boolean_true
  1298 00000F35 [0300000000000000] 
  1299 00000F3D EB0A                            jmp .L_end
  1300                                  .L_false:
  1301 00000F3F 48B8-                           mov rax, sob_boolean_false
  1301 00000F41 [0200000000000000] 
  1302                                  .L_end:
  1303                                          LEAVE
    38 00000F49 C9                  <1>  leave
  1304 00000F4A C21800                          ret AND_KILL_FRAME(1)
  1305                                  
  1306                                  L_code_ptr_is_rational:
  1307                                          ENTER
    33 00000F4D C8000000            <1>  enter 0, 0
    34 00000F51 4883E4F0            <1>  and rsp, ~15
  1308 00000F55 48837D1801                      cmp COUNT, 1
  1309 00000F5A 0F85BF0E0000                    jne L_error_arg_count_1
  1310 00000F60 488B4520                        mov rax, PARAM(0)
  1311 00000F64 803811                          cmp byte [rax], T_rational
  1312 00000F67 750C                            jne .L_false
  1313 00000F69 48B8-                           mov rax, sob_boolean_true
  1313 00000F6B [0300000000000000] 
  1314 00000F73 EB0A                            jmp .L_end
  1315                                  .L_false:
  1316 00000F75 48B8-                           mov rax, sob_boolean_false
  1316 00000F77 [0200000000000000] 
  1317                                  .L_end:
  1318                                          LEAVE
    38 00000F7F C9                  <1>  leave
  1319 00000F80 C21800                          ret AND_KILL_FRAME(1)
  1320                                  
  1321                                  L_code_ptr_is_boolean:
  1322                                          ENTER
    33 00000F83 C8000000            <1>  enter 0, 0
    34 00000F87 4883E4F0            <1>  and rsp, ~15
  1323 00000F8B 48837D1801                      cmp COUNT, 1
  1324 00000F90 0F85890E0000                    jne L_error_arg_count_1
  1325 00000F96 488B4520                        mov rax, PARAM(0)
  1326 00000F9A 8A18                            mov bl, byte [rax]
  1327 00000F9C 80E308                          and bl, T_boolean
  1328 00000F9F 740C                            je .L_false
  1329 00000FA1 48B8-                           mov rax, sob_boolean_true
  1329 00000FA3 [0300000000000000] 
  1330 00000FAB EB0A                            jmp .L_end
  1331                                  .L_false:
  1332 00000FAD 48B8-                           mov rax, sob_boolean_false
  1332 00000FAF [0200000000000000] 
  1333                                  .L_end:
  1334                                          LEAVE
    38 00000FB7 C9                  <1>  leave
  1335 00000FB8 C21800                          ret AND_KILL_FRAME(1)
  1336                                          
  1337                                  L_code_ptr_is_number:
  1338                                          ENTER
    33 00000FBB C8000000            <1>  enter 0, 0
    34 00000FBF 4883E4F0            <1>  and rsp, ~15
  1339 00000FC3 48837D1801                      cmp COUNT, 1
  1340 00000FC8 0F85510E0000                    jne L_error_arg_count_1
  1341 00000FCE 488B4520                        mov rax, PARAM(0)
  1342 00000FD2 8A18                            mov bl, byte [rax]
  1343 00000FD4 80E310                          and bl, T_number
  1344 00000FD7 740C                            je .L_false
  1345 00000FD9 48B8-                           mov rax, sob_boolean_true
  1345 00000FDB [0300000000000000] 
  1346 00000FE3 EB0A                            jmp .L_end
  1347                                  .L_false:
  1348 00000FE5 48B8-                           mov rax, sob_boolean_false
  1348 00000FE7 [0200000000000000] 
  1349                                  .L_end:
  1350                                          LEAVE
    38 00000FEF C9                  <1>  leave
  1351 00000FF0 C21800                          ret AND_KILL_FRAME(1)
  1352                                          
  1353                                  L_code_ptr_is_collection:
  1354                                          ENTER
    33 00000FF3 C8000000            <1>  enter 0, 0
    34 00000FF7 4883E4F0            <1>  and rsp, ~15
  1355 00000FFB 48837D1801                      cmp COUNT, 1
  1356 00001000 0F85190E0000                    jne L_error_arg_count_1
  1357 00001006 488B4520                        mov rax, PARAM(0)
  1358 0000100A 8A18                            mov bl, byte [rax]
  1359 0000100C 80E320                          and bl, T_collection
  1360 0000100F 740C                            je .L_false
  1361 00001011 48B8-                           mov rax, sob_boolean_true
  1361 00001013 [0300000000000000] 
  1362 0000101B EB0A                            jmp .L_end
  1363                                  .L_false:
  1364 0000101D 48B8-                           mov rax, sob_boolean_false
  1364 0000101F [0200000000000000] 
  1365                                  .L_end:
  1366                                          LEAVE
    38 00001027 C9                  <1>  leave
  1367 00001028 C21800                          ret AND_KILL_FRAME(1)
  1368                                  
  1369                                  L_code_ptr_cons:
  1370                                          ENTER
    33 0000102B C8000000            <1>  enter 0, 0
    34 0000102F 4883E4F0            <1>  and rsp, ~15
  1371 00001033 48837D1802                      cmp COUNT, 2
  1372 00001038 0F85160E0000                    jne L_error_arg_count_2
  1373 0000103E BF11000000                      mov rdi, (1 + 8 + 8)
  1374 00001043 E866F7FFFF                      call malloc
  1375 00001048 C60021                          mov byte [rax], T_pair
  1376 0000104B 488B5D20                        mov rbx, PARAM(0)
  1377 0000104F 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1378 00001053 488B5D28                        mov rbx, PARAM(1)
  1379 00001057 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1380                                          LEAVE
    38 0000105B C9                  <1>  leave
  1381 0000105C C22000                          ret AND_KILL_FRAME(2)
  1382                                  
  1383                                  L_code_ptr_display_sexpr:
  1384                                          ENTER
    33 0000105F C8000000            <1>  enter 0, 0
    34 00001063 4883E4F0            <1>  and rsp, ~15
  1385 00001067 48837D1801                      cmp COUNT, 1
  1386 0000106C 0F85AD0D0000                    jne L_error_arg_count_1
  1387 00001072 488B7D20                        mov rdi, PARAM(0)
  1388 00001076 E84EF7FFFF                      call print_sexpr
  1389 0000107B 48B8-                           mov rax, sob_void
  1389 0000107D [0000000000000000] 
  1390                                          LEAVE
    38 00001085 C9                  <1>  leave
  1391 00001086 C21800                          ret AND_KILL_FRAME(1)
  1392                                  
  1393                                  L_code_ptr_write_char:
  1394                                          ENTER
    33 00001089 C8000000            <1>  enter 0, 0
    34 0000108D 4883E4F0            <1>  and rsp, ~15
  1395 00001091 48837D1801                      cmp COUNT, 1
  1396 00001096 0F85830D0000                    jne L_error_arg_count_1
  1397 0000109C 488B4520                        mov rax, PARAM(0)
  1398                                          assert_char(rax)
    42 000010A0 803802              <1>  cmp byte [%1], %2
    43 000010A3 0F854A0E0000        <1>  jne L_error_incorrect_type
  1399 000010A9 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  1400 000010AC 4825FF000000                    and rax, 255
  1401 000010B2 48BF-                           mov rdi, fmt_char
  1401 000010B4 [3702000000000000] 
  1402 000010BC 4889C6                          mov rsi, rax
  1403 000010BF B800000000                      mov rax, 0
  1404                                  	ENTER
    33 000010C4 C8000000            <1>  enter 0, 0
    34 000010C8 4883E4F0            <1>  and rsp, ~15
  1405 000010CC E8(00000000)                    call printf
  1406                                  	LEAVE
    38 000010D1 C9                  <1>  leave
  1407 000010D2 48B8-                           mov rax, sob_void
  1407 000010D4 [0000000000000000] 
  1408                                          LEAVE
    38 000010DC C9                  <1>  leave
  1409 000010DD C21800                          ret AND_KILL_FRAME(1)
  1410                                  
  1411                                  L_code_ptr_car:
  1412                                          ENTER
    33 000010E0 C8000000            <1>  enter 0, 0
    34 000010E4 4883E4F0            <1>  and rsp, ~15
  1413 000010E8 48837D1801                      cmp COUNT, 1
  1414 000010ED 0F852C0D0000                    jne L_error_arg_count_1
  1415 000010F3 488B4520                        mov rax, PARAM(0)
  1416                                          assert_pair(rax)
    42 000010F7 803821              <1>  cmp byte [%1], %2
    43 000010FA 0F85F30D0000        <1>  jne L_error_incorrect_type
  1417 00001100 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  1418                                          LEAVE
    38 00001104 C9                  <1>  leave
  1419 00001105 C21800                          ret AND_KILL_FRAME(1)
  1420                                          
  1421                                  L_code_ptr_cdr:
  1422                                          ENTER
    33 00001108 C8000000            <1>  enter 0, 0
    34 0000110C 4883E4F0            <1>  and rsp, ~15
  1423 00001110 48837D1801                      cmp COUNT, 1
  1424 00001115 0F85040D0000                    jne L_error_arg_count_1
  1425 0000111B 488B4520                        mov rax, PARAM(0)
  1426                                          assert_pair(rax)
    42 0000111F 803821              <1>  cmp byte [%1], %2
    43 00001122 0F85CB0D0000        <1>  jne L_error_incorrect_type
  1427 00001128 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  1428                                          LEAVE
    38 0000112C C9                  <1>  leave
  1429 0000112D C21800                          ret AND_KILL_FRAME(1)
  1430                                          
  1431                                  L_code_ptr_string_length:
  1432                                          ENTER
    33 00001130 C8000000            <1>  enter 0, 0
    34 00001134 4883E4F0            <1>  and rsp, ~15
  1433 00001138 48837D1801                      cmp COUNT, 1
  1434 0000113D 0F85DC0C0000                    jne L_error_arg_count_1
  1435 00001143 488B4520                        mov rax, PARAM(0)
  1436                                          assert_string(rax)
    42 00001147 803803              <1>  cmp byte [%1], %2
    43 0000114A 0F85A30D0000        <1>  jne L_error_incorrect_type
  1437 00001150 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  1438 00001154 E83A0C0000                      call make_integer
  1439                                          LEAVE
    38 00001159 C9                  <1>  leave
  1440 0000115A C21800                          ret AND_KILL_FRAME(1)
  1441                                  
  1442                                  L_code_ptr_vector_length:
  1443                                          ENTER
    33 0000115D C8000000            <1>  enter 0, 0
    34 00001161 4883E4F0            <1>  and rsp, ~15
  1444 00001165 48837D1801                      cmp COUNT, 1
  1445 0000116A 0F85AF0C0000                    jne L_error_arg_count_1
  1446 00001170 488B4520                        mov rax, PARAM(0)
  1447                                          assert_vector(rax)
    42 00001174 803822              <1>  cmp byte [%1], %2
    43 00001177 0F85760D0000        <1>  jne L_error_incorrect_type
  1448 0000117D 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  1449 00001181 E80D0C0000                      call make_integer
  1450                                          LEAVE
    38 00001186 C9                  <1>  leave
  1451 00001187 C21800                          ret AND_KILL_FRAME(1)
  1452                                  
  1453                                  L_code_ptr_real_to_integer:
  1454                                          ENTER
    33 0000118A C8000000            <1>  enter 0, 0
    34 0000118E 4883E4F0            <1>  and rsp, ~15
  1455 00001192 48837D1801                      cmp COUNT, 1
  1456 00001197 0F85820C0000                    jne L_error_arg_count_1
  1457 0000119D 488B5D20                        mov rbx, PARAM(0)
  1458                                          assert_real(rbx)
    42 000011A1 803B12              <1>  cmp byte [%1], %2
    43 000011A4 0F85490D0000        <1>  jne L_error_incorrect_type
  1459 000011AA F20F104301                      movsd xmm0, qword [rbx + 1]
  1460 000011AF F2480F2CF8                      cvttsd2si rdi, xmm0
  1461 000011B4 E8DA0B0000                      call make_integer
  1462                                          LEAVE
    38 000011B9 C9                  <1>  leave
  1463 000011BA C21800                          ret AND_KILL_FRAME(1)
  1464                                  
  1465                                  L_code_ptr_exit:
  1466                                          ENTER
    33 000011BD C8000000            <1>  enter 0, 0
    34 000011C1 4883E4F0            <1>  and rsp, ~15
  1467 000011C5 48837D1800                      cmp COUNT, 0
  1468 000011CA 0F851A0C0000                    jne L_error_arg_count_0
  1469 000011D0 B800000000                      mov rax, 0
  1470 000011D5 E8(00000000)                    call exit
  1471                                  
  1472                                  L_code_ptr_integer_to_real:
  1473                                          ENTER
    33 000011DA C8000000            <1>  enter 0, 0
    34 000011DE 4883E4F0            <1>  and rsp, ~15
  1474 000011E2 48837D1801                      cmp COUNT, 1
  1475 000011E7 0F85320C0000                    jne L_error_arg_count_1
  1476 000011ED 488B4520                        mov rax, PARAM(0)
  1477                                          assert_integer(rax)
    47                              <1>  assert_rational(%1)
    42 000011F1 803811              <2>  cmp byte [%1], %2
    43 000011F4 0F85F90C0000        <2>  jne L_error_incorrect_type
    48 000011FA 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000011FF 0F85EE0C0000        <1>  jne L_error_incorrect_type
  1478 00001205 FF7001                          push qword [rax + 1]
  1479 00001208 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1480 0000120E E8640B0000                      call make_real
  1481                                          LEAVE
    38 00001213 C9                  <1>  leave
  1482 00001214 C21800                          ret AND_KILL_FRAME(1)
  1483                                  
  1484                                  L_code_ptr_rational_to_real:
  1485                                          ENTER
    33 00001217 C8000000            <1>  enter 0, 0
    34 0000121B 4883E4F0            <1>  and rsp, ~15
  1486 0000121F 48837D1801                      cmp COUNT, 1
  1487 00001224 0F85F50B0000                    jne L_error_arg_count_1
  1488 0000122A 488B4520                        mov rax, PARAM(0)
  1489                                          assert_rational(rax)
    42 0000122E 803811              <1>  cmp byte [%1], %2
    43 00001231 0F85BC0C0000        <1>  jne L_error_incorrect_type
  1490 00001237 FF7001                          push qword [rax + 1]
  1491 0000123A F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1492 00001240 FF7009                          push qword [rax + 1 + 8]
  1493 00001243 F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  1494 00001249 F20F5EC1                        divsd xmm0, xmm1
  1495 0000124D E8250B0000                      call make_real
  1496                                          LEAVE
    38 00001252 C9                  <1>  leave
  1497 00001253 C21800                          ret AND_KILL_FRAME(1)
  1498                                  
  1499                                  L_code_ptr_char_to_integer:
  1500                                          ENTER
    33 00001256 C8000000            <1>  enter 0, 0
    34 0000125A 4883E4F0            <1>  and rsp, ~15
  1501 0000125E 48837D1801                      cmp COUNT, 1
  1502 00001263 0F85B60B0000                    jne L_error_arg_count_1
  1503 00001269 488B4520                        mov rax, PARAM(0)
  1504                                          assert_char(rax)
    42 0000126D 803802              <1>  cmp byte [%1], %2
    43 00001270 0F857D0C0000        <1>  jne L_error_incorrect_type
  1505 00001276 8A4001                          mov al, byte [rax + 1]
  1506 00001279 4825FF000000                    and rax, 255
  1507 0000127F 4889C7                          mov rdi, rax
  1508 00001282 E80C0B0000                      call make_integer
  1509                                          LEAVE
    38 00001287 C9                  <1>  leave
  1510 00001288 C21800                          ret AND_KILL_FRAME(1)
  1511                                  
  1512                                  L_code_ptr_integer_to_char:
  1513                                          ENTER
    33 0000128B C8000000            <1>  enter 0, 0
    34 0000128F 4883E4F0            <1>  and rsp, ~15
  1514 00001293 48837D1801                      cmp COUNT, 1
  1515 00001298 0F85810B0000                    jne L_error_arg_count_1
  1516 0000129E 488B4520                        mov rax, PARAM(0)
  1517                                          assert_integer(rax)
    47                              <1>  assert_rational(%1)
    42 000012A2 803811              <2>  cmp byte [%1], %2
    43 000012A5 0F85480C0000        <2>  jne L_error_incorrect_type
    48 000012AB 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000012B0 0F853D0C0000        <1>  jne L_error_incorrect_type
  1518 000012B6 488B5801                        mov rbx, qword [rax + 1]
  1519 000012BA 4883FB00                        cmp rbx, 0
  1520 000012BE 0F8EF50A0000                    jle L_error_integer_range
  1521 000012C4 4881FB00010000                  cmp rbx, 256
  1522 000012CB 0F8DE80A0000                    jge L_error_integer_range
  1523 000012D1 BF02000000                      mov rdi, (1 + 1)
  1524 000012D6 E8D3F4FFFF                      call malloc
  1525 000012DB C60002                          mov byte [rax], T_char
  1526 000012DE 885801                          mov byte [rax + 1], bl
  1527                                          LEAVE
    38 000012E1 C9                  <1>  leave
  1528 000012E2 C21800                          ret AND_KILL_FRAME(1)
  1529                                  
  1530                                  L_code_ptr_trng:
  1531                                          ENTER
    33 000012E5 C8000000            <1>  enter 0, 0
    34 000012E9 4883E4F0            <1>  and rsp, ~15
  1532 000012ED 48837D1800                      cmp COUNT, 0
  1533 000012F2 0F85F20A0000                    jne L_error_arg_count_0
  1534 000012F8 480FC7F7                        rdrand rdi
  1535 000012FC 48D1EF                          shr rdi, 1
  1536 000012FF E88F0A0000                      call make_integer
  1537                                          LEAVE
    38 00001304 C9                  <1>  leave
  1538 00001305 C21000                          ret AND_KILL_FRAME(0)
  1539                                  
  1540                                  L_code_ptr_is_zero:
  1541                                          ENTER
    33 00001308 C8000000            <1>  enter 0, 0
    34 0000130C 4883E4F0            <1>  and rsp, ~15
  1542 00001310 48837D1801                      cmp COUNT, 1
  1543 00001315 0F85040B0000                    jne L_error_arg_count_1
  1544 0000131B 488B4520                        mov rax, PARAM(0)
  1545 0000131F 803811                          cmp byte [rax], T_rational
  1546 00001322 740A                            je .L_rational
  1547 00001324 803812                          cmp byte [rax], T_real
  1548 00001327 740E                            je .L_real
  1549 00001329 E9C50B0000                      jmp L_error_incorrect_type
  1550                                  .L_rational:
  1551 0000132E 4883780100                      cmp qword [rax + 1], 0
  1552 00001333 7420                            je .L_zero
  1553 00001335 EB12                            jmp .L_not_zero
  1554                                  .L_real:
  1555 00001337 660FEFC0                        pxor xmm0, xmm0
  1556 0000133B FF7001                          push qword [rax + 1]
  1557 0000133E F20F100C24                      movsd xmm1, qword [rsp]
  1558 00001343 660F2EC1                        ucomisd xmm0, xmm1
  1559 00001347 740C                            je .L_zero
  1560                                  .L_not_zero:
  1561 00001349 48B8-                           mov rax, sob_boolean_false
  1561 0000134B [0200000000000000] 
  1562 00001353 EB0A                            jmp .L_end
  1563                                  .L_zero:
  1564 00001355 48B8-                           mov rax, sob_boolean_true
  1564 00001357 [0300000000000000] 
  1565                                  .L_end:
  1566                                          LEAVE
    38 0000135F C9                  <1>  leave
  1567 00001360 C21800                          ret AND_KILL_FRAME(1)
  1568                                  
  1569                                  L_code_ptr_is_integer:
  1570                                          ENTER
    33 00001363 C8000000            <1>  enter 0, 0
    34 00001367 4883E4F0            <1>  and rsp, ~15
  1571 0000136B 48837D1801                      cmp COUNT, 1
  1572 00001370 0F85A90A0000                    jne L_error_arg_count_1
  1573 00001376 488B4520                        mov rax, PARAM(0)
  1574 0000137A 803811                          cmp byte [rax], T_rational
  1575 0000137D 7513                            jne .L_false
  1576 0000137F 4883780901                      cmp qword [rax + 1 + 8], 1
  1577 00001384 750C                            jne .L_false
  1578 00001386 48B8-                           mov rax, sob_boolean_true
  1578 00001388 [0300000000000000] 
  1579 00001390 EB0A                            jmp .L_exit
  1580                                  .L_false:
  1581 00001392 48B8-                           mov rax, sob_boolean_false
  1581 00001394 [0200000000000000] 
  1582                                  .L_exit:
  1583                                          LEAVE
    38 0000139C C9                  <1>  leave
  1584 0000139D C21800                          ret AND_KILL_FRAME(1)
  1585                                  
  1586                                  L_code_ptr_raw_bin_add_rr:
  1587                                          ENTER
    33 000013A0 C8000000            <1>  enter 0, 0
    34 000013A4 4883E4F0            <1>  and rsp, ~15
  1588 000013A8 48837D1802                      cmp COUNT, 2
  1589 000013AD 0F85A10A0000                    jne L_error_arg_count_2
  1590 000013B3 488B5D20                        mov rbx, PARAM(0)
  1591                                          assert_real(rbx)
    42 000013B7 803B12              <1>  cmp byte [%1], %2
    43 000013BA 0F85330B0000        <1>  jne L_error_incorrect_type
  1592 000013C0 488B4D28                        mov rcx, PARAM(1)
  1593                                          assert_real(rcx)
    42 000013C4 803912              <1>  cmp byte [%1], %2
    43 000013C7 0F85260B0000        <1>  jne L_error_incorrect_type
  1594 000013CD F20F104301                      movsd xmm0, qword [rbx + 1]
  1595 000013D2 F20F104901                      movsd xmm1, qword [rcx + 1]
  1596 000013D7 F20F58C1                        addsd xmm0, xmm1
  1597 000013DB E897090000                      call make_real
  1598                                          LEAVE
    38 000013E0 C9                  <1>  leave
  1599 000013E1 C22000                          ret AND_KILL_FRAME(2)
  1600                                  
  1601                                  L_code_ptr_raw_bin_sub_rr:
  1602                                          ENTER
    33 000013E4 C8000000            <1>  enter 0, 0
    34 000013E8 4883E4F0            <1>  and rsp, ~15
  1603 000013EC 48837D1802                      cmp COUNT, 2
  1604 000013F1 0F855D0A0000                    jne L_error_arg_count_2
  1605 000013F7 488B5D20                        mov rbx, PARAM(0)
  1606                                          assert_real(rbx)
    42 000013FB 803B12              <1>  cmp byte [%1], %2
    43 000013FE 0F85EF0A0000        <1>  jne L_error_incorrect_type
  1607 00001404 488B4D28                        mov rcx, PARAM(1)
  1608                                          assert_real(rcx)
    42 00001408 803912              <1>  cmp byte [%1], %2
    43 0000140B 0F85E20A0000        <1>  jne L_error_incorrect_type
  1609 00001411 F20F104301                      movsd xmm0, qword [rbx + 1]
  1610 00001416 F20F104901                      movsd xmm1, qword [rcx + 1]
  1611 0000141B F20F5CC1                        subsd xmm0, xmm1
  1612 0000141F E853090000                      call make_real
  1613                                          LEAVE
    38 00001424 C9                  <1>  leave
  1614 00001425 C22000                          ret AND_KILL_FRAME(2)
  1615                                  
  1616                                  L_code_ptr_raw_bin_mul_rr:
  1617                                          ENTER
    33 00001428 C8000000            <1>  enter 0, 0
    34 0000142C 4883E4F0            <1>  and rsp, ~15
  1618 00001430 48837D1802                      cmp COUNT, 2
  1619 00001435 0F85190A0000                    jne L_error_arg_count_2
  1620 0000143B 488B5D20                        mov rbx, PARAM(0)
  1621                                          assert_real(rbx)
    42 0000143F 803B12              <1>  cmp byte [%1], %2
    43 00001442 0F85AB0A0000        <1>  jne L_error_incorrect_type
  1622 00001448 488B4D28                        mov rcx, PARAM(1)
  1623                                          assert_real(rcx)
    42 0000144C 803912              <1>  cmp byte [%1], %2
    43 0000144F 0F859E0A0000        <1>  jne L_error_incorrect_type
  1624 00001455 F20F104301                      movsd xmm0, qword [rbx + 1]
  1625 0000145A F20F104901                      movsd xmm1, qword [rcx + 1]
  1626 0000145F F20F59C1                        mulsd xmm0, xmm1
  1627 00001463 E80F090000                      call make_real
  1628                                          LEAVE
    38 00001468 C9                  <1>  leave
  1629 00001469 C22000                          ret AND_KILL_FRAME(2)
  1630                                  
  1631                                  L_code_ptr_raw_bin_div_rr:
  1632                                          ENTER
    33 0000146C C8000000            <1>  enter 0, 0
    34 00001470 4883E4F0            <1>  and rsp, ~15
  1633 00001474 48837D1802                      cmp COUNT, 2
  1634 00001479 0F85D5090000                    jne L_error_arg_count_2
  1635 0000147F 488B5D20                        mov rbx, PARAM(0)
  1636                                          assert_real(rbx)
    42 00001483 803B12              <1>  cmp byte [%1], %2
    43 00001486 0F85670A0000        <1>  jne L_error_incorrect_type
  1637 0000148C 488B4D28                        mov rcx, PARAM(1)
  1638                                          assert_real(rcx)
    42 00001490 803912              <1>  cmp byte [%1], %2
    43 00001493 0F855A0A0000        <1>  jne L_error_incorrect_type
  1639 00001499 F20F104301                      movsd xmm0, qword [rbx + 1]
  1640 0000149E F20F104901                      movsd xmm1, qword [rcx + 1]
  1641 000014A3 660FEFD2                        pxor xmm2, xmm2
  1642 000014A7 660F2ECA                        ucomisd xmm1, xmm2
  1643 000014AB 0F84730A0000                    je L_error_division_by_zero
  1644 000014B1 F20F5EC1                        divsd xmm0, xmm1
  1645 000014B5 E8BD080000                      call make_real
  1646                                          LEAVE
    38 000014BA C9                  <1>  leave
  1647 000014BB C22000                          ret AND_KILL_FRAME(2)
  1648                                  
  1649                                  L_code_ptr_raw_bin_add_qq:
  1650                                          ENTER
    33 000014BE C8000000            <1>  enter 0, 0
    34 000014C2 4883E4F0            <1>  and rsp, ~15
  1651 000014C6 48837D1802                      cmp COUNT, 2
  1652 000014CB 0F8583090000                    jne L_error_arg_count_2
  1653 000014D1 4C8B4520                        mov r8, PARAM(0)
  1654                                          assert_rational(r8)
    42 000014D5 41803811            <1>  cmp byte [%1], %2
    43 000014D9 0F85140A0000        <1>  jne L_error_incorrect_type
  1655 000014DF 4C8B4D28                        mov r9, PARAM(1)
  1656                                          assert_rational(r9)
    42 000014E3 41803911            <1>  cmp byte [%1], %2
    43 000014E7 0F85060A0000        <1>  jne L_error_incorrect_type
  1657 000014ED 498B4001                        mov rax, qword [r8 + 1] ; num1
  1658 000014F1 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1659 000014F5 4899                            cqo
  1660 000014F7 48F7EB                          imul rbx
  1661 000014FA 4889C6                          mov rsi, rax
  1662 000014FD 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1663 00001501 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1664 00001505 4899                            cqo
  1665 00001507 48F7EB                          imul rbx
  1666 0000150A 4801C6                          add rsi, rax
  1667 0000150D 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1668 00001511 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1669 00001515 4899                            cqo
  1670 00001517 48F7EB                          imul rbx
  1671 0000151A 4889C7                          mov rdi, rax
  1672 0000151D E827010000                      call normalize_rational
  1673                                          LEAVE
    38 00001522 C9                  <1>  leave
  1674 00001523 C22000                          ret AND_KILL_FRAME(2)
  1675                                  
  1676                                  L_code_ptr_raw_bin_sub_qq:
  1677                                          ENTER
    33 00001526 C8000000            <1>  enter 0, 0
    34 0000152A 4883E4F0            <1>  and rsp, ~15
  1678 0000152E 48837D1802                      cmp COUNT, 2
  1679 00001533 0F851B090000                    jne L_error_arg_count_2
  1680 00001539 4C8B4520                        mov r8, PARAM(0)
  1681                                          assert_rational(r8)
    42 0000153D 41803811            <1>  cmp byte [%1], %2
    43 00001541 0F85AC090000        <1>  jne L_error_incorrect_type
  1682 00001547 4C8B4D28                        mov r9, PARAM(1)
  1683                                          assert_rational(r9)
    42 0000154B 41803911            <1>  cmp byte [%1], %2
    43 0000154F 0F859E090000        <1>  jne L_error_incorrect_type
  1684 00001555 498B4001                        mov rax, qword [r8 + 1] ; num1
  1685 00001559 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1686 0000155D 4899                            cqo
  1687 0000155F 48F7EB                          imul rbx
  1688 00001562 4889C6                          mov rsi, rax
  1689 00001565 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1690 00001569 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1691 0000156D 4899                            cqo
  1692 0000156F 48F7EB                          imul rbx
  1693 00001572 4829C6                          sub rsi, rax
  1694 00001575 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1695 00001579 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1696 0000157D 4899                            cqo
  1697 0000157F 48F7EB                          imul rbx
  1698 00001582 4889C7                          mov rdi, rax
  1699 00001585 E8BF000000                      call normalize_rational
  1700                                          LEAVE
    38 0000158A C9                  <1>  leave
  1701 0000158B C22000                          ret AND_KILL_FRAME(2)
  1702                                  
  1703                                  L_code_ptr_raw_bin_mul_qq:
  1704                                          ENTER
    33 0000158E C8000000            <1>  enter 0, 0
    34 00001592 4883E4F0            <1>  and rsp, ~15
  1705 00001596 48837D1802                      cmp COUNT, 2
  1706 0000159B 0F85B3080000                    jne L_error_arg_count_2
  1707 000015A1 4C8B4520                        mov r8, PARAM(0)
  1708                                          assert_rational(r8)
    42 000015A5 41803811            <1>  cmp byte [%1], %2
    43 000015A9 0F8544090000        <1>  jne L_error_incorrect_type
  1709 000015AF 4C8B4D28                        mov r9, PARAM(1)
  1710                                          assert_rational(r9)
    42 000015B3 41803911            <1>  cmp byte [%1], %2
    43 000015B7 0F8536090000        <1>  jne L_error_incorrect_type
  1711 000015BD 498B4001                        mov rax, qword [r8 + 1] ; num1
  1712 000015C1 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1713 000015C5 4899                            cqo
  1714 000015C7 48F7EB                          imul rbx
  1715 000015CA 4889C6                          mov rsi, rax
  1716 000015CD 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1717 000015D1 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1718 000015D5 4899                            cqo
  1719 000015D7 48F7EB                          imul rbx
  1720 000015DA 4889C7                          mov rdi, rax
  1721 000015DD E867000000                      call normalize_rational
  1722                                          LEAVE
    38 000015E2 C9                  <1>  leave
  1723 000015E3 C22000                          ret AND_KILL_FRAME(2)
  1724                                          
  1725                                  L_code_ptr_raw_bin_div_qq:
  1726                                          ENTER
    33 000015E6 C8000000            <1>  enter 0, 0
    34 000015EA 4883E4F0            <1>  and rsp, ~15
  1727 000015EE 48837D1802                      cmp COUNT, 2
  1728 000015F3 0F855B080000                    jne L_error_arg_count_2
  1729 000015F9 4C8B4520                        mov r8, PARAM(0)
  1730                                          assert_rational(r8)
    42 000015FD 41803811            <1>  cmp byte [%1], %2
    43 00001601 0F85EC080000        <1>  jne L_error_incorrect_type
  1731 00001607 4C8B4D28                        mov r9, PARAM(1)
  1732                                          assert_rational(r9)
    42 0000160B 41803911            <1>  cmp byte [%1], %2
    43 0000160F 0F85DE080000        <1>  jne L_error_incorrect_type
  1733 00001615 4983790100                      cmp qword [r9 + 1], 0
  1734 0000161A 0F8404090000                    je L_error_division_by_zero
  1735 00001620 498B4001                        mov rax, qword [r8 + 1] ; num1
  1736 00001624 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1737 00001628 4899                            cqo
  1738 0000162A 48F7EB                          imul rbx
  1739 0000162D 4889C6                          mov rsi, rax
  1740 00001630 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1741 00001634 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1742 00001638 4899                            cqo
  1743 0000163A 48F7EB                          imul rbx
  1744 0000163D 4889C7                          mov rdi, rax
  1745 00001640 E804000000                      call normalize_rational
  1746                                          LEAVE
    38 00001645 C9                  <1>  leave
  1747 00001646 C22000                          ret AND_KILL_FRAME(2)
  1748                                          
  1749                                  normalize_rational:
  1750 00001649 56                              push rsi
  1751 0000164A 57                              push rdi
  1752 0000164B E839000000                      call gcd
  1753 00001650 4889C3                          mov rbx, rax
  1754 00001653 58                              pop rax
  1755 00001654 4899                            cqo
  1756 00001656 48F7FB                          idiv rbx
  1757 00001659 4989C0                          mov r8, rax
  1758 0000165C 58                              pop rax
  1759 0000165D 4899                            cqo
  1760 0000165F 48F7FB                          idiv rbx
  1761 00001662 4989C1                          mov r9, rax
  1762 00001665 BF11000000                      mov rdi, (1 + 8 + 8)
  1763 0000166A E83FF1FFFF                      call malloc
  1764 0000166F C60011                          mov byte [rax], T_rational
  1765 00001672 4C894801                        mov qword [rax + 1], r9
  1766 00001676 4C894009                        mov qword [rax + 1 + 8], r8
  1767 0000167A C3                              ret
  1768                                  
  1769                                  iabs:
  1770 0000167B 4889F8                          mov rax, rdi
  1771 0000167E 4883F800                        cmp rax, 0
  1772 00001682 7C01                            jl .Lneg
  1773 00001684 C3                              ret
  1774                                  .Lneg:
  1775 00001685 48F7D8                          neg rax
  1776 00001688 C3                              ret
  1777                                  
  1778                                  gcd:
  1779 00001689 E8EDFFFFFF                      call iabs
  1780 0000168E 4889C3                          mov rbx, rax
  1781 00001691 4889F7                          mov rdi, rsi
  1782 00001694 E8E2FFFFFF                      call iabs
  1783 00001699 4883F800                        cmp rax, 0
  1784 0000169D 7502                            jne .L0
  1785 0000169F 4893                            xchg rax, rbx
  1786                                  .L0:
  1787 000016A1 4883FB00                        cmp rbx, 0
  1788 000016A5 740C                            je .L1
  1789 000016A7 4899                            cqo
  1790 000016A9 48F7F3                          div rbx
  1791 000016AC 4889D0                          mov rax, rdx
  1792 000016AF 4893                            xchg rax, rbx
  1793 000016B1 EBEE                            jmp .L0
  1794                                  .L1:
  1795 000016B3 C3                              ret
  1796                                  
  1797                                  L_code_ptr_error:
  1798                                          ENTER
    33 000016B4 C8000000            <1>  enter 0, 0
    34 000016B8 4883E4F0            <1>  and rsp, ~15
  1799 000016BC 48837D1802                      cmp COUNT, 2
  1800 000016C1 0F858D070000                    jne L_error_arg_count_2
  1801 000016C7 488B7520                        mov rsi, PARAM(0)
  1802                                          assert_symbol(rsi)
    42 000016CB 803E04              <1>  cmp byte [%1], %2
    43 000016CE 0F851F080000        <1>  jne L_error_incorrect_type
  1803 000016D4 488B7528                        mov rsi, PARAM(1)
  1804                                          assert_string(rsi)
    42 000016D8 803E03              <1>  cmp byte [%1], %2
    43 000016DB 0F8512080000        <1>  jne L_error_incorrect_type
  1805 000016E1 48BF-                           mov rdi, fmt_scheme_error_part_1
  1805 000016E3 [6F03000000000000] 
  1806 000016EB B800000000                      mov rax, 0
  1807                                  	ENTER
    33 000016F0 C8000000            <1>  enter 0, 0
    34 000016F4 4883E4F0            <1>  and rsp, ~15
  1808 000016F8 E8(00000000)                    call printf
  1809                                  	LEAVE
    38 000016FD C9                  <1>  leave
  1810 000016FE 488B7D20                        mov rdi, PARAM(0)
  1811 00001702 E8C2F0FFFF                      call print_sexpr
  1812 00001707 48BF-                           mov rdi, fmt_scheme_error_part_2
  1812 00001709 [8303000000000000] 
  1813 00001711 B800000000                      mov rax, 0
  1814                                  	ENTER
    33 00001716 C8000000            <1>  enter 0, 0
    34 0000171A 4883E4F0            <1>  and rsp, ~15
  1815 0000171E E8(00000000)                    call printf
  1816                                  	LEAVE
    38 00001723 C9                  <1>  leave
  1817 00001724 488B4528                        mov rax, PARAM(1)       ; sob_string
  1818 00001728 BE01000000                      mov rsi, 1              ; size = 1 byte
  1819 0000172D 488B5001                        mov rdx, qword [rax + 1] ; length
  1820 00001731 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  1821 00001735 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
  1822 0000173D E8(00000000)                    call fwrite
  1823 00001742 48BF-                           mov rdi, fmt_scheme_error_part_3
  1823 00001744 [C503000000000000] 
  1824 0000174C B800000000                      mov rax, 0
  1825                                  	ENTER
    33 00001751 C8000000            <1>  enter 0, 0
    34 00001755 4883E4F0            <1>  and rsp, ~15
  1826 00001759 E8(00000000)                    call printf
  1827                                  	LEAVE
    38 0000175E C9                  <1>  leave
  1828 0000175F 48C7C0F7FFFFFF                  mov rax, -9
  1829 00001766 E8(00000000)                    call exit
  1830                                  
  1831                                  L_code_ptr_raw_less_than_rr:
  1832                                          ENTER
    33 0000176B C8000000            <1>  enter 0, 0
    34 0000176F 4883E4F0            <1>  and rsp, ~15
  1833 00001773 48837D1802                      cmp COUNT, 2
  1834 00001778 0F85D6060000                    jne L_error_arg_count_2
  1835 0000177E 488B7520                        mov rsi, PARAM(0)
  1836                                          assert_real(rsi)
    42 00001782 803E12              <1>  cmp byte [%1], %2
    43 00001785 0F8568070000        <1>  jne L_error_incorrect_type
  1837 0000178B 488B7D28                        mov rdi, PARAM(1)
  1838                                          assert_real(rdi)
    42 0000178F 803F12              <1>  cmp byte [%1], %2
    43 00001792 0F855B070000        <1>  jne L_error_incorrect_type
  1839 00001798 F20F104601                      movsd xmm0, qword [rsi + 1]
  1840 0000179D F20F104F01                      movsd xmm1, qword [rdi + 1]
  1841 000017A2 660F2FC1                        comisd xmm0, xmm1
  1842 000017A6 730C                            jae .L_false
  1843 000017A8 48B8-                           mov rax, sob_boolean_true
  1843 000017AA [0300000000000000] 
  1844 000017B2 EB0A                            jmp .L_exit
  1845                                  .L_false:
  1846 000017B4 48B8-                           mov rax, sob_boolean_false
  1846 000017B6 [0200000000000000] 
  1847                                  .L_exit:
  1848                                          LEAVE
    38 000017BE C9                  <1>  leave
  1849 000017BF C22000                          ret AND_KILL_FRAME(2)
  1850                                          
  1851                                  L_code_ptr_raw_less_than_qq:
  1852                                          ENTER
    33 000017C2 C8000000            <1>  enter 0, 0
    34 000017C6 4883E4F0            <1>  and rsp, ~15
  1853 000017CA 48837D1802                      cmp COUNT, 2
  1854 000017CF 0F857F060000                    jne L_error_arg_count_2
  1855 000017D5 488B7520                        mov rsi, PARAM(0)
  1856                                          assert_rational(rsi)
    42 000017D9 803E11              <1>  cmp byte [%1], %2
    43 000017DC 0F8511070000        <1>  jne L_error_incorrect_type
  1857 000017E2 488B7D28                        mov rdi, PARAM(1)
  1858                                          assert_rational(rdi)
    42 000017E6 803F11              <1>  cmp byte [%1], %2
    43 000017E9 0F8504070000        <1>  jne L_error_incorrect_type
  1859 000017EF 488B4601                        mov rax, qword [rsi + 1] ; num1
  1860 000017F3 4899                            cqo
  1861 000017F5 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  1862 000017F9 4889C1                          mov rcx, rax
  1863 000017FC 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
  1864 00001800 4899                            cqo
  1865 00001802 48F76F01                        imul qword [rdi + 1]          ; num2
  1866 00001806 4829C1                          sub rcx, rax
  1867 00001809 7D0C                            jge .L_false
  1868 0000180B 48B8-                           mov rax, sob_boolean_true
  1868 0000180D [0300000000000000] 
  1869 00001815 EB0A                            jmp .L_exit
  1870                                  .L_false:
  1871 00001817 48B8-                           mov rax, sob_boolean_false
  1871 00001819 [0200000000000000] 
  1872                                  .L_exit:
  1873                                          LEAVE
    38 00001821 C9                  <1>  leave
  1874 00001822 C22000                          ret AND_KILL_FRAME(2)
  1875                                  
  1876                                  
  1877                                  L_code_ptr_raw_equal_rr:
  1878                                          ENTER
    33 00001825 C8000000            <1>  enter 0, 0
    34 00001829 4883E4F0            <1>  and rsp, ~15
  1879 0000182D 48837D1802                      cmp COUNT, 2
  1880 00001832 0F851C060000                    jne L_error_arg_count_2
  1881 00001838 488B7520                        mov rsi, PARAM(0)
  1882                                          assert_real(rsi)
    42 0000183C 803E12              <1>  cmp byte [%1], %2
    43 0000183F 0F85AE060000        <1>  jne L_error_incorrect_type
  1883 00001845 488B7D28                        mov rdi, PARAM(1)
  1884                                          assert_real(rdi)
    42 00001849 803F12              <1>  cmp byte [%1], %2
    43 0000184C 0F85A1060000        <1>  jne L_error_incorrect_type
  1885 00001852 F20F104601                      movsd xmm0, qword [rsi + 1]
  1886 00001857 F20F104F01                      movsd xmm1, qword [rdi + 1]
  1887 0000185C 660F2FC1                        comisd xmm0, xmm1
  1888 00001860 750C                            jne .L_false
  1889 00001862 48B8-                           mov rax, sob_boolean_true
  1889 00001864 [0300000000000000] 
  1890 0000186C EB0A                            jmp .L_exit
  1891                                  .L_false:
  1892 0000186E 48B8-                           mov rax, sob_boolean_false
  1892 00001870 [0200000000000000] 
  1893                                  .L_exit:
  1894                                          LEAVE
    38 00001878 C9                  <1>  leave
  1895 00001879 C22000                          ret AND_KILL_FRAME(2)
  1896                                          
  1897                                  L_code_ptr_raw_equal_qq:
  1898                                          ENTER
    33 0000187C C8000000            <1>  enter 0, 0
    34 00001880 4883E4F0            <1>  and rsp, ~15
  1899 00001884 48837D1802                      cmp COUNT, 2
  1900 00001889 0F85C5050000                    jne L_error_arg_count_2
  1901 0000188F 488B7520                        mov rsi, PARAM(0)
  1902                                          assert_rational(rsi)
    42 00001893 803E11              <1>  cmp byte [%1], %2
    43 00001896 0F8557060000        <1>  jne L_error_incorrect_type
  1903 0000189C 488B7D28                        mov rdi, PARAM(1)
  1904                                          assert_rational(rdi)
    42 000018A0 803F11              <1>  cmp byte [%1], %2
    43 000018A3 0F854A060000        <1>  jne L_error_incorrect_type
  1905 000018A9 488B4601                        mov rax, qword [rsi + 1] ; num1
  1906 000018AD 4899                            cqo
  1907 000018AF 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  1908 000018B3 4889C1                          mov rcx, rax
  1909 000018B6 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  1910 000018BA 4899                            cqo
  1911 000018BC 48F76F01                        imul qword [rdi + 1]          ; num2
  1912 000018C0 4829C1                          sub rcx, rax
  1913 000018C3 750C                            jne .L_false
  1914 000018C5 48B8-                           mov rax, sob_boolean_true
  1914 000018C7 [0300000000000000] 
  1915 000018CF EB0A                            jmp .L_exit
  1916                                  .L_false:
  1917 000018D1 48B8-                           mov rax, sob_boolean_false
  1917 000018D3 [0200000000000000] 
  1918                                  .L_exit:
  1919                                          LEAVE
    38 000018DB C9                  <1>  leave
  1920 000018DC C22000                          ret AND_KILL_FRAME(2)
  1921                                  
  1922                                  L_code_ptr_quotient:
  1923                                          ENTER
    33 000018DF C8000000            <1>  enter 0, 0
    34 000018E3 4883E4F0            <1>  and rsp, ~15
  1924 000018E7 48837D1802                      cmp COUNT, 2
  1925 000018EC 0F8562050000                    jne L_error_arg_count_2
  1926 000018F2 488B7520                        mov rsi, PARAM(0)
  1927                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 000018F6 803E11              <2>  cmp byte [%1], %2
    43 000018F9 0F85F4050000        <2>  jne L_error_incorrect_type
    48 000018FF 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001904 0F85E9050000        <1>  jne L_error_incorrect_type
  1928 0000190A 488B7D28                        mov rdi, PARAM(1)
  1929                                          assert_integer(rdi)
    47                              <1>  assert_rational(%1)
    42 0000190E 803F11              <2>  cmp byte [%1], %2
    43 00001911 0F85DC050000        <2>  jne L_error_incorrect_type
    48 00001917 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 0000191C 0F85D1050000        <1>  jne L_error_incorrect_type
  1930 00001922 488B4601                        mov rax, qword [rsi + 1]
  1931 00001926 488B5F01                        mov rbx, qword [rdi + 1]
  1932 0000192A 4883FB00                        cmp rbx, 0
  1933 0000192E 0F84F0050000                    je L_error_division_by_zero
  1934 00001934 4899                            cqo
  1935 00001936 48F7FB                          idiv rbx
  1936 00001939 4889C7                          mov rdi, rax
  1937 0000193C E852040000                      call make_integer
  1938                                          LEAVE
    38 00001941 C9                  <1>  leave
  1939 00001942 C22000                          ret AND_KILL_FRAME(2)
  1940                                          
  1941                                  L_code_ptr_remainder:
  1942                                          ENTER
    33 00001945 C8000000            <1>  enter 0, 0
    34 00001949 4883E4F0            <1>  and rsp, ~15
  1943 0000194D 48837D1802                      cmp COUNT, 2
  1944 00001952 0F85FC040000                    jne L_error_arg_count_2
  1945 00001958 488B7520                        mov rsi, PARAM(0)
  1946                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 0000195C 803E11              <2>  cmp byte [%1], %2
    43 0000195F 0F858E050000        <2>  jne L_error_incorrect_type
    48 00001965 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 0000196A 0F8583050000        <1>  jne L_error_incorrect_type
  1947 00001970 488B7D28                        mov rdi, PARAM(1)
  1948                                          assert_integer(rdi)
    47                              <1>  assert_rational(%1)
    42 00001974 803F11              <2>  cmp byte [%1], %2
    43 00001977 0F8576050000        <2>  jne L_error_incorrect_type
    48 0000197D 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001982 0F856B050000        <1>  jne L_error_incorrect_type
  1949 00001988 488B4601                        mov rax, qword [rsi + 1]
  1950 0000198C 488B5F01                        mov rbx, qword [rdi + 1]
  1951 00001990 4883FB00                        cmp rbx, 0
  1952 00001994 0F848A050000                    je L_error_division_by_zero
  1953 0000199A 4899                            cqo
  1954 0000199C 48F7FB                          idiv rbx
  1955 0000199F 4889D7                          mov rdi, rdx
  1956 000019A2 E8EC030000                      call make_integer
  1957                                          LEAVE
    38 000019A7 C9                  <1>  leave
  1958 000019A8 C22000                          ret AND_KILL_FRAME(2)
  1959                                  
  1960                                  L_code_ptr_set_car:
  1961                                          ENTER
    33 000019AB C8000000            <1>  enter 0, 0
    34 000019AF 4883E4F0            <1>  and rsp, ~15
  1962 000019B3 48837D1802                      cmp COUNT, 2
  1963 000019B8 0F8596040000                    jne L_error_arg_count_2
  1964 000019BE 488B4520                        mov rax, PARAM(0)
  1965                                          assert_pair(rax)
    42 000019C2 803821              <1>  cmp byte [%1], %2
    43 000019C5 0F8528050000        <1>  jne L_error_incorrect_type
  1966 000019CB 488B5D28                        mov rbx, PARAM(1)
  1967 000019CF 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1968 000019D3 48B8-                           mov rax, sob_void
  1968 000019D5 [0000000000000000] 
  1969                                          LEAVE
    38 000019DD C9                  <1>  leave
  1970 000019DE C22000                          ret AND_KILL_FRAME(2)
  1971                                  
  1972                                  L_code_ptr_set_cdr:
  1973                                          ENTER
    33 000019E1 C8000000            <1>  enter 0, 0
    34 000019E5 4883E4F0            <1>  and rsp, ~15
  1974 000019E9 48837D1802                      cmp COUNT, 2
  1975 000019EE 0F8560040000                    jne L_error_arg_count_2
  1976 000019F4 488B4520                        mov rax, PARAM(0)
  1977                                          assert_pair(rax)
    42 000019F8 803821              <1>  cmp byte [%1], %2
    43 000019FB 0F85F2040000        <1>  jne L_error_incorrect_type
  1978 00001A01 488B5D28                        mov rbx, PARAM(1)
  1979 00001A05 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1980 00001A09 48B8-                           mov rax, sob_void
  1980 00001A0B [0000000000000000] 
  1981                                          LEAVE
    38 00001A13 C9                  <1>  leave
  1982 00001A14 C22000                          ret AND_KILL_FRAME(2)
  1983                                  
  1984                                  L_code_ptr_string_ref:
  1985                                          ENTER
    33 00001A17 C8000000            <1>  enter 0, 0
    34 00001A1B 4883E4F0            <1>  and rsp, ~15
  1986 00001A1F 48837D1802                      cmp COUNT, 2
  1987 00001A24 0F852A040000                    jne L_error_arg_count_2
  1988 00001A2A 488B7D20                        mov rdi, PARAM(0)
  1989                                          assert_string(rdi)
    42 00001A2E 803F03              <1>  cmp byte [%1], %2
    43 00001A31 0F85BC040000        <1>  jne L_error_incorrect_type
  1990 00001A37 488B7528                        mov rsi, PARAM(1)
  1991                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001A3B 803E11              <2>  cmp byte [%1], %2
    43 00001A3E 0F85AF040000        <2>  jne L_error_incorrect_type
    48 00001A44 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001A49 0F85A4040000        <1>  jne L_error_incorrect_type
  1992 00001A4F 488B5701                        mov rdx, qword [rdi + 1]
  1993 00001A53 488B4E01                        mov rcx, qword [rsi + 1]
  1994 00001A57 4839D1                          cmp rcx, rdx
  1995 00001A5A 0F8D59030000                    jge L_error_integer_range
  1996 00001A60 4883F900                        cmp rcx, 0
  1997 00001A64 0F8C4F030000                    jl L_error_integer_range
  1998 00001A6A 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
  1999 00001A6E BF02000000                      mov rdi, 2
  2000 00001A73 E836EDFFFF                      call malloc
  2001 00001A78 C60002                          mov byte [rax], T_char
  2002 00001A7B 885801                          mov byte [rax + 1], bl
  2003                                          LEAVE
    38 00001A7E C9                  <1>  leave
  2004 00001A7F C22000                          ret AND_KILL_FRAME(2)
  2005                                  
  2006                                  L_code_ptr_vector_ref:
  2007                                          ENTER
    33 00001A82 C8000000            <1>  enter 0, 0
    34 00001A86 4883E4F0            <1>  and rsp, ~15
  2008 00001A8A 48837D1802                      cmp COUNT, 2
  2009 00001A8F 0F85BF030000                    jne L_error_arg_count_2
  2010 00001A95 488B7D20                        mov rdi, PARAM(0)
  2011                                          assert_vector(rdi)
    42 00001A99 803F22              <1>  cmp byte [%1], %2
    43 00001A9C 0F8551040000        <1>  jne L_error_incorrect_type
  2012 00001AA2 488B7528                        mov rsi, PARAM(1)
  2013                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001AA6 803E11              <2>  cmp byte [%1], %2
    43 00001AA9 0F8544040000        <2>  jne L_error_incorrect_type
    48 00001AAF 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001AB4 0F8539040000        <1>  jne L_error_incorrect_type
  2014 00001ABA 488B5701                        mov rdx, qword [rdi + 1]
  2015 00001ABE 488B4E01                        mov rcx, qword [rsi + 1]
  2016 00001AC2 4839D1                          cmp rcx, rdx
  2017 00001AC5 0F8DEE020000                    jge L_error_integer_range
  2018 00001ACB 4883F900                        cmp rcx, 0
  2019 00001ACF 0F8CE4020000                    jl L_error_integer_range
  2020 00001AD5 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
  2021                                          LEAVE
    38 00001ADA C9                  <1>  leave
  2022 00001ADB C22000                          ret AND_KILL_FRAME(2)
  2023                                  
  2024                                  L_code_ptr_vector_set:
  2025                                          ENTER
    33 00001ADE C8000000            <1>  enter 0, 0
    34 00001AE2 4883E4F0            <1>  and rsp, ~15
  2026 00001AE6 48837D1803                      cmp COUNT, 3
  2027 00001AEB 0F85CD030000                    jne L_error_arg_count_3
  2028 00001AF1 488B7D20                        mov rdi, PARAM(0)
  2029                                          assert_vector(rdi)
    42 00001AF5 803F22              <1>  cmp byte [%1], %2
    43 00001AF8 0F85F5030000        <1>  jne L_error_incorrect_type
  2030 00001AFE 488B7528                        mov rsi, PARAM(1)
  2031                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001B02 803E11              <2>  cmp byte [%1], %2
    43 00001B05 0F85E8030000        <2>  jne L_error_incorrect_type
    48 00001B0B 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001B10 0F85DD030000        <1>  jne L_error_incorrect_type
  2032 00001B16 488B5701                        mov rdx, qword [rdi + 1]
  2033 00001B1A 488B4E01                        mov rcx, qword [rsi + 1]
  2034 00001B1E 4839D1                          cmp rcx, rdx
  2035 00001B21 0F8D92020000                    jge L_error_integer_range
  2036 00001B27 4883F900                        cmp rcx, 0
  2037 00001B2B 0F8C88020000                    jl L_error_integer_range
  2038 00001B31 488B4530                        mov rax, PARAM(2)
  2039 00001B35 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
  2040 00001B3A 48B8-                           mov rax, sob_void
  2040 00001B3C [0000000000000000] 
  2041                                          LEAVE
    38 00001B44 C9                  <1>  leave
  2042 00001B45 C22800                          ret AND_KILL_FRAME(3)
  2043                                  
  2044                                  L_code_ptr_string_set:
  2045                                          ENTER
    33 00001B48 C8000000            <1>  enter 0, 0
    34 00001B4C 4883E4F0            <1>  and rsp, ~15
  2046 00001B50 48837D1803                      cmp COUNT, 3
  2047 00001B55 0F8563030000                    jne L_error_arg_count_3
  2048 00001B5B 488B7D20                        mov rdi, PARAM(0)
  2049                                          assert_string(rdi)
    42 00001B5F 803F03              <1>  cmp byte [%1], %2
    43 00001B62 0F858B030000        <1>  jne L_error_incorrect_type
  2050 00001B68 488B7528                        mov rsi, PARAM(1)
  2051                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001B6C 803E11              <2>  cmp byte [%1], %2
    43 00001B6F 0F857E030000        <2>  jne L_error_incorrect_type
    48 00001B75 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001B7A 0F8573030000        <1>  jne L_error_incorrect_type
  2052 00001B80 488B5701                        mov rdx, qword [rdi + 1]
  2053 00001B84 488B4E01                        mov rcx, qword [rsi + 1]
  2054 00001B88 4839D1                          cmp rcx, rdx
  2055 00001B8B 0F8D28020000                    jge L_error_integer_range
  2056 00001B91 4883F900                        cmp rcx, 0
  2057 00001B95 0F8C1E020000                    jl L_error_integer_range
  2058 00001B9B 488B4530                        mov rax, PARAM(2)
  2059                                          assert_char(rax)
    42 00001B9F 803802              <1>  cmp byte [%1], %2
    43 00001BA2 0F854B030000        <1>  jne L_error_incorrect_type
  2060 00001BA8 8A4001                          mov al, byte [rax + 1]
  2061 00001BAB 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
  2062 00001BAF 48B8-                           mov rax, sob_void
  2062 00001BB1 [0000000000000000] 
  2063                                          LEAVE
    38 00001BB9 C9                  <1>  leave
  2064 00001BBA C22800                          ret AND_KILL_FRAME(3)
  2065                                  
  2066                                  L_code_ptr_make_vector:
  2067                                          ENTER
    33 00001BBD C8000000            <1>  enter 0, 0
    34 00001BC1 4883E4F0            <1>  and rsp, ~15
  2068 00001BC5 48837D1802                      cmp COUNT, 2
  2069 00001BCA 0F8584020000                    jne L_error_arg_count_2
  2070 00001BD0 488B4D20                        mov rcx, PARAM(0)
  2071                                          assert_integer(rcx)
    47                              <1>  assert_rational(%1)
    42 00001BD4 803911              <2>  cmp byte [%1], %2
    43 00001BD7 0F8516030000        <2>  jne L_error_incorrect_type
    48 00001BDD 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001BE2 0F850B030000        <1>  jne L_error_incorrect_type
  2072 00001BE8 488B4901                        mov rcx, qword [rcx + 1]
  2073 00001BEC 4883F900                        cmp rcx, 0
  2074 00001BF0 0F8CC3010000                    jl L_error_integer_range
  2075 00001BF6 488B5528                        mov rdx, PARAM(1)
  2076 00001BFA 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
  2077 00001C02 E8A7EBFFFF                      call malloc
  2078 00001C07 C60022                          mov byte [rax], T_vector
  2079 00001C0A 48894801                        mov qword [rax + 1], rcx
  2080 00001C0E 41B800000000                    mov r8, 0
  2081                                  .L0:
  2082 00001C14 4939C8                          cmp r8, rcx
  2083 00001C17 740A                            je .L1
  2084 00001C19 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
  2085 00001C1E 49FFC0                          inc r8
  2086 00001C21 EBF1                            jmp .L0
  2087                                  .L1:
  2088                                          LEAVE
    38 00001C23 C9                  <1>  leave
  2089 00001C24 C22000                          ret AND_KILL_FRAME(2)
  2090                                          
  2091                                  L_code_ptr_make_string:
  2092                                          ENTER
    33 00001C27 C8000000            <1>  enter 0, 0
    34 00001C2B 4883E4F0            <1>  and rsp, ~15
  2093 00001C2F 48837D1802                      cmp COUNT, 2
  2094 00001C34 0F851A020000                    jne L_error_arg_count_2
  2095 00001C3A 488B4D20                        mov rcx, PARAM(0)
  2096                                          assert_integer(rcx)
    47                              <1>  assert_rational(%1)
    42 00001C3E 803911              <2>  cmp byte [%1], %2
    43 00001C41 0F85AC020000        <2>  jne L_error_incorrect_type
    48 00001C47 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001C4C 0F85A1020000        <1>  jne L_error_incorrect_type
  2097 00001C52 488B4901                        mov rcx, qword [rcx + 1]
  2098 00001C56 4883F900                        cmp rcx, 0
  2099 00001C5A 0F8C59010000                    jl L_error_integer_range
  2100 00001C60 488B5528                        mov rdx, PARAM(1)
  2101                                          assert_char(rdx)
    42 00001C64 803A02              <1>  cmp byte [%1], %2
    43 00001C67 0F8586020000        <1>  jne L_error_incorrect_type
  2102 00001C6D 8A5201                          mov dl, byte [rdx + 1]
  2103 00001C70 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
  2104 00001C74 E835EBFFFF                      call malloc
  2105 00001C79 C60003                          mov byte [rax], T_string
  2106 00001C7C 48894801                        mov qword [rax + 1], rcx
  2107 00001C80 41B800000000                    mov r8, 0
  2108                                  .L0:
  2109 00001C86 4939C8                          cmp r8, rcx
  2110 00001C89 740A                            je .L1
  2111 00001C8B 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
  2112 00001C90 49FFC0                          inc r8
  2113 00001C93 EBF1                            jmp .L0
  2114                                  .L1:
  2115                                          LEAVE
    38 00001C95 C9                  <1>  leave
  2116 00001C96 C22000                          ret AND_KILL_FRAME(2)
  2117                                  
  2118                                  L_code_ptr_numerator:
  2119                                          ENTER
    33 00001C99 C8000000            <1>  enter 0, 0
    34 00001C9D 4883E4F0            <1>  and rsp, ~15
  2120 00001CA1 48837D1801                      cmp COUNT, 1
  2121 00001CA6 0F8573010000                    jne L_error_arg_count_1
  2122 00001CAC 488B4520                        mov rax, PARAM(0)
  2123                                          assert_rational(rax)
    42 00001CB0 803811              <1>  cmp byte [%1], %2
    43 00001CB3 0F853A020000        <1>  jne L_error_incorrect_type
  2124 00001CB9 488B7801                        mov rdi, qword [rax + 1]
  2125 00001CBD E8D1000000                      call make_integer
  2126                                          LEAVE
    38 00001CC2 C9                  <1>  leave
  2127 00001CC3 C21800                          ret AND_KILL_FRAME(1)
  2128                                          
  2129                                  L_code_ptr_denominator:
  2130                                          ENTER
    33 00001CC6 C8000000            <1>  enter 0, 0
    34 00001CCA 4883E4F0            <1>  and rsp, ~15
  2131 00001CCE 48837D1801                      cmp COUNT, 1
  2132 00001CD3 0F8546010000                    jne L_error_arg_count_1
  2133 00001CD9 488B4520                        mov rax, PARAM(0)
  2134                                          assert_rational(rax)
    42 00001CDD 803811              <1>  cmp byte [%1], %2
    43 00001CE0 0F850D020000        <1>  jne L_error_incorrect_type
  2135 00001CE6 488B7809                        mov rdi, qword [rax + 1 + 8]
  2136 00001CEA E8A4000000                      call make_integer
  2137                                          LEAVE
    38 00001CEF C9                  <1>  leave
  2138 00001CF0 C21800                          ret AND_KILL_FRAME(1)
  2139                                  
  2140                                  L_code_ptr_eq:
  2141                                  	ENTER
    33 00001CF3 C8000000            <1>  enter 0, 0
    34 00001CF7 4883E4F0            <1>  and rsp, ~15
  2142 00001CFB 48837D1802              	cmp COUNT, 2
  2143 00001D00 0F854E010000            	jne L_error_arg_count_2
  2144 00001D06 488B7D20                	mov rdi, PARAM(0)
  2145 00001D0A 488B7528                	mov rsi, PARAM(1)
  2146 00001D0E 4839F7                  	cmp rdi, rsi
  2147 00001D11 744A                    	je .L_eq_true
  2148 00001D13 8A17                    	mov dl, byte [rdi]
  2149 00001D15 3A16                    	cmp dl, byte [rsi]
  2150 00001D17 7550                    	jne .L_eq_false
  2151 00001D19 80FA02                  	cmp dl, T_char
  2152 00001D1C 7437                    	je .L_char
  2153 00001D1E 80FA04                  	cmp dl, T_symbol
  2154 00001D21 742A                    	je .L_symbol
  2155 00001D23 80FA12                  	cmp dl, T_real
  2156 00001D26 741D                    	je .L_real
  2157 00001D28 80FA11                  	cmp dl, T_rational
  2158 00001D2B 7402                    	je .L_rational
  2159 00001D2D EB3A                    	jmp .L_eq_false
  2160                                  .L_rational:
  2161 00001D2F 488B4601                	mov rax, qword [rsi + 1]
  2162 00001D33 483B4701                	cmp rax, qword [rdi + 1]
  2163 00001D37 7530                    	jne .L_eq_false
  2164 00001D39 488B4609                	mov rax, qword [rsi + 1 + 8]
  2165 00001D3D 483B4709                	cmp rax, qword [rdi + 1 + 8]
  2166 00001D41 7526                    	jne .L_eq_false
  2167 00001D43 EB18                    	jmp .L_eq_true
  2168                                  .L_real:
  2169 00001D45 488B4601                	mov rax, qword [rsi + 1]
  2170 00001D49 483B4701                	cmp rax, qword [rdi + 1]
  2171                                  .L_symbol:
  2172                                  	; never reached, because symbols are static!
  2173                                  	; but I'm keeping it in case, I'll ever change
  2174                                  	; the implementation
  2175 00001D4D 488B4601                	mov rax, qword [rsi + 1]
  2176 00001D51 483B4701                	cmp rax, qword [rdi + 1]
  2177                                  .L_char:
  2178 00001D55 8A5E01                  	mov bl, byte [rsi + 1]
  2179 00001D58 3A5F01                  	cmp bl, byte [rdi + 1]
  2180 00001D5B 750C                    	jne .L_eq_false
  2181                                  .L_eq_true:
  2182 00001D5D 48B8-                   	mov rax, sob_boolean_true
  2182 00001D5F [0300000000000000] 
  2183 00001D67 EB0A                    	jmp .L_eq_exit
  2184                                  .L_eq_false:
  2185 00001D69 48B8-                   	mov rax, sob_boolean_false
  2185 00001D6B [0200000000000000] 
  2186                                  .L_eq_exit:
  2187                                  	LEAVE
    38 00001D73 C9                  <1>  leave
  2188 00001D74 C22000                  	ret AND_KILL_FRAME(2)
  2189                                  
  2190                                  make_real:
  2191                                          ENTER
    33 00001D77 C8000000            <1>  enter 0, 0
    34 00001D7B 4883E4F0            <1>  and rsp, ~15
  2192 00001D7F BF09000000                      mov rdi, (1 + 8)
  2193 00001D84 E825EAFFFF                      call malloc
  2194 00001D89 C60012                          mov byte [rax], T_real
  2195 00001D8C F20F114001                      movsd qword [rax + 1], xmm0
  2196                                          LEAVE
    38 00001D91 C9                  <1>  leave
  2197 00001D92 C3                              ret
  2198                                          
  2199                                  make_integer:
  2200                                          ENTER
    33 00001D93 C8000000            <1>  enter 0, 0
    34 00001D97 4883E4F0            <1>  and rsp, ~15
  2201 00001D9B 4889FE                          mov rsi, rdi
  2202 00001D9E BF11000000                      mov rdi, (1 + 8 + 8)
  2203 00001DA3 E806EAFFFF                      call malloc
  2204 00001DA8 C60011                          mov byte [rax], T_rational
  2205 00001DAB 48897001                        mov qword [rax + 1], rsi
  2206 00001DAF 48C7400901000000                mov qword [rax + 1 + 8], 1
  2207                                          LEAVE
    38 00001DB7 C9                  <1>  leave
  2208 00001DB8 C3                              ret
  2209                                          
  2210                                  L_error_integer_range:
  2211 00001DB9 488B3C25[00000000]              mov rdi, qword [stderr]
  2212 00001DC1 48BE-                           mov rsi, fmt_integer_range
  2212 00001DC3 [3C03000000000000] 
  2213 00001DCB B800000000                      mov rax, 0
  2214                                  	ENTER
    33 00001DD0 C8000000            <1>  enter 0, 0
    34 00001DD4 4883E4F0            <1>  and rsp, ~15
  2215 00001DD8 E8(00000000)                    call fprintf
  2216                                  	LEAVE
    38 00001DDD C9                  <1>  leave
  2217 00001DDE 48C7C0FBFFFFFF                  mov rax, -5
  2218 00001DE5 E8(00000000)                    call exit
  2219                                  
  2220                                  L_error_arg_count_0:
  2221 00001DEA 488B3C25[00000000]              mov rdi, qword [stderr]
  2222 00001DF2 48BE-                           mov rsi, fmt_arg_count_0
  2222 00001DF4 [3A02000000000000] 
  2223 00001DFC 488B5518                        mov rdx, COUNT
  2224 00001E00 B800000000                      mov rax, 0
  2225                                  	ENTER
    33 00001E05 C8000000            <1>  enter 0, 0
    34 00001E09 4883E4F0            <1>  and rsp, ~15
  2226 00001E0D E8(00000000)                    call fprintf
  2227                                  	LEAVE
    38 00001E12 C9                  <1>  leave
  2228 00001E13 48C7C0FDFFFFFF                  mov rax, -3
  2229 00001E1A E8(00000000)                    call exit
  2230                                  
  2231                                  L_error_arg_count_1:
  2232 00001E1F 488B3C25[00000000]              mov rdi, qword [stderr]
  2233 00001E27 48BE-                           mov rsi, fmt_arg_count_1
  2233 00001E29 [6202000000000000] 
  2234 00001E31 488B5518                        mov rdx, COUNT
  2235 00001E35 B800000000                      mov rax, 0
  2236                                  	ENTER
    33 00001E3A C8000000            <1>  enter 0, 0
    34 00001E3E 4883E4F0            <1>  and rsp, ~15
  2237 00001E42 E8(00000000)                    call fprintf
  2238                                  	LEAVE
    38 00001E47 C9                  <1>  leave
  2239 00001E48 48C7C0FDFFFFFF                  mov rax, -3
  2240 00001E4F E8(00000000)                    call exit
  2241                                  
  2242                                  L_error_arg_count_2:
  2243 00001E54 488B3C25[00000000]              mov rdi, qword [stderr]
  2244 00001E5C 48BE-                           mov rsi, fmt_arg_count_2
  2244 00001E5E [C802000000000000] 
  2245 00001E66 488B5518                        mov rdx, COUNT
  2246 00001E6A B800000000                      mov rax, 0
  2247                                  	ENTER
    33 00001E6F C8000000            <1>  enter 0, 0
    34 00001E73 4883E4F0            <1>  and rsp, ~15
  2248 00001E77 E8(00000000)                    call fprintf
  2249                                  	LEAVE
    38 00001E7C C9                  <1>  leave
  2250 00001E7D 48C7C0FDFFFFFF                  mov rax, -3
  2251 00001E84 E8(00000000)                    call exit
  2252                                  
  2253                                  L_error_arg_count_12:
  2254 00001E89 488B3C25[00000000]              mov rdi, qword [stderr]
  2255 00001E91 48BE-                           mov rsi, fmt_arg_count_12
  2255 00001E93 [8802000000000000] 
  2256 00001E9B 488B5518                        mov rdx, COUNT
  2257 00001E9F B800000000                      mov rax, 0
  2258                                  	ENTER
    33 00001EA4 C8000000            <1>  enter 0, 0
    34 00001EA8 4883E4F0            <1>  and rsp, ~15
  2259 00001EAC E8(00000000)                    call fprintf
  2260                                  	LEAVE
    38 00001EB1 C9                  <1>  leave
  2261 00001EB2 48C7C0FDFFFFFF                  mov rax, -3
  2262 00001EB9 E8(00000000)                    call exit
  2263                                  
  2264                                  L_error_arg_count_3:
  2265 00001EBE 488B3C25[00000000]              mov rdi, qword [stderr]
  2266 00001EC6 48BE-                           mov rsi, fmt_arg_count_3
  2266 00001EC8 [EF02000000000000] 
  2267 00001ED0 488B5518                        mov rdx, COUNT
  2268 00001ED4 B800000000                      mov rax, 0
  2269                                  	ENTER
    33 00001ED9 C8000000            <1>  enter 0, 0
    34 00001EDD 4883E4F0            <1>  and rsp, ~15
  2270 00001EE1 E8(00000000)                    call fprintf
  2271                                  	LEAVE
    38 00001EE6 C9                  <1>  leave
  2272 00001EE7 48C7C0FDFFFFFF                  mov rax, -3
  2273 00001EEE E8(00000000)                    call exit
  2274                                          
  2275                                  L_error_incorrect_type:
  2276 00001EF3 488B3C25[00000000]              mov rdi, qword [stderr]
  2277 00001EFB 48BE-                           mov rsi, fmt_type
  2277 00001EFD [1803000000000000] 
  2278 00001F05 B800000000                      mov rax, 0
  2279                                  	ENTER
    33 00001F0A C8000000            <1>  enter 0, 0
    34 00001F0E 4883E4F0            <1>  and rsp, ~15
  2280 00001F12 E8(00000000)                    call fprintf
  2281                                  	LEAVE
    38 00001F17 C9                  <1>  leave
  2282 00001F18 48C7C0FCFFFFFF                  mov rax, -4
  2283 00001F1F E8(00000000)                    call exit
  2284                                  
  2285                                  L_error_division_by_zero:
  2286 00001F24 488B3C25[00000000]              mov rdi, qword [stderr]
  2287 00001F2C 48BE-                           mov rsi, fmt_division_by_zero
  2287 00001F2E [5903000000000000] 
  2288 00001F36 B800000000                      mov rax, 0
  2289                                  	ENTER
    33 00001F3B C8000000            <1>  enter 0, 0
    34 00001F3F 4883E4F0            <1>  and rsp, ~15
  2290 00001F43 E8(00000000)                    call fprintf
  2291                                  	LEAVE
    38 00001F48 C9                  <1>  leave
  2292 00001F49 48C7C0F8FFFFFF                  mov rax, -8
  2293 00001F50 E8(00000000)                    call exit
  2294                                  
  2295                                  section .data
  2296                                  fmt_char:
  2297 00000237 256300                          db `%c\0`
  2298                                  fmt_arg_count_0:
  2299 0000023A 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
  2299 00000243 74696E67207A65726F-
  2299 0000024C 20617267756D656E74-
  2299 00000255 732E20466F756E6420-
  2299 0000025E 25640A00           
  2300                                  fmt_arg_count_1:
  2301 00000262 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
  2301 0000026B 74696E67206F6E6520-
  2301 00000274 617267756D656E742E-
  2301 0000027D 20466F756E64202564-
  2301 00000286 0A00               
  2302                                  fmt_arg_count_12:
  2303 00000288 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
  2303 00000291 74696E67206F6E6520-
  2303 0000029A 726571756972656420-
  2303 000002A3 616E64206F6E65206F-
  2303 000002AC 7074696F6E616C2061-
  2303 000002B5 7267756D656E742E20-
  2303 000002BE 466F756E642025640A-
  2303 000002C7 00                 
  2304                                  fmt_arg_count_2:
  2305 000002C8 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
  2305 000002D1 74696E672074776F20-
  2305 000002DA 617267756D656E7473-
  2305 000002E3 2E20466F756E642025-
  2305 000002EC 640A00             
  2306                                  fmt_arg_count_3:
  2307 000002EF 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
  2307 000002F8 74696E672074687265-
  2307 00000301 6520617267756D656E-
  2307 0000030A 74732E20466F756E64-
  2307 00000313 2025640A00         
  2308                                  fmt_type:
  2309 00000318 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
  2309 00000321 696F6E207061737365-
  2309 0000032A 6420696E636F727265-
  2309 00000333 637420747970650A00 
  2310                                  fmt_integer_range:
  2311 0000033C 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
  2311 00000345 7265637420696E7465-
  2311 0000034E 6765722072616E6765-
  2311 00000357 0A00               
  2312                                  fmt_division_by_zero:
  2313 00000359 212121204469766973-             db `!!! Division by zero\n\0`
  2313 00000362 696F6E206279207A65-
  2313 0000036B 726F0A00           
  2314                                  fmt_scheme_error_part_1:
  2315 0000036F 0A2121212054686520-             db `\n!!! The procedure \0`
  2315 00000378 70726F636564757265-
  2315 00000381 2000               
  2316                                  fmt_scheme_error_part_2:
  2317 00000383 2061736B656420746F-             db ` asked to terminate the program\n`
  2317 0000038C 207465726D696E6174-
  2317 00000395 65207468652070726F-
  2317 0000039E 6772616D0A         
  2318 000003A3 202020207769746820-             db `    with the following message:\n\n\0`
  2318 000003AC 74686520666F6C6C6F-
  2318 000003B5 77696E67206D657373-
  2318 000003BE 6167653A0A0A00     
  2319                                  fmt_scheme_error_part_3:
  2320 000003C5 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
  2320 000003CE 210A0A00           
