     1                                  %define T_void 				0
     2                                  %define T_nil 				1
     3                                  %define T_char 				2
     4                                  %define T_string 			3
     5                                  %define T_symbol 			4
     6                                  %define T_closure 			5
     7                                  %define T_boolean 			8
     8                                  %define T_boolean_false 		(T_boolean | 1)
     9                                  %define T_boolean_true 			(T_boolean | 2)
    10                                  %define T_number 			16
    11                                  %define T_rational 			(T_number | 1)
    12                                  %define T_real 				(T_number | 2)
    13                                  %define T_collection 			32
    14                                  %define T_pair 				(T_collection | 1)
    15                                  %define T_vector 			(T_collection | 2)
    16                                  
    17                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    18                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    19                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    20                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    21                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    22                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    23                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    24                                  
    25                                  %define OLD_RDP 			qword [rbp]
    26                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    27                                  %define ENV 				qword [rbp + 8 * 2]
    28                                  %define COUNT 				qword [rbp + 8 * 3]
    29                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    30                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    31                                  
    32                                  %macro ENTER 0
    33                                  	enter 0, 0
    34                                  	and rsp, ~15
    35                                  %endmacro
    36                                  
    37                                  %macro LEAVE 0
    38                                  	leave
    39                                  %endmacro
    40                                  
    41                                  %macro assert_type 2
    42                                          cmp byte [%1], %2
    43                                          jne L_error_incorrect_type
    44                                  %endmacro
    45                                  
    46                                  %macro assert_type_integer 1
    47                                          assert_rational(%1)
    48                                          cmp qword [%1 + 1 + 8], 1
    49                                          jne L_error_incorrect_type
    50                                  %endmacro
    51                                  
    52                                  %define assert_void(reg)		assert_type reg, T_void
    53                                  %define assert_nil(reg)			assert_type reg, T_nil
    54                                  %define assert_char(reg)		assert_type reg, T_char
    55                                  %define assert_string(reg)		assert_type reg, T_string
    56                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    57                                  %define assert_closure(reg)		assert_type reg, T_closure
    58                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    59                                  %define assert_rational(reg)		assert_type reg, T_rational
    60                                  %define assert_integer(reg)		assert_type_integer reg
    61                                  %define assert_real(reg)		assert_type reg, T_real
    62                                  %define assert_pair(reg)		assert_type reg, T_pair
    63                                  %define assert_vector(reg)		assert_type reg, T_vector
    64                                  
    65                                  %define sob_void			(L_constants + 0)
    66                                  %define sob_nil				(L_constants + 1)
    67                                  %define sob_boolean_false		(L_constants + 2)
    68                                  %define sob_boolean_true		(L_constants + 3)
    69                                  %define sob_char_nul			(L_constants + 4)
    70                                  
    71                                  %define bytes(n)			(n)
    72                                  %define kbytes(n) 			(bytes(n) << 10)
    73                                  %define mbytes(n) 			(kbytes(n) << 10)
    74                                  %define gbytes(n) 			(mbytes(n) << 10)
    75                                  
    76                                  section .data
    77                                  L_constants:
    78 00000000 00                      	db T_void
    79 00000001 01                      	db T_nil
    80 00000002 09                      	db T_boolean_false
    81 00000003 0A                      	db T_boolean_true
    82 00000004 0200                    	db T_char, 0x00	; #\x0
    83 00000006 11                      	db T_rational	; 2
    84 00000007 020000000000000001-     	dq 2, 1
    84 00000010 00000000000000     
    85 00000017 11                      	db T_rational	; 1
    86 00000018 010000000000000001-     	dq 1, 1
    86 00000021 00000000000000     
    87                                  
    88                                  section .bss
    89                                  free_var_0:	; location of null?
    90 00000000 ????????????????        	resq 1
    91                                  free_var_1:	; location of pair?
    92 00000008 ????????????????        	resq 1
    93                                  free_var_2:	; location of void?
    94 00000010 ????????????????        	resq 1
    95                                  free_var_3:	; location of char?
    96 00000018 ????????????????        	resq 1
    97                                  free_var_4:	; location of string?
    98 00000020 ????????????????        	resq 1
    99                                  free_var_5:	; location of symbol?
   100 00000028 ????????????????        	resq 1
   101                                  free_var_6:	; location of vector?
   102 00000030 ????????????????        	resq 1
   103                                  free_var_7:	; location of procedure?
   104 00000038 ????????????????        	resq 1
   105                                  free_var_8:	; location of real?
   106 00000040 ????????????????        	resq 1
   107                                  free_var_9:	; location of rational?
   108 00000048 ????????????????        	resq 1
   109                                  free_var_10:	; location of boolean?
   110 00000050 ????????????????        	resq 1
   111                                  free_var_11:	; location of number?
   112 00000058 ????????????????        	resq 1
   113                                  free_var_12:	; location of collection?
   114 00000060 ????????????????        	resq 1
   115                                  free_var_13:	; location of cons
   116 00000068 ????????????????        	resq 1
   117                                  free_var_14:	; location of display-sexpr
   118 00000070 ????????????????        	resq 1
   119                                  free_var_15:	; location of write-char
   120 00000078 ????????????????        	resq 1
   121                                  free_var_16:	; location of car
   122 00000080 ????????????????        	resq 1
   123                                  free_var_17:	; location of cdr
   124 00000088 ????????????????        	resq 1
   125                                  free_var_18:	; location of string-length
   126 00000090 ????????????????        	resq 1
   127                                  free_var_19:	; location of vector-length
   128 00000098 ????????????????        	resq 1
   129                                  free_var_20:	; location of real->integer
   130 000000A0 ????????????????        	resq 1
   131                                  free_var_21:	; location of exit
   132 000000A8 ????????????????        	resq 1
   133                                  free_var_22:	; location of integer->real
   134 000000B0 ????????????????        	resq 1
   135                                  free_var_23:	; location of rational->real
   136 000000B8 ????????????????        	resq 1
   137                                  free_var_24:	; location of char->integer
   138 000000C0 ????????????????        	resq 1
   139                                  free_var_25:	; location of integer->char
   140 000000C8 ????????????????        	resq 1
   141                                  free_var_26:	; location of trng
   142 000000D0 ????????????????        	resq 1
   143                                  free_var_27:	; location of zero?
   144 000000D8 ????????????????        	resq 1
   145                                  free_var_28:	; location of integer?
   146 000000E0 ????????????????        	resq 1
   147                                  free_var_29:	; location of __bin-apply
   148 000000E8 ????????????????        	resq 1
   149                                  free_var_30:	; location of __bin-add-rr
   150 000000F0 ????????????????        	resq 1
   151                                  free_var_31:	; location of __bin-sub-rr
   152 000000F8 ????????????????        	resq 1
   153                                  free_var_32:	; location of __bin-mul-rr
   154 00000100 ????????????????        	resq 1
   155                                  free_var_33:	; location of __bin-div-rr
   156 00000108 ????????????????        	resq 1
   157                                  free_var_34:	; location of __bin-add-qq
   158 00000110 ????????????????        	resq 1
   159                                  free_var_35:	; location of __bin-sub-qq
   160 00000118 ????????????????        	resq 1
   161                                  free_var_36:	; location of __bin-mul-qq
   162 00000120 ????????????????        	resq 1
   163                                  free_var_37:	; location of __bin-div-qq
   164 00000128 ????????????????        	resq 1
   165                                  free_var_38:	; location of error
   166 00000130 ????????????????        	resq 1
   167                                  free_var_39:	; location of __bin-less-than-rr
   168 00000138 ????????????????        	resq 1
   169                                  free_var_40:	; location of __bin-less-than-qq
   170 00000140 ????????????????        	resq 1
   171                                  free_var_41:	; location of __bin-equal-rr
   172 00000148 ????????????????        	resq 1
   173                                  free_var_42:	; location of __bin-equal-qq
   174 00000150 ????????????????        	resq 1
   175                                  free_var_43:	; location of quotient
   176 00000158 ????????????????        	resq 1
   177                                  free_var_44:	; location of remainder
   178 00000160 ????????????????        	resq 1
   179                                  free_var_45:	; location of set-car!
   180 00000168 ????????????????        	resq 1
   181                                  free_var_46:	; location of set-cdr!
   182 00000170 ????????????????        	resq 1
   183                                  free_var_47:	; location of string-ref
   184 00000178 ????????????????        	resq 1
   185                                  free_var_48:	; location of vector-ref
   186 00000180 ????????????????        	resq 1
   187                                  free_var_49:	; location of vector-set!
   188 00000188 ????????????????        	resq 1
   189                                  free_var_50:	; location of string-set!
   190 00000190 ????????????????        	resq 1
   191                                  free_var_51:	; location of make-vector
   192 00000198 ????????????????        	resq 1
   193                                  free_var_52:	; location of make-string
   194 000001A0 ????????????????        	resq 1
   195                                  free_var_53:	; location of numerator
   196 000001A8 ????????????????        	resq 1
   197                                  free_var_54:	; location of denominator
   198 000001B0 ????????????????        	resq 1
   199                                  free_var_55:	; location of eq?
   200 000001B8 ????????????????        	resq 1
   201                                  
   202                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar
   203                                  global main
   204                                  section .text
   205                                  main:
   206 00000000 C8000000                        enter 0, 0
   207                                          
   208                                  	; building closure for null?
   209 00000004 48BF-                   	mov rdi, free_var_0
   209 00000006 [0000000000000000] 
   210 0000000E 48BE-                   	mov rsi, L_code_ptr_is_null
   210 00000010 [5D0D000000000000] 
   211 00000018 E8180D0000              	call bind_primitive
   212                                  
   213                                  	; building closure for pair?
   214 0000001D 48BF-                   	mov rdi, free_var_1
   214 0000001F [0800000000000000] 
   215 00000027 48BE-                   	mov rsi, L_code_ptr_is_pair
   215 00000029 [930D000000000000] 
   216 00000031 E8FF0C0000              	call bind_primitive
   217                                  
   218                                  	; building closure for void?
   219 00000036 48BF-                   	mov rdi, free_var_2
   219 00000038 [1000000000000000] 
   220 00000040 48BE-                   	mov rsi, L_code_ptr_is_void
   220 00000042 [C90D000000000000] 
   221 0000004A E8E60C0000              	call bind_primitive
   222                                  
   223                                  	; building closure for char?
   224 0000004F 48BF-                   	mov rdi, free_var_3
   224 00000051 [1800000000000000] 
   225 00000059 48BE-                   	mov rsi, L_code_ptr_is_char
   225 0000005B [FF0D000000000000] 
   226 00000063 E8CD0C0000              	call bind_primitive
   227                                  
   228                                  	; building closure for string?
   229 00000068 48BF-                   	mov rdi, free_var_4
   229 0000006A [2000000000000000] 
   230 00000072 48BE-                   	mov rsi, L_code_ptr_is_string
   230 00000074 [350E000000000000] 
   231 0000007C E8B40C0000              	call bind_primitive
   232                                  
   233                                  	; building closure for symbol?
   234 00000081 48BF-                   	mov rdi, free_var_5
   234 00000083 [2800000000000000] 
   235 0000008B 48BE-                   	mov rsi, L_code_ptr_is_symbol
   235 0000008D [6B0E000000000000] 
   236 00000095 E89B0C0000              	call bind_primitive
   237                                  
   238                                  	; building closure for vector?
   239 0000009A 48BF-                   	mov rdi, free_var_6
   239 0000009C [3000000000000000] 
   240 000000A4 48BE-                   	mov rsi, L_code_ptr_is_vector
   240 000000A6 [A10E000000000000] 
   241 000000AE E8820C0000              	call bind_primitive
   242                                  
   243                                  	; building closure for procedure?
   244 000000B3 48BF-                   	mov rdi, free_var_7
   244 000000B5 [3800000000000000] 
   245 000000BD 48BE-                   	mov rsi, L_code_ptr_is_closure
   245 000000BF [D70E000000000000] 
   246 000000C7 E8690C0000              	call bind_primitive
   247                                  
   248                                  	; building closure for real?
   249 000000CC 48BF-                   	mov rdi, free_var_8
   249 000000CE [4000000000000000] 
   250 000000D6 48BE-                   	mov rsi, L_code_ptr_is_real
   250 000000D8 [0D0F000000000000] 
   251 000000E0 E8500C0000              	call bind_primitive
   252                                  
   253                                  	; building closure for rational?
   254 000000E5 48BF-                   	mov rdi, free_var_9
   254 000000E7 [4800000000000000] 
   255 000000EF 48BE-                   	mov rsi, L_code_ptr_is_rational
   255 000000F1 [430F000000000000] 
   256 000000F9 E8370C0000              	call bind_primitive
   257                                  
   258                                  	; building closure for boolean?
   259 000000FE 48BF-                   	mov rdi, free_var_10
   259 00000100 [5000000000000000] 
   260 00000108 48BE-                   	mov rsi, L_code_ptr_is_boolean
   260 0000010A [790F000000000000] 
   261 00000112 E81E0C0000              	call bind_primitive
   262                                  
   263                                  	; building closure for number?
   264 00000117 48BF-                   	mov rdi, free_var_11
   264 00000119 [5800000000000000] 
   265 00000121 48BE-                   	mov rsi, L_code_ptr_is_number
   265 00000123 [B10F000000000000] 
   266 0000012B E8050C0000              	call bind_primitive
   267                                  
   268                                  	; building closure for collection?
   269 00000130 48BF-                   	mov rdi, free_var_12
   269 00000132 [6000000000000000] 
   270 0000013A 48BE-                   	mov rsi, L_code_ptr_is_collection
   270 0000013C [E90F000000000000] 
   271 00000144 E8EC0B0000              	call bind_primitive
   272                                  
   273                                  	; building closure for cons
   274 00000149 48BF-                   	mov rdi, free_var_13
   274 0000014B [6800000000000000] 
   275 00000153 48BE-                   	mov rsi, L_code_ptr_cons
   275 00000155 [2110000000000000] 
   276 0000015D E8D30B0000              	call bind_primitive
   277                                  
   278                                  	; building closure for display-sexpr
   279 00000162 48BF-                   	mov rdi, free_var_14
   279 00000164 [7000000000000000] 
   280 0000016C 48BE-                   	mov rsi, L_code_ptr_display_sexpr
   280 0000016E [5510000000000000] 
   281 00000176 E8BA0B0000              	call bind_primitive
   282                                  
   283                                  	; building closure for write-char
   284 0000017B 48BF-                   	mov rdi, free_var_15
   284 0000017D [7800000000000000] 
   285 00000185 48BE-                   	mov rsi, L_code_ptr_write_char
   285 00000187 [7F10000000000000] 
   286 0000018F E8A10B0000              	call bind_primitive
   287                                  
   288                                  	; building closure for car
   289 00000194 48BF-                   	mov rdi, free_var_16
   289 00000196 [8000000000000000] 
   290 0000019E 48BE-                   	mov rsi, L_code_ptr_car
   290 000001A0 [D610000000000000] 
   291 000001A8 E8880B0000              	call bind_primitive
   292                                  
   293                                  	; building closure for cdr
   294 000001AD 48BF-                   	mov rdi, free_var_17
   294 000001AF [8800000000000000] 
   295 000001B7 48BE-                   	mov rsi, L_code_ptr_cdr
   295 000001B9 [FE10000000000000] 
   296 000001C1 E86F0B0000              	call bind_primitive
   297                                  
   298                                  	; building closure for string-length
   299 000001C6 48BF-                   	mov rdi, free_var_18
   299 000001C8 [9000000000000000] 
   300 000001D0 48BE-                   	mov rsi, L_code_ptr_string_length
   300 000001D2 [2611000000000000] 
   301 000001DA E8560B0000              	call bind_primitive
   302                                  
   303                                  	; building closure for vector-length
   304 000001DF 48BF-                   	mov rdi, free_var_19
   304 000001E1 [9800000000000000] 
   305 000001E9 48BE-                   	mov rsi, L_code_ptr_vector_length
   305 000001EB [5311000000000000] 
   306 000001F3 E83D0B0000              	call bind_primitive
   307                                  
   308                                  	; building closure for real->integer
   309 000001F8 48BF-                   	mov rdi, free_var_20
   309 000001FA [A000000000000000] 
   310 00000202 48BE-                   	mov rsi, L_code_ptr_real_to_integer
   310 00000204 [8011000000000000] 
   311 0000020C E8240B0000              	call bind_primitive
   312                                  
   313                                  	; building closure for exit
   314 00000211 48BF-                   	mov rdi, free_var_21
   314 00000213 [A800000000000000] 
   315 0000021B 48BE-                   	mov rsi, L_code_ptr_exit
   315 0000021D [B311000000000000] 
   316 00000225 E80B0B0000              	call bind_primitive
   317                                  
   318                                  	; building closure for integer->real
   319 0000022A 48BF-                   	mov rdi, free_var_22
   319 0000022C [B000000000000000] 
   320 00000234 48BE-                   	mov rsi, L_code_ptr_integer_to_real
   320 00000236 [D011000000000000] 
   321 0000023E E8F20A0000              	call bind_primitive
   322                                  
   323                                  	; building closure for rational->real
   324 00000243 48BF-                   	mov rdi, free_var_23
   324 00000245 [B800000000000000] 
   325 0000024D 48BE-                   	mov rsi, L_code_ptr_rational_to_real
   325 0000024F [0D12000000000000] 
   326 00000257 E8D90A0000              	call bind_primitive
   327                                  
   328                                  	; building closure for char->integer
   329 0000025C 48BF-                   	mov rdi, free_var_24
   329 0000025E [C000000000000000] 
   330 00000266 48BE-                   	mov rsi, L_code_ptr_char_to_integer
   330 00000268 [4C12000000000000] 
   331 00000270 E8C00A0000              	call bind_primitive
   332                                  
   333                                  	; building closure for integer->char
   334 00000275 48BF-                   	mov rdi, free_var_25
   334 00000277 [C800000000000000] 
   335 0000027F 48BE-                   	mov rsi, L_code_ptr_integer_to_char
   335 00000281 [8112000000000000] 
   336 00000289 E8A70A0000              	call bind_primitive
   337                                  
   338                                  	; building closure for trng
   339 0000028E 48BF-                   	mov rdi, free_var_26
   339 00000290 [D000000000000000] 
   340 00000298 48BE-                   	mov rsi, L_code_ptr_trng
   340 0000029A [DB12000000000000] 
   341 000002A2 E88E0A0000              	call bind_primitive
   342                                  
   343                                  	; building closure for zero?
   344 000002A7 48BF-                   	mov rdi, free_var_27
   344 000002A9 [D800000000000000] 
   345 000002B1 48BE-                   	mov rsi, L_code_ptr_is_zero
   345 000002B3 [FE12000000000000] 
   346 000002BB E8750A0000              	call bind_primitive
   347                                  
   348                                  	; building closure for integer?
   349 000002C0 48BF-                   	mov rdi, free_var_28
   349 000002C2 [E000000000000000] 
   350 000002CA 48BE-                   	mov rsi, L_code_ptr_is_integer
   350 000002CC [5913000000000000] 
   351 000002D4 E85C0A0000              	call bind_primitive
   352                                  
   353                                  	; building closure for __bin-apply
   354 000002D9 48BF-                   	mov rdi, free_var_29
   354 000002DB [E800000000000000] 
   355 000002E3 48BE-                   	mov rsi, L_code_ptr_bin_apply
   355 000002E5 [5D0D000000000000] 
   356 000002ED E8430A0000              	call bind_primitive
   357                                  
   358                                  	; building closure for __bin-add-rr
   359 000002F2 48BF-                   	mov rdi, free_var_30
   359 000002F4 [F000000000000000] 
   360 000002FC 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_rr
   360 000002FE [9613000000000000] 
   361 00000306 E82A0A0000              	call bind_primitive
   362                                  
   363                                  	; building closure for __bin-sub-rr
   364 0000030B 48BF-                   	mov rdi, free_var_31
   364 0000030D [F800000000000000] 
   365 00000315 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_rr
   365 00000317 [DA13000000000000] 
   366 0000031F E8110A0000              	call bind_primitive
   367                                  
   368                                  	; building closure for __bin-mul-rr
   369 00000324 48BF-                   	mov rdi, free_var_32
   369 00000326 [0001000000000000] 
   370 0000032E 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_rr
   370 00000330 [1E14000000000000] 
   371 00000338 E8F8090000              	call bind_primitive
   372                                  
   373                                  	; building closure for __bin-div-rr
   374 0000033D 48BF-                   	mov rdi, free_var_33
   374 0000033F [0801000000000000] 
   375 00000347 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_rr
   375 00000349 [6214000000000000] 
   376 00000351 E8DF090000              	call bind_primitive
   377                                  
   378                                  	; building closure for __bin-add-qq
   379 00000356 48BF-                   	mov rdi, free_var_34
   379 00000358 [1001000000000000] 
   380 00000360 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_qq
   380 00000362 [B414000000000000] 
   381 0000036A E8C6090000              	call bind_primitive
   382                                  
   383                                  	; building closure for __bin-sub-qq
   384 0000036F 48BF-                   	mov rdi, free_var_35
   384 00000371 [1801000000000000] 
   385 00000379 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_qq
   385 0000037B [1C15000000000000] 
   386 00000383 E8AD090000              	call bind_primitive
   387                                  
   388                                  	; building closure for __bin-mul-qq
   389 00000388 48BF-                   	mov rdi, free_var_36
   389 0000038A [2001000000000000] 
   390 00000392 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_qq
   390 00000394 [8415000000000000] 
   391 0000039C E894090000              	call bind_primitive
   392                                  
   393                                  	; building closure for __bin-div-qq
   394 000003A1 48BF-                   	mov rdi, free_var_37
   394 000003A3 [2801000000000000] 
   395 000003AB 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_qq
   395 000003AD [DC15000000000000] 
   396 000003B5 E87B090000              	call bind_primitive
   397                                  
   398                                  	; building closure for error
   399 000003BA 48BF-                   	mov rdi, free_var_38
   399 000003BC [3001000000000000] 
   400 000003C4 48BE-                   	mov rsi, L_code_ptr_error
   400 000003C6 [AA16000000000000] 
   401 000003CE E862090000              	call bind_primitive
   402                                  
   403                                  	; building closure for __bin-less-than-rr
   404 000003D3 48BF-                   	mov rdi, free_var_39
   404 000003D5 [3801000000000000] 
   405 000003DD 48BE-                   	mov rsi, L_code_ptr_raw_less_than_rr
   405 000003DF [6117000000000000] 
   406 000003E7 E849090000              	call bind_primitive
   407                                  
   408                                  	; building closure for __bin-less-than-qq
   409 000003EC 48BF-                   	mov rdi, free_var_40
   409 000003EE [4001000000000000] 
   410 000003F6 48BE-                   	mov rsi, L_code_ptr_raw_less_than_qq
   410 000003F8 [B817000000000000] 
   411 00000400 E830090000              	call bind_primitive
   412                                  
   413                                  	; building closure for __bin-equal-rr
   414 00000405 48BF-                   	mov rdi, free_var_41
   414 00000407 [4801000000000000] 
   415 0000040F 48BE-                   	mov rsi, L_code_ptr_raw_equal_rr
   415 00000411 [1B18000000000000] 
   416 00000419 E817090000              	call bind_primitive
   417                                  
   418                                  	; building closure for __bin-equal-qq
   419 0000041E 48BF-                   	mov rdi, free_var_42
   419 00000420 [5001000000000000] 
   420 00000428 48BE-                   	mov rsi, L_code_ptr_raw_equal_qq
   420 0000042A [7218000000000000] 
   421 00000432 E8FE080000              	call bind_primitive
   422                                  
   423                                  	; building closure for quotient
   424 00000437 48BF-                   	mov rdi, free_var_43
   424 00000439 [5801000000000000] 
   425 00000441 48BE-                   	mov rsi, L_code_ptr_quotient
   425 00000443 [D518000000000000] 
   426 0000044B E8E5080000              	call bind_primitive
   427                                  
   428                                  	; building closure for remainder
   429 00000450 48BF-                   	mov rdi, free_var_44
   429 00000452 [6001000000000000] 
   430 0000045A 48BE-                   	mov rsi, L_code_ptr_remainder
   430 0000045C [3B19000000000000] 
   431 00000464 E8CC080000              	call bind_primitive
   432                                  
   433                                  	; building closure for set-car!
   434 00000469 48BF-                   	mov rdi, free_var_45
   434 0000046B [6801000000000000] 
   435 00000473 48BE-                   	mov rsi, L_code_ptr_set_car
   435 00000475 [A119000000000000] 
   436 0000047D E8B3080000              	call bind_primitive
   437                                  
   438                                  	; building closure for set-cdr!
   439 00000482 48BF-                   	mov rdi, free_var_46
   439 00000484 [7001000000000000] 
   440 0000048C 48BE-                   	mov rsi, L_code_ptr_set_cdr
   440 0000048E [D719000000000000] 
   441 00000496 E89A080000              	call bind_primitive
   442                                  
   443                                  	; building closure for string-ref
   444 0000049B 48BF-                   	mov rdi, free_var_47
   444 0000049D [7801000000000000] 
   445 000004A5 48BE-                   	mov rsi, L_code_ptr_string_ref
   445 000004A7 [0D1A000000000000] 
   446 000004AF E881080000              	call bind_primitive
   447                                  
   448                                  	; building closure for vector-ref
   449 000004B4 48BF-                   	mov rdi, free_var_48
   449 000004B6 [8001000000000000] 
   450 000004BE 48BE-                   	mov rsi, L_code_ptr_vector_ref
   450 000004C0 [781A000000000000] 
   451 000004C8 E868080000              	call bind_primitive
   452                                  
   453                                  	; building closure for vector-set!
   454 000004CD 48BF-                   	mov rdi, free_var_49
   454 000004CF [8801000000000000] 
   455 000004D7 48BE-                   	mov rsi, L_code_ptr_vector_set
   455 000004D9 [D41A000000000000] 
   456 000004E1 E84F080000              	call bind_primitive
   457                                  
   458                                  	; building closure for string-set!
   459 000004E6 48BF-                   	mov rdi, free_var_50
   459 000004E8 [9001000000000000] 
   460 000004F0 48BE-                   	mov rsi, L_code_ptr_string_set
   460 000004F2 [3E1B000000000000] 
   461 000004FA E836080000              	call bind_primitive
   462                                  
   463                                  	; building closure for make-vector
   464 000004FF 48BF-                   	mov rdi, free_var_51
   464 00000501 [9801000000000000] 
   465 00000509 48BE-                   	mov rsi, L_code_ptr_make_vector
   465 0000050B [B31B000000000000] 
   466 00000513 E81D080000              	call bind_primitive
   467                                  
   468                                  	; building closure for make-string
   469 00000518 48BF-                   	mov rdi, free_var_52
   469 0000051A [A001000000000000] 
   470 00000522 48BE-                   	mov rsi, L_code_ptr_make_string
   470 00000524 [1D1C000000000000] 
   471 0000052C E804080000              	call bind_primitive
   472                                  
   473                                  	; building closure for numerator
   474 00000531 48BF-                   	mov rdi, free_var_53
   474 00000533 [A801000000000000] 
   475 0000053B 48BE-                   	mov rsi, L_code_ptr_numerator
   475 0000053D [8F1C000000000000] 
   476 00000545 E8EB070000              	call bind_primitive
   477                                  
   478                                  	; building closure for denominator
   479 0000054A 48BF-                   	mov rdi, free_var_54
   479 0000054C [B001000000000000] 
   480 00000554 48BE-                   	mov rsi, L_code_ptr_denominator
   480 00000556 [BC1C000000000000] 
   481 0000055E E8D2070000              	call bind_primitive
   482                                  
   483                                  	; building closure for eq?
   484 00000563 48BF-                   	mov rdi, free_var_55
   484 00000565 [B801000000000000] 
   485 0000056D 48BE-                   	mov rsi, L_code_ptr_eq
   485 0000056F [E91C000000000000] 
   486 00000577 E8B9070000              	call bind_primitive
   487                                  
   488 0000057C 68[01000000]            	push sob_nil	; hold 8 bytes for magic
   489 00000581 48B8-                   	mov rax, qword L_constants + 6 ;'Moshe was in: ScmConst' sexpr
   489 00000583 [0600000000000000] 
   490 0000058B 50                      	push rax;'Moshe was in: ScmApplic' (proc, args, Non_tail_call)
   491 0000058C 48B8-                   	mov rax, qword L_constants + 23 ;'Moshe was in: ScmConst' sexpr
   491 0000058E [1700000000000000] 
   492 00000596 50                      	push rax;'Moshe was in: ScmApplic' (proc, args, Non_tail_call)
   493 00000597 6A02                    	push 2;'Moshe was in: ScmApplic' (proc, args, Non_tail_call)
   494 00000599 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   495 0000059E E801020000              	call malloc
   496 000005A3 50                      	push rax
   497 000005A4 BF00000000              	mov rdi, 8 * 0	; new rib
   498 000005A9 E8F6010000              	call malloc
   499 000005AE 50                      	push rax
   500 000005AF BF08000000              	mov rdi, 8 * 1	; extended env
   501 000005B4 E8EB010000              	call malloc
   502 000005B9 488B7D10                	mov rdi, ENV
   503 000005BD BE00000000              	mov rsi, 0
   504 000005C2 BA01000000              	mov rdx, 1
   505                                  .L_lambda_opt_env_loop_0001:	; ext_env[i + 1] <-- env[i]
   506 000005C7 4883FE01                	cmp rsi, 1
   507 000005CB 7410                    	je .L_lambda_opt_env_end_0001
   508 000005CD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   509 000005D1 48890CD0                	mov qword [rax + 8 * rdx], rcx
   510 000005D5 48FFC6                  	inc rsi
   511 000005D8 48FFC2                  	inc rdx
   512 000005DB EBEA                    	jmp .L_lambda_opt_env_loop_0001
   513                                  .L_lambda_opt_env_end_0001:
   514 000005DD 5B                      	pop rbx
   515 000005DE BE00000000              	mov rsi, 0
   516                                  .L_lambda_opt_params_loop_0001:	; copy params
   517 000005E3 4883FE00                	cmp rsi, 0
   518 000005E7 740E                    	je .L_lambda_opt_params_end_0001
   519 000005E9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   520 000005EE 488914F3                	mov qword [rbx + 8 * rsi], rdx
   521 000005F2 48FFC6                  	inc rsi
   522 000005F5 EBEC                    	jmp .L_lambda_opt_params_loop_0001
   523                                  .L_lambda_opt_params_end_0001:
   524 000005F7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   525 000005FA 4889C3                  	mov rbx, rax
   526 000005FD 58                      	pop rax
   527 000005FE C60005                  	mov byte [rax], T_closure
   528 00000601 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   529 00000605 48C74009[12060000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0001
   530 0000060D E9A4000000              	jmp .L_lambda_opt_end_0001
   531                                  .L_lambda_opt_code_0001:	; lambda-opt body
   532 00000612 48837C241002            	cmp qword [rsp + 8 * 2], 2
   533 00000618 7D0B                    	jge .L_lambda_opt_arity_check_ok_0001
   534 0000061A FF742410                	push qword [rsp + 8 * 2]
   535 0000061E 6A02                    	push 2
   536 00000620 E94C010000              	jmp L_error_incorrect_arity_opt
   537                                  .L_lambda_opt_arity_check_ok_0001:
   538 00000625 C8000000                	enter 0, 0
   539 00000629 488B7518                	mov rsi, COUNT	; rsi holds the index of current parameter
   540 0000062D 48FFCE                  	dec rsi
   541 00000630 4C8B4518                	mov r8, COUNT	; r8 holds the amount of parameters left to put in the list
   542 00000634 4983E802                	sub r8, 2
   543 00000638 48BA-                   	mov rdx, sob_nil
   543 0000063A [0100000000000000] 
   544                                  .L_lambda_opt_optional_list_loop_0001:
   545 00000642 4983F800                	cmp r8, 0
   546 00000646 7425                    	je .L_lambda_opt_optional_list_end_0001
   547 00000648 4C8B4CF520              	mov r9, PARAM(rsi)
   548 0000064D BF11000000              	mov rdi, 1 + 8 + 8; store enough memory for a pair struct in rdi to call malloc
   549 00000652 E84D010000              	call malloc
   550 00000657 C60021                  	mov byte [rax], T_pair
   551 0000065A 4C894801                	mov SOB_PAIR_CAR(rax), r9
   552 0000065E 48895009                	mov SOB_PAIR_CDR(rax), rdx
   553 00000662 4889C2                  	mov rdx, rax
   554 00000665 48FFCE                  	dec rsi
   555 00000668 49FFC8                  	dec r8
   556 0000066B EBD5                    	jmp .L_lambda_opt_optional_list_loop_0001
   557                                  .L_lambda_opt_optional_list_end_0001:
   558 0000066D 48895530                	mov PARAM(2), rdx
   559 00000671 48837D1803              	cmp COUNT, 3
   560 00000676 7E36                    	jle .L_lambda_opt_wrap_things_up_0001
   561                                  .L_lambda_opt_arity_check_more_0001:
   562                                  			; r8 will hold the amount of values left to push up
   563                                  			; initial value is List.length params' + previously stored values + magic
   564 00000678 41B807000000            	mov r8, 2 + 4 + 1
   565                                  			; r9 will hold a constant offset to store the current value at
   566                                  			; I.E. we'll store [rbp + 8 * r8] at [rbp + 8 * (r8 + r9)]
   567 0000067E 4C8B4D18                	mov r9, COUNT
   568 00000682 4983E903                	sub r9, 3
   569                                  			; calculate initial offset = rbp + 8 * (index - 1) and store at rsi
   570 00000686 4A8D74C5F8              	lea rsi, [rbp + 8 * (r8 - 1)]
   571                                  .L_lambda_opt_stack_setup_loop_0001:
   572 0000068B 4983F800                	cmp r8, 0
   573 0000068F 7410                    	je .L_lambda_opt_stack_setup_end_0001
   574 00000691 488B3E                  	mov rdi, [rsi]	; rdi holds the current value to be moved
   575 00000694 4A893CCE                	mov [rsi + 8 * r9], rdi
   576 00000698 49FFC8                  	dec r8
   577 0000069B 4883EE08                	sub rsi, 8
   578 0000069F EBEA                    	jmp .L_lambda_opt_stack_setup_loop_0001
   579                                  .L_lambda_opt_stack_setup_end_0001:
   580 000006A1 4A8D6CCD00              	lea rbp, [rbp + 8 * r9]
   581 000006A6 48C7451803000000        	mov COUNT, 3
   582                                  .L_lambda_opt_wrap_things_up_0001:
   583 000006AE 488B4530                	mov rax, qword [rbp + 8 * (4 + 2)] ;'Moshe was in: ScmVarGet' (Var' (v, Param minor))
   584 000006B2 C9                      	leave
   585 000006B3 C22800                  	ret 8 * (2 + 3)
   586                                  .L_lambda_opt_end_0001:	; new closure is in rax
   587                                  	assert_closure(rax);'Moshe was in: ScmApplic' (proc, args, Non_tail_call)
    42 000006B6 803805              <1>  cmp byte [%1], %2
    43 000006B9 0F852A180000        <1>  jne L_error_incorrect_type
   588 000006BF FF7001                  	push SOB_CLOSURE_ENV(rax);'Moshe was in: ScmApplic' (proc, args, Non_tail_call)
   589 000006C2 FF5009                  	call SOB_CLOSURE_CODE(rax);'Moshe was in: ScmApplic' (proc, args, Non_tail_call)
   590                                  
   591 000006C5 4889C7                  	mov rdi, rax
   592 000006C8 E8E8000000              	call print_sexpr_if_not_void
   593                                  
   594 000006CD 48BF-                           mov rdi, fmt_memory_usage
   594 000006CF [8700000000000000] 
   595 000006D7 488B3425[0E010000]              mov rsi, qword [top_of_memory]
   596 000006DF 4881EE[C0010000]                sub rsi, memory
   597 000006E6 B800000000                      mov rax, 0
   598                                  	ENTER
    33 000006EB C8000000            <1>  enter 0, 0
    34 000006EF 4883E4F0            <1>  and rsp, ~15
   599 000006F3 E8(00000000)                    call printf
   600                                  	LEAVE
    38 000006F8 C9                  <1>  leave
   601 000006F9 C9                      	leave
   602 000006FA C3                      	ret
   603                                  
   604                                  L_error_non_closure:
   605 000006FB 488B3C25[00000000]              mov rdi, qword [stderr]
   606 00000703 48BE-                           mov rsi, fmt_non_closure
   606 00000705 [BE00000000000000] 
   607 0000070D B800000000                      mov rax, 0
   608                                  	ENTER
    33 00000712 C8000000            <1>  enter 0, 0
    34 00000716 4883E4F0            <1>  and rsp, ~15
   609 0000071A E8(00000000)                    call fprintf
   610                                  	LEAVE
    38 0000071F C9                  <1>  leave
   611 00000720 48C7C0FEFFFFFF                  mov rax, -2
   612 00000727 E8(00000000)                    call exit
   613                                  
   614                                  L_error_improper_list:
   615 0000072C 488B3C25[00000000]      	mov rdi, qword [stderr]
   616 00000734 48BE-                   	mov rsi, fmt_error_improper_list
   616 00000736 [E600000000000000] 
   617 0000073E B800000000              	mov rax, 0
   618                                  	ENTER
    33 00000743 C8000000            <1>  enter 0, 0
    34 00000747 4883E4F0            <1>  and rsp, ~15
   619 0000074B E8(00000000)            	call fprintf
   620                                  	LEAVE
    38 00000750 C9                  <1>  leave
   621 00000751 48C7C0F9FFFFFF          	mov rax, -7
   622 00000758 E8(00000000)            	call exit
   623                                  
   624                                  L_error_incorrect_arity_simple:
   625 0000075D 488B3C25[00000000]              mov rdi, qword [stderr]
   626 00000765 48BE-                           mov rsi, fmt_incorrect_arity_simple
   626 00000767 [2800000000000000] 
   627 0000076F EB12                            jmp L_error_incorrect_arity_common
   628                                  L_error_incorrect_arity_opt:
   629 00000771 488B3C25[00000000]              mov rdi, qword [stderr]
   630 00000779 48BE-                           mov rsi, fmt_incorrect_arity_opt
   630 0000077B [5300000000000000] 
   631                                  L_error_incorrect_arity_common:
   632 00000783 5A                              pop rdx
   633 00000784 59                              pop rcx
   634 00000785 B800000000                      mov rax, 0
   635                                  	ENTER
    33 0000078A C8000000            <1>  enter 0, 0
    34 0000078E 4883E4F0            <1>  and rsp, ~15
   636 00000792 E8(00000000)                    call fprintf
   637                                  	LEAVE
    38 00000797 C9                  <1>  leave
   638 00000798 48C7C0FAFFFFFF                  mov rax, -6
   639 0000079F E8(00000000)                    call exit
   640                                  
   641                                  section .data
   642                                  fmt_incorrect_arity_simple:
   643 00000028 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
   643 00000031 74656420256C642061-
   643 0000003A 7267756D656E74732C-
   643 00000043 206275742067697665-
   643 0000004C 6E20256C640A00     
   644                                  fmt_incorrect_arity_opt:
   645 00000053 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
   645 0000005C 746564206174206C65-
   645 00000065 61737420256C642061-
   645 0000006E 7267756D656E74732C-
   645 00000077 206275742067697665-
   645 00000080 6E20256C640A00     
   646                                  fmt_memory_usage:
   647 00000087 0A0A21212120557365-             db `\n\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
   647 00000090 6420256C6420627974-
   647 00000099 6573206F662064796E-
   647 000000A2 616D6963616C6C792D-
   647 000000AB 616C6C6F6361746564-
   647 000000B4 206D656D6F72790A0A-
   647 000000BD 00                 
   648                                  fmt_non_closure:
   649 000000BE 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
   649 000000C7 7074696E6720746F20-
   649 000000D0 6170706C792061206E-
   649 000000D9 6F6E2D636C6F737572-
   649 000000E2 65210A00           
   650                                  fmt_error_improper_list:
   651 000000E6 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
   651 000000EF 7267756D656E742069-
   651 000000F8 73206E6F7420612070-
   651 00000101 726F706572206C6973-
   651 0000010A 74210A00           
   652                                  
   653                                  section .bss
   654                                  memory:
   655 000001C0 <res 40000000h>         	resb gbytes(1)
   656                                  
   657                                  section .data
   658                                  top_of_memory:
   659 0000010E [C001000000000000]              dq memory
   660                                  
   661                                  section .text
   662                                  malloc:
   663 000007A4 488B0425[0E010000]              mov rax, qword [top_of_memory]
   664 000007AC 48013C25[0E010000]              add qword [top_of_memory], rdi
   665 000007B4 C3                              ret
   666                                          
   667                                  print_sexpr_if_not_void:
   668 000007B5 4881FF[00000000]        	cmp rdi, sob_void
   669 000007BC 7501                    	jne print_sexpr
   670 000007BE C3                      	ret
   671                                  
   672                                  section .data
   673                                  fmt_void:
   674 00000116 233C766F69643E00        	db `#<void>\0`
   675                                  fmt_nil:
   676 0000011E 282900                  	db `()\0`
   677                                  fmt_boolean_false:
   678 00000121 236600                  	db `#f\0`
   679                                  fmt_boolean_true:
   680 00000124 237400                  	db `#t\0`
   681                                  fmt_char_backslash:
   682 00000127 235C5C00                	db `#\\\\\0`
   683                                  fmt_char_dquote:
   684 0000012B 235C2200                	db `#\\"\0`
   685                                  fmt_char_simple:
   686 0000012F 235C256300              	db `#\\%c\0`
   687                                  fmt_char_null:
   688 00000134 235C6E756C00            	db `#\\nul\0`
   689                                  fmt_char_bell:
   690 0000013A 235C62656C6C00          	db `#\\bell\0`
   691                                  fmt_char_backspace:
   692 00000141 235C6261636B737061-     	db `#\\backspace\0`
   692 0000014A 636500             
   693                                  fmt_char_tab:
   694 0000014D 235C74616200            	db `#\\tab\0`
   695                                  fmt_char_newline:
   696 00000153 235C6E65776C696E65-     	db `#\\newline\0`
   696 0000015C 00                 
   697                                  fmt_char_formfeed:
   698 0000015D 235C7061676500          	db `#\\page\0`
   699                                  fmt_char_return:
   700 00000164 235C72657475726E00      	db `#\\return\0`
   701                                  fmt_char_escape:
   702 0000016D 235C65736300            	db `#\\esc\0`
   703                                  fmt_char_space:
   704 00000173 235C737061636500        	db `#\\space\0`
   705                                  fmt_char_hex:
   706 0000017B 235C782530325800        	db `#\\x%02X\0`
   707                                  fmt_closure:
   708 00000183 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
   708 0000018C 206174203078253038-
   708 00000195 5820656E763D307825-
   708 0000019E 30385820636F64653D-
   708 000001A7 3078253038583E00   
   709                                  fmt_lparen:
   710 000001AF 2800                    	db `(\0`
   711                                  fmt_dotted_pair:
   712 000001B1 202E2000                	db ` . \0`
   713                                  fmt_rparen:
   714 000001B5 2900                    	db `)\0`
   715                                  fmt_space:
   716 000001B7 2000                    	db ` \0`
   717                                  fmt_empty_vector:
   718 000001B9 23282900                	db `#()\0`
   719                                  fmt_vector:
   720 000001BD 232800                  	db `#(\0`
   721                                  fmt_real:
   722 000001C0 256600                  	db `%f\0`
   723                                  fmt_fraction:
   724 000001C3 256C642F256C6400        	db `%ld/%ld\0`
   725                                  fmt_zero:
   726 000001CB 3000                    	db `0\0`
   727                                  fmt_int:
   728 000001CD 256C6400                	db `%ld\0`
   729                                  fmt_unknown_sexpr_error:
   730 000001D1 0A0A21212120457272-     	db `\n\n!!! Error: Unknown type of sexpr (0x%02X) `
   730 000001DA 6F723A20556E6B6E6F-
   730 000001E3 776E2074797065206F-
   730 000001EC 662073657870722028-
   730 000001F5 3078253032582920   
   731 000001FD 617420616464726573-     	db `at address 0x%08X\n\n\0`
   731 00000206 73203078253038580A-
   731 0000020F 0A00               
   732                                  fmt_dquote:
   733 00000211 2200                    	db `\"\0`
   734                                  fmt_string_char:
   735 00000213 256300                          db `%c\0`
   736                                  fmt_string_char_7:
   737 00000216 5C6100                          db `\\a\0`
   738                                  fmt_string_char_8:
   739 00000219 5C6200                          db `\\b\0`
   740                                  fmt_string_char_9:
   741 0000021C 5C7400                          db `\\t\0`
   742                                  fmt_string_char_10:
   743 0000021F 5C6E00                          db `\\n\0`
   744                                  fmt_string_char_11:
   745 00000222 5C7600                          db `\\v\0`
   746                                  fmt_string_char_12:
   747 00000225 5C6600                          db `\\f\0`
   748                                  fmt_string_char_13:
   749 00000228 5C7200                          db `\\r\0`
   750                                  fmt_string_char_34:
   751 0000022B 5C2200                          db `\\"\0`
   752                                  fmt_string_char_92:
   753 0000022E 5C5C00                          db `\\\\\0`
   754                                  fmt_string_char_hex:
   755 00000231 5C7825583B00                    db `\\x%X;\0`
   756                                  
   757                                  section .text
   758                                  
   759                                  print_sexpr:
   760                                  	ENTER
    33 000007BF C8000000            <1>  enter 0, 0
    34 000007C3 4883E4F0            <1>  and rsp, ~15
   761 000007C7 8A07                    	mov al, byte [rdi]
   762 000007C9 3C00                    	cmp al, T_void
   763 000007CB 744D                    	je .Lvoid
   764 000007CD 3C01                    	cmp al, T_nil
   765 000007CF 7458                    	je .Lnil
   766 000007D1 3C09                    	cmp al, T_boolean_false
   767 000007D3 7463                    	je .Lboolean_false
   768 000007D5 3C0A                    	cmp al, T_boolean_true
   769 000007D7 746E                    	je .Lboolean_true
   770 000007D9 3C02                    	cmp al, T_char
   771 000007DB 7479                    	je .Lchar
   772 000007DD 3C04                    	cmp al, T_symbol
   773 000007DF 0F84BB010000            	je .Lsymbol
   774 000007E5 3C21                    	cmp al, T_pair
   775 000007E7 0F84D6010000            	je .Lpair
   776 000007ED 3C22                    	cmp al, T_vector
   777 000007EF 0F849F020000            	je .Lvector
   778 000007F5 3C05                    	cmp al, T_closure
   779 000007F7 0F8489010000            	je .Lclosure
   780 000007FD 3C12                    	cmp al, T_real
   781 000007FF 0F8430030000            	je .Lreal
   782 00000805 3C11                    	cmp al, T_rational
   783 00000807 0F8456030000            	je .Lrational
   784 0000080D 3C03                    	cmp al, T_string
   785 0000080F 0F848F030000            	je .Lstring
   786                                  
   787 00000815 E9C7040000              	jmp .Lunknown_sexpr_type
   788                                  
   789                                  .Lvoid:
   790 0000081A 48BF-                   	mov rdi, fmt_void
   790 0000081C [1601000000000000] 
   791 00000824 E9F5040000              	jmp .Lemit
   792                                  
   793                                  .Lnil:
   794 00000829 48BF-                   	mov rdi, fmt_nil
   794 0000082B [1E01000000000000] 
   795 00000833 E9E6040000              	jmp .Lemit
   796                                  
   797                                  .Lboolean_false:
   798 00000838 48BF-                   	mov rdi, fmt_boolean_false
   798 0000083A [2101000000000000] 
   799 00000842 E9D7040000              	jmp .Lemit
   800                                  
   801                                  .Lboolean_true:
   802 00000847 48BF-                   	mov rdi, fmt_boolean_true
   802 00000849 [2401000000000000] 
   803 00000851 E9C8040000              	jmp .Lemit
   804                                  
   805                                  .Lchar:
   806 00000856 8A4701                  	mov al, byte [rdi + 1]
   807 00000859 3C20                    	cmp al, ' '
   808 0000085B 7E28                    	jle .Lchar_whitespace
   809 0000085D 3C5C                    	cmp al, 92 		; backslash
   810 0000085F 0F847C000000            	je .Lchar_backslash
   811 00000865 3C22                    	cmp al, '"'
   812 00000867 0F8483000000            	je .Lchar_dquote
   813 0000086D 4825FF000000            	and rax, 255
   814 00000873 48BF-                   	mov rdi, fmt_char_simple
   814 00000875 [2F01000000000000] 
   815 0000087D 4889C6                  	mov rsi, rax
   816 00000880 E999040000              	jmp .Lemit
   817                                  
   818                                  .Lchar_whitespace:
   819 00000885 3C00                    	cmp al, 0
   820 00000887 7476                    	je .Lchar_null
   821 00000889 3C07                    	cmp al, 7
   822 0000088B 0F847D000000            	je .Lchar_bell
   823 00000891 3C08                    	cmp al, 8
   824 00000893 0F8484000000            	je .Lchar_backspace
   825 00000899 3C09                    	cmp al, 9
   826 0000089B 0F848B000000            	je .Lchar_tab
   827 000008A1 3C0A                    	cmp al, 10
   828 000008A3 0F8492000000            	je .Lchar_newline
   829 000008A9 3C0C                    	cmp al, 12
   830 000008AB 0F8499000000            	je .Lchar_formfeed
   831 000008B1 3C0D                    	cmp al, 13
   832 000008B3 0F84A0000000            	je .Lchar_return
   833 000008B9 3C1B                    	cmp al, 27
   834 000008BB 0F84A7000000            	je .Lchar_escape
   835 000008C1 4825FF000000            	and rax, 255
   836 000008C7 3C20                    	cmp al, ' '
   837 000008C9 0F84A8000000            	je .Lchar_space
   838 000008CF 48BF-                   	mov rdi, fmt_char_hex
   838 000008D1 [7B01000000000000] 
   839 000008D9 4889C6                  	mov rsi, rax
   840 000008DC E93D040000              	jmp .Lemit	
   841                                  
   842                                  .Lchar_backslash:
   843 000008E1 48BF-                   	mov rdi, fmt_char_backslash
   843 000008E3 [2701000000000000] 
   844 000008EB E92E040000              	jmp .Lemit
   845                                  
   846                                  .Lchar_dquote:
   847 000008F0 48BF-                   	mov rdi, fmt_char_dquote
   847 000008F2 [2B01000000000000] 
   848 000008FA E91F040000              	jmp .Lemit
   849                                  
   850                                  .Lchar_null:
   851 000008FF 48BF-                   	mov rdi, fmt_char_null
   851 00000901 [3401000000000000] 
   852 00000909 E910040000              	jmp .Lemit
   853                                  
   854                                  .Lchar_bell:
   855 0000090E 48BF-                   	mov rdi, fmt_char_bell
   855 00000910 [3A01000000000000] 
   856 00000918 E901040000              	jmp .Lemit
   857                                  
   858                                  .Lchar_backspace:
   859 0000091D 48BF-                   	mov rdi, fmt_char_backspace
   859 0000091F [4101000000000000] 
   860 00000927 E9F2030000              	jmp .Lemit
   861                                  
   862                                  .Lchar_tab:
   863 0000092C 48BF-                   	mov rdi, fmt_char_tab
   863 0000092E [4D01000000000000] 
   864 00000936 E9E3030000              	jmp .Lemit
   865                                  
   866                                  .Lchar_newline:
   867 0000093B 48BF-                   	mov rdi, fmt_char_newline
   867 0000093D [5301000000000000] 
   868 00000945 E9D4030000              	jmp .Lemit
   869                                  
   870                                  .Lchar_formfeed:
   871 0000094A 48BF-                   	mov rdi, fmt_char_formfeed
   871 0000094C [5D01000000000000] 
   872 00000954 E9C5030000              	jmp .Lemit
   873                                  
   874                                  .Lchar_return:
   875 00000959 48BF-                   	mov rdi, fmt_char_return
   875 0000095B [6401000000000000] 
   876 00000963 E9B6030000              	jmp .Lemit
   877                                  
   878                                  .Lchar_escape:
   879 00000968 48BF-                   	mov rdi, fmt_char_escape
   879 0000096A [6D01000000000000] 
   880 00000972 E9A7030000              	jmp .Lemit
   881                                  
   882                                  .Lchar_space:
   883 00000977 48BF-                   	mov rdi, fmt_char_space
   883 00000979 [7301000000000000] 
   884 00000981 E998030000              	jmp .Lemit
   885                                  
   886                                  .Lclosure:
   887 00000986 4889FE                  	mov rsi, qword rdi
   888 00000989 48BF-                   	mov rdi, fmt_closure
   888 0000098B [8301000000000000] 
   889 00000993 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
   890 00000997 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
   891 0000099B E97E030000              	jmp .Lemit
   892                                  
   893                                  .Lsymbol:
   894 000009A0 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
   895 000009A4 BE01000000              	mov rsi, 1		 ; size = 1 byte
   896 000009A9 488B5701                	mov rdx, qword [rdi + 1] ; length
   897 000009AD 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
   898 000009B1 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
   899 000009B9 E8(00000000)            	call fwrite
   900 000009BE E970030000              	jmp .Lend
   901                                  	
   902                                  .Lpair:
   903 000009C3 57                      	push rdi
   904 000009C4 48BF-                   	mov rdi, fmt_lparen
   904 000009C6 [AF01000000000000] 
   905 000009CE B800000000              	mov rax, 0
   906                                          ENTER
    33 000009D3 C8000000            <1>  enter 0, 0
    34 000009D7 4883E4F0            <1>  and rsp, ~15
   907 000009DB E8(00000000)            	call printf
   908                                          LEAVE
    38 000009E0 C9                  <1>  leave
   909 000009E1 488B3C24                	mov rdi, qword [rsp] 	; pair
   910 000009E5 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   911 000009E9 E8D1FDFFFF              	call print_sexpr
   912 000009EE 5F                      	pop rdi 		; pair
   913 000009EF 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   914                                  .Lcdr:
   915 000009F3 8A07                    	mov al, byte [rdi]
   916 000009F5 3C01                    	cmp al, T_nil
   917 000009F7 7447                    	je .Lcdr_nil
   918 000009F9 3C21                    	cmp al, T_pair
   919 000009FB 7462                    	je .Lcdr_pair
   920 000009FD 57                      	push rdi
   921 000009FE 48BF-                   	mov rdi, fmt_dotted_pair
   921 00000A00 [B101000000000000] 
   922 00000A08 B800000000              	mov rax, 0
   923                                  	ENTER
    33 00000A0D C8000000            <1>  enter 0, 0
    34 00000A11 4883E4F0            <1>  and rsp, ~15
   924 00000A15 E8(00000000)            	call printf
   925                                  	LEAVE
    38 00000A1A C9                  <1>  leave
   926 00000A1B 5F                      	pop rdi
   927 00000A1C E89EFDFFFF              	call print_sexpr
   928 00000A21 48BF-                   	mov rdi, fmt_rparen
   928 00000A23 [B501000000000000] 
   929 00000A2B B800000000              	mov rax, 0
   930                                  	ENTER
    33 00000A30 C8000000            <1>  enter 0, 0
    34 00000A34 4883E4F0            <1>  and rsp, ~15
   931 00000A38 E8(00000000)            	call printf
   932                                  	LEAVE
    38 00000A3D C9                  <1>  leave
   933                                  	LEAVE
    38 00000A3E C9                  <1>  leave
   934 00000A3F C3                      	ret
   935                                  
   936                                  .Lcdr_nil:
   937 00000A40 48BF-                   	mov rdi, fmt_rparen
   937 00000A42 [B501000000000000] 
   938 00000A4A B800000000              	mov rax, 0
   939                                  	ENTER
    33 00000A4F C8000000            <1>  enter 0, 0
    34 00000A53 4883E4F0            <1>  and rsp, ~15
   940 00000A57 E8(00000000)            	call printf
   941                                  	LEAVE
    38 00000A5C C9                  <1>  leave
   942                                  	LEAVE
    38 00000A5D C9                  <1>  leave
   943 00000A5E C3                      	ret
   944                                  
   945                                  .Lcdr_pair:
   946 00000A5F 57                      	push rdi
   947 00000A60 48BF-                   	mov rdi, fmt_space
   947 00000A62 [B701000000000000] 
   948 00000A6A B800000000              	mov rax, 0
   949                                  	ENTER
    33 00000A6F C8000000            <1>  enter 0, 0
    34 00000A73 4883E4F0            <1>  and rsp, ~15
   950 00000A77 E8(00000000)            	call printf
   951                                  	LEAVE
    38 00000A7C C9                  <1>  leave
   952 00000A7D 488B3C24                	mov rdi, qword [rsp]
   953 00000A81 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   954 00000A85 E835FDFFFF              	call print_sexpr
   955 00000A8A 5F                      	pop rdi
   956 00000A8B 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   957 00000A8F E95FFFFFFF              	jmp .Lcdr
   958                                  
   959                                  .Lvector:
   960 00000A94 488B4701                	mov rax, qword [rdi + 1] ; length
   961 00000A98 4883F800                	cmp rax, 0
   962 00000A9C 0F8484000000            	je .Lvector_empty
   963 00000AA2 57                      	push rdi
   964 00000AA3 48BF-                   	mov rdi, fmt_vector
   964 00000AA5 [BD01000000000000] 
   965 00000AAD B800000000              	mov rax, 0
   966                                  	ENTER
    33 00000AB2 C8000000            <1>  enter 0, 0
    34 00000AB6 4883E4F0            <1>  and rsp, ~15
   967 00000ABA E8(00000000)            	call printf
   968                                  	LEAVE
    38 00000ABF C9                  <1>  leave
   969 00000AC0 488B3C24                	mov rdi, qword [rsp]
   970 00000AC4 FF7701                  	push qword [rdi + 1]
   971 00000AC7 6A01                    	push 1
   972 00000AC9 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
   973 00000ACD E8EDFCFFFF              	call print_sexpr
   974                                  .Lvector_loop:
   975                                  	; [rsp] index
   976                                  	; [rsp + 8*1] limit
   977                                  	; [rsp + 8*2] vector
   978 00000AD2 488B0424                	mov rax, qword [rsp]
   979 00000AD6 483B442408              	cmp rax, qword [rsp + 8*1]
   980 00000ADB 7436                    	je .Lvector_end
   981 00000ADD 48BF-                   	mov rdi, fmt_space
   981 00000ADF [B701000000000000] 
   982 00000AE7 B800000000              	mov rax, 0
   983                                  	ENTER
    33 00000AEC C8000000            <1>  enter 0, 0
    34 00000AF0 4883E4F0            <1>  and rsp, ~15
   984 00000AF4 E8(00000000)            	call printf
   985                                  	LEAVE
    38 00000AF9 C9                  <1>  leave
   986 00000AFA 488B0424                	mov rax, qword [rsp]
   987 00000AFE 488B5C2410              	mov rbx, qword [rsp + 8*2]
   988 00000B03 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
   989 00000B08 E8B2FCFFFF              	call print_sexpr
   990 00000B0D 48FF0424                	inc qword [rsp]
   991 00000B11 EBBF                    	jmp .Lvector_loop
   992                                  
   993                                  .Lvector_end:
   994 00000B13 4883C418                	add rsp, 8*3
   995 00000B17 48BF-                   	mov rdi, fmt_rparen
   995 00000B19 [B501000000000000] 
   996 00000B21 E9F8010000              	jmp .Lemit	
   997                                  
   998                                  .Lvector_empty:
   999 00000B26 48BF-                   	mov rdi, fmt_empty_vector
   999 00000B28 [B901000000000000] 
  1000 00000B30 E9E9010000              	jmp .Lemit
  1001                                  
  1002                                  .Lreal:
  1003 00000B35 FF7701                  	push qword [rdi + 1]
  1004 00000B38 F20F100424              	movsd xmm0, qword [rsp]
  1005 00000B3D 4883C408                	add rsp, 8*1
  1006 00000B41 48BF-                   	mov rdi, fmt_real
  1006 00000B43 [C001000000000000] 
  1007 00000B4B B801000000              	mov rax, 1
  1008                                  	ENTER
    33 00000B50 C8000000            <1>  enter 0, 0
    34 00000B54 4883E4F0            <1>  and rsp, ~15
  1009 00000B58 E8(00000000)            	call printf
  1010                                  	LEAVE
    38 00000B5D C9                  <1>  leave
  1011 00000B5E E9D0010000              	jmp .Lend
  1012                                  
  1013                                  .Lrational:
  1014 00000B63 488B7701                	mov rsi, qword [rdi + 1]
  1015 00000B67 488B5709                	mov rdx, qword [rdi + 1 + 8]
  1016 00000B6B 4883FE00                	cmp rsi, 0
  1017 00000B6F 7415                    	je .Lrat_zero
  1018 00000B71 4883FA01                	cmp rdx, 1
  1019 00000B75 741E                    	je .Lrat_int
  1020 00000B77 48BF-                   	mov rdi, fmt_fraction
  1020 00000B79 [C301000000000000] 
  1021 00000B81 E998010000              	jmp .Lemit
  1022                                  
  1023                                  .Lrat_zero:
  1024 00000B86 48BF-                   	mov rdi, fmt_zero
  1024 00000B88 [CB01000000000000] 
  1025 00000B90 E989010000              	jmp .Lemit
  1026                                  
  1027                                  .Lrat_int:
  1028 00000B95 48BF-                   	mov rdi, fmt_int
  1028 00000B97 [CD01000000000000] 
  1029 00000B9F E97A010000              	jmp .Lemit
  1030                                  
  1031                                  .Lstring:
  1032 00000BA4 488D4709                	lea rax, [rdi + 1 + 8]
  1033 00000BA8 50                      	push rax
  1034 00000BA9 FF7701                  	push qword [rdi + 1]
  1035 00000BAC 48BF-                   	mov rdi, fmt_dquote
  1035 00000BAE [1102000000000000] 
  1036 00000BB6 B800000000              	mov rax, 0
  1037                                  	ENTER
    33 00000BBB C8000000            <1>  enter 0, 0
    34 00000BBF 4883E4F0            <1>  and rsp, ~15
  1038 00000BC3 E8(00000000)            	call printf
  1039                                  	LEAVE
    38 00000BC8 C9                  <1>  leave
  1040                                  .Lstring_loop:
  1041                                  	; qword [rsp]: limit
  1042                                  	; qword [rsp + 8*1]: char *
  1043 00000BC9 48833C2400              	cmp qword [rsp], 0
  1044 00000BCE 0F84FD000000            	je .Lstring_end
  1045 00000BD4 488B442408              	mov rax, qword [rsp + 8*1]
  1046 00000BD9 8A00                    	mov al, byte [rax]
  1047 00000BDB 4825FF000000            	and rax, 255
  1048 00000BE1 3C07                    	cmp al, 7
  1049 00000BE3 7468                            je .Lstring_char_7
  1050 00000BE5 3C08                            cmp al, 8
  1051 00000BE7 7470                            je .Lstring_char_8
  1052 00000BE9 3C09                            cmp al, 9
  1053 00000BEB 7478                            je .Lstring_char_9
  1054 00000BED 3C0A                            cmp al, 10
  1055 00000BEF 0F847C000000                    je .Lstring_char_10
  1056 00000BF5 3C0B                            cmp al, 11
  1057 00000BF7 0F8480000000                    je .Lstring_char_11
  1058 00000BFD 3C0C                            cmp al, 12
  1059 00000BFF 0F8484000000                    je .Lstring_char_12
  1060 00000C05 3C0D                            cmp al, 13
  1061 00000C07 0F8488000000                    je .Lstring_char_13
  1062 00000C0D 3C22                            cmp al, 34
  1063 00000C0F 0F848C000000                    je .Lstring_char_34
  1064 00000C15 3C5C                            cmp al, 92              ;         je .Lstring_char_92
  1066 00000C17 3C20                            cmp al, ' '
  1067 00000C19 0F8CA0000000                    jl .Lstring_char_hex
  1068 00000C1F 48BF-                           mov rdi, fmt_string_char
  1068 00000C21 [1302000000000000] 
  1069 00000C29 4889C6                          mov rsi, rax
  1070                                  .Lstring_char_emit:
  1071 00000C2C B800000000                      mov rax, 0
  1072                                          ENTER
    33 00000C31 C8000000            <1>  enter 0, 0
    34 00000C35 4883E4F0            <1>  and rsp, ~15
  1073 00000C39 E8(00000000)                    call printf
  1074                                          LEAVE
    38 00000C3E C9                  <1>  leave
  1075 00000C3F 48FF0C24                        dec qword [rsp]
  1076 00000C43 48FF442408                      inc qword [rsp + 8*1]
  1077 00000C48 E97CFFFFFF                      jmp .Lstring_loop
  1078                                  
  1079                                  .Lstring_char_7:
  1080 00000C4D 48BF-                           mov rdi, fmt_string_char_7
  1080 00000C4F [1602000000000000] 
  1081 00000C57 EBD3                            jmp .Lstring_char_emit
  1082                                  
  1083                                  .Lstring_char_8:
  1084 00000C59 48BF-                           mov rdi, fmt_string_char_8
  1084 00000C5B [1902000000000000] 
  1085 00000C63 EBC7                            jmp .Lstring_char_emit
  1086                                          
  1087                                  .Lstring_char_9:
  1088 00000C65 48BF-                           mov rdi, fmt_string_char_9
  1088 00000C67 [1C02000000000000] 
  1089 00000C6F EBBB                            jmp .Lstring_char_emit
  1090                                  
  1091                                  .Lstring_char_10:
  1092 00000C71 48BF-                           mov rdi, fmt_string_char_10
  1092 00000C73 [1F02000000000000] 
  1093 00000C7B EBAF                            jmp .Lstring_char_emit
  1094                                  
  1095                                  .Lstring_char_11:
  1096 00000C7D 48BF-                           mov rdi, fmt_string_char_11
  1096 00000C7F [2202000000000000] 
  1097 00000C87 EBA3                            jmp .Lstring_char_emit
  1098                                  
  1099                                  .Lstring_char_12:
  1100 00000C89 48BF-                           mov rdi, fmt_string_char_12
  1100 00000C8B [2502000000000000] 
  1101 00000C93 EB97                            jmp .Lstring_char_emit
  1102                                  
  1103                                  .Lstring_char_13:
  1104 00000C95 48BF-                           mov rdi, fmt_string_char_13
  1104 00000C97 [2802000000000000] 
  1105 00000C9F EB8B                            jmp .Lstring_char_emit
  1106                                  
  1107                                  .Lstring_char_34:
  1108 00000CA1 48BF-                           mov rdi, fmt_string_char_34
  1108 00000CA3 [2B02000000000000] 
  1109 00000CAB E97CFFFFFF                      jmp .Lstring_char_emit
  1110                                  
  1111                                  .Lstring_char_92:
  1112 00000CB0 48BF-                           mov rdi, fmt_string_char_92
  1112 00000CB2 [2E02000000000000] 
  1113 00000CBA E96DFFFFFF                      jmp .Lstring_char_emit
  1114                                  
  1115                                  .Lstring_char_hex:
  1116 00000CBF 48BF-                           mov rdi, fmt_string_char_hex
  1116 00000CC1 [3102000000000000] 
  1117 00000CC9 4889C6                          mov rsi, rax
  1118 00000CCC E95BFFFFFF                      jmp .Lstring_char_emit        
  1119                                  
  1120                                  .Lstring_end:
  1121 00000CD1 4883C410                	add rsp, 8 * 2
  1122 00000CD5 48BF-                   	mov rdi, fmt_dquote
  1122 00000CD7 [1102000000000000] 
  1123 00000CDF EB3D                    	jmp .Lemit
  1124                                  
  1125                                  .Lunknown_sexpr_type:
  1126 00000CE1 48BE-                   	mov rsi, fmt_unknown_sexpr_error
  1126 00000CE3 [D101000000000000] 
  1127 00000CEB 4825FF000000            	and rax, 255
  1128 00000CF1 4889C2                  	mov rdx, rax
  1129 00000CF4 4889F9                  	mov rcx, rdi
  1130 00000CF7 488B3C25[00000000]      	mov rdi, qword [stderr]
  1131 00000CFF B800000000              	mov rax, 0
  1132                                  	ENTER
    33 00000D04 C8000000            <1>  enter 0, 0
    34 00000D08 4883E4F0            <1>  and rsp, ~15
  1133 00000D0C E8(00000000)            	call fprintf
  1134                                  	LEAVE
    38 00000D11 C9                  <1>  leave
  1135 00000D12 48C7C0FFFFFFFF          	mov rax, -1
  1136 00000D19 E8(00000000)            	call exit
  1137                                  
  1138                                  .Lemit:
  1139 00000D1E B800000000              	mov rax, 0
  1140                                  	ENTER
    33 00000D23 C8000000            <1>  enter 0, 0
    34 00000D27 4883E4F0            <1>  and rsp, ~15
  1141 00000D2B E8(00000000)            	call printf
  1142                                  	LEAVE
    38 00000D30 C9                  <1>  leave
  1143 00000D31 EB00                    	jmp .Lend
  1144                                  
  1145                                  .Lend:
  1146                                  	LEAVE
    38 00000D33 C9                  <1>  leave
  1147 00000D34 C3                      	ret
  1148                                  
  1149                                  ;;; rdi: address of free variable
  1150                                  ;;; rsi: address of code-pointer
  1151                                  bind_primitive:
  1152                                          ENTER
    33 00000D35 C8000000            <1>  enter 0, 0
    34 00000D39 4883E4F0            <1>  and rsp, ~15
  1153 00000D3D 57                              push rdi
  1154 00000D3E BF11000000                      mov rdi, (1 + 8 + 8)
  1155 00000D43 E85CFAFFFF                      call malloc
  1156 00000D48 5F                              pop rdi
  1157 00000D49 C60005                          mov byte [rax], T_closure
  1158 00000D4C 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  1159 00000D54 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  1160 00000D58 488907                          mov qword [rdi], rax
  1161                                          LEAVE
    38 00000D5B C9                  <1>  leave
  1162 00000D5C C3                              ret
  1163                                  
  1164                                  ;;; PLEASE IMPLEMENT THIS PROCEDURE
  1165                                  L_code_ptr_bin_apply:
  1166                                  	
  1167                                  L_code_ptr_is_null:
  1168                                          ENTER
    33 00000D5D C8000000            <1>  enter 0, 0
    34 00000D61 4883E4F0            <1>  and rsp, ~15
  1169 00000D65 48837D1801                      cmp COUNT, 1
  1170 00000D6A 0F85A5100000                    jne L_error_arg_count_1
  1171 00000D70 488B4520                        mov rax, PARAM(0)
  1172 00000D74 803801                          cmp byte [rax], T_nil
  1173 00000D77 750C                            jne .L_false
  1174 00000D79 48B8-                           mov rax, sob_boolean_true
  1174 00000D7B [0300000000000000] 
  1175 00000D83 EB0A                            jmp .L_end
  1176                                  .L_false:
  1177 00000D85 48B8-                           mov rax, sob_boolean_false
  1177 00000D87 [0200000000000000] 
  1178                                  .L_end:
  1179                                          LEAVE
    38 00000D8F C9                  <1>  leave
  1180 00000D90 C21800                          ret AND_KILL_FRAME(1)
  1181                                  
  1182                                  L_code_ptr_is_pair:
  1183                                          ENTER
    33 00000D93 C8000000            <1>  enter 0, 0
    34 00000D97 4883E4F0            <1>  and rsp, ~15
  1184 00000D9B 48837D1801                      cmp COUNT, 1
  1185 00000DA0 0F856F100000                    jne L_error_arg_count_1
  1186 00000DA6 488B4520                        mov rax, PARAM(0)
  1187 00000DAA 803821                          cmp byte [rax], T_pair
  1188 00000DAD 750C                            jne .L_false
  1189 00000DAF 48B8-                           mov rax, sob_boolean_true
  1189 00000DB1 [0300000000000000] 
  1190 00000DB9 EB0A                            jmp .L_end
  1191                                  .L_false:
  1192 00000DBB 48B8-                           mov rax, sob_boolean_false
  1192 00000DBD [0200000000000000] 
  1193                                  .L_end:
  1194                                          LEAVE
    38 00000DC5 C9                  <1>  leave
  1195 00000DC6 C21800                          ret AND_KILL_FRAME(1)
  1196                                          
  1197                                  L_code_ptr_is_void:
  1198                                          ENTER
    33 00000DC9 C8000000            <1>  enter 0, 0
    34 00000DCD 4883E4F0            <1>  and rsp, ~15
  1199 00000DD1 48837D1801                      cmp COUNT, 1
  1200 00000DD6 0F8539100000                    jne L_error_arg_count_1
  1201 00000DDC 488B4520                        mov rax, PARAM(0)
  1202 00000DE0 803800                          cmp byte [rax], T_void
  1203 00000DE3 750C                            jne .L_false
  1204 00000DE5 48B8-                           mov rax, sob_boolean_true
  1204 00000DE7 [0300000000000000] 
  1205 00000DEF EB0A                            jmp .L_end
  1206                                  .L_false:
  1207 00000DF1 48B8-                           mov rax, sob_boolean_false
  1207 00000DF3 [0200000000000000] 
  1208                                  .L_end:
  1209                                          LEAVE
    38 00000DFB C9                  <1>  leave
  1210 00000DFC C21800                          ret AND_KILL_FRAME(1)
  1211                                  
  1212                                  L_code_ptr_is_char:
  1213                                          ENTER
    33 00000DFF C8000000            <1>  enter 0, 0
    34 00000E03 4883E4F0            <1>  and rsp, ~15
  1214 00000E07 48837D1801                      cmp COUNT, 1
  1215 00000E0C 0F8503100000                    jne L_error_arg_count_1
  1216 00000E12 488B4520                        mov rax, PARAM(0)
  1217 00000E16 803802                          cmp byte [rax], T_char
  1218 00000E19 750C                            jne .L_false
  1219 00000E1B 48B8-                           mov rax, sob_boolean_true
  1219 00000E1D [0300000000000000] 
  1220 00000E25 EB0A                            jmp .L_end
  1221                                  .L_false:
  1222 00000E27 48B8-                           mov rax, sob_boolean_false
  1222 00000E29 [0200000000000000] 
  1223                                  .L_end:
  1224                                          LEAVE
    38 00000E31 C9                  <1>  leave
  1225 00000E32 C21800                          ret AND_KILL_FRAME(1)
  1226                                  
  1227                                  L_code_ptr_is_string:
  1228                                          ENTER
    33 00000E35 C8000000            <1>  enter 0, 0
    34 00000E39 4883E4F0            <1>  and rsp, ~15
  1229 00000E3D 48837D1801                      cmp COUNT, 1
  1230 00000E42 0F85CD0F0000                    jne L_error_arg_count_1
  1231 00000E48 488B4520                        mov rax, PARAM(0)
  1232 00000E4C 803803                          cmp byte [rax], T_string
  1233 00000E4F 750C                            jne .L_false
  1234 00000E51 48B8-                           mov rax, sob_boolean_true
  1234 00000E53 [0300000000000000] 
  1235 00000E5B EB0A                            jmp .L_end
  1236                                  .L_false:
  1237 00000E5D 48B8-                           mov rax, sob_boolean_false
  1237 00000E5F [0200000000000000] 
  1238                                  .L_end:
  1239                                          LEAVE
    38 00000E67 C9                  <1>  leave
  1240 00000E68 C21800                          ret AND_KILL_FRAME(1)
  1241                                  
  1242                                  L_code_ptr_is_symbol:
  1243                                          ENTER
    33 00000E6B C8000000            <1>  enter 0, 0
    34 00000E6F 4883E4F0            <1>  and rsp, ~15
  1244 00000E73 48837D1801                      cmp COUNT, 1
  1245 00000E78 0F85970F0000                    jne L_error_arg_count_1
  1246 00000E7E 488B4520                        mov rax, PARAM(0)
  1247 00000E82 803804                          cmp byte [rax], T_symbol
  1248 00000E85 750C                            jne .L_false
  1249 00000E87 48B8-                           mov rax, sob_boolean_true
  1249 00000E89 [0300000000000000] 
  1250 00000E91 EB0A                            jmp .L_end
  1251                                  .L_false:
  1252 00000E93 48B8-                           mov rax, sob_boolean_false
  1252 00000E95 [0200000000000000] 
  1253                                  .L_end:
  1254                                          LEAVE
    38 00000E9D C9                  <1>  leave
  1255 00000E9E C21800                          ret AND_KILL_FRAME(1)
  1256                                  
  1257                                  L_code_ptr_is_vector:
  1258                                          ENTER
    33 00000EA1 C8000000            <1>  enter 0, 0
    34 00000EA5 4883E4F0            <1>  and rsp, ~15
  1259 00000EA9 48837D1801                      cmp COUNT, 1
  1260 00000EAE 0F85610F0000                    jne L_error_arg_count_1
  1261 00000EB4 488B4520                        mov rax, PARAM(0)
  1262 00000EB8 803822                          cmp byte [rax], T_vector
  1263 00000EBB 750C                            jne .L_false
  1264 00000EBD 48B8-                           mov rax, sob_boolean_true
  1264 00000EBF [0300000000000000] 
  1265 00000EC7 EB0A                            jmp .L_end
  1266                                  .L_false:
  1267 00000EC9 48B8-                           mov rax, sob_boolean_false
  1267 00000ECB [0200000000000000] 
  1268                                  .L_end:
  1269                                          LEAVE
    38 00000ED3 C9                  <1>  leave
  1270 00000ED4 C21800                          ret AND_KILL_FRAME(1)
  1271                                  
  1272                                  L_code_ptr_is_closure:
  1273                                          ENTER
    33 00000ED7 C8000000            <1>  enter 0, 0
    34 00000EDB 4883E4F0            <1>  and rsp, ~15
  1274 00000EDF 48837D1801                      cmp COUNT, 1
  1275 00000EE4 0F852B0F0000                    jne L_error_arg_count_1
  1276 00000EEA 488B4520                        mov rax, PARAM(0)
  1277 00000EEE 803805                          cmp byte [rax], T_closure
  1278 00000EF1 750C                            jne .L_false
  1279 00000EF3 48B8-                           mov rax, sob_boolean_true
  1279 00000EF5 [0300000000000000] 
  1280 00000EFD EB0A                            jmp .L_end
  1281                                  .L_false:
  1282 00000EFF 48B8-                           mov rax, sob_boolean_false
  1282 00000F01 [0200000000000000] 
  1283                                  .L_end:
  1284                                          LEAVE
    38 00000F09 C9                  <1>  leave
  1285 00000F0A C21800                          ret AND_KILL_FRAME(1)
  1286                                  
  1287                                  L_code_ptr_is_real:
  1288                                          ENTER
    33 00000F0D C8000000            <1>  enter 0, 0
    34 00000F11 4883E4F0            <1>  and rsp, ~15
  1289 00000F15 48837D1801                      cmp COUNT, 1
  1290 00000F1A 0F85F50E0000                    jne L_error_arg_count_1
  1291 00000F20 488B4520                        mov rax, PARAM(0)
  1292 00000F24 803812                          cmp byte [rax], T_real
  1293 00000F27 750C                            jne .L_false
  1294 00000F29 48B8-                           mov rax, sob_boolean_true
  1294 00000F2B [0300000000000000] 
  1295 00000F33 EB0A                            jmp .L_end
  1296                                  .L_false:
  1297 00000F35 48B8-                           mov rax, sob_boolean_false
  1297 00000F37 [0200000000000000] 
  1298                                  .L_end:
  1299                                          LEAVE
    38 00000F3F C9                  <1>  leave
  1300 00000F40 C21800                          ret AND_KILL_FRAME(1)
  1301                                  
  1302                                  L_code_ptr_is_rational:
  1303                                          ENTER
    33 00000F43 C8000000            <1>  enter 0, 0
    34 00000F47 4883E4F0            <1>  and rsp, ~15
  1304 00000F4B 48837D1801                      cmp COUNT, 1
  1305 00000F50 0F85BF0E0000                    jne L_error_arg_count_1
  1306 00000F56 488B4520                        mov rax, PARAM(0)
  1307 00000F5A 803811                          cmp byte [rax], T_rational
  1308 00000F5D 750C                            jne .L_false
  1309 00000F5F 48B8-                           mov rax, sob_boolean_true
  1309 00000F61 [0300000000000000] 
  1310 00000F69 EB0A                            jmp .L_end
  1311                                  .L_false:
  1312 00000F6B 48B8-                           mov rax, sob_boolean_false
  1312 00000F6D [0200000000000000] 
  1313                                  .L_end:
  1314                                          LEAVE
    38 00000F75 C9                  <1>  leave
  1315 00000F76 C21800                          ret AND_KILL_FRAME(1)
  1316                                  
  1317                                  L_code_ptr_is_boolean:
  1318                                          ENTER
    33 00000F79 C8000000            <1>  enter 0, 0
    34 00000F7D 4883E4F0            <1>  and rsp, ~15
  1319 00000F81 48837D1801                      cmp COUNT, 1
  1320 00000F86 0F85890E0000                    jne L_error_arg_count_1
  1321 00000F8C 488B4520                        mov rax, PARAM(0)
  1322 00000F90 8A18                            mov bl, byte [rax]
  1323 00000F92 80E308                          and bl, T_boolean
  1324 00000F95 740C                            je .L_false
  1325 00000F97 48B8-                           mov rax, sob_boolean_true
  1325 00000F99 [0300000000000000] 
  1326 00000FA1 EB0A                            jmp .L_end
  1327                                  .L_false:
  1328 00000FA3 48B8-                           mov rax, sob_boolean_false
  1328 00000FA5 [0200000000000000] 
  1329                                  .L_end:
  1330                                          LEAVE
    38 00000FAD C9                  <1>  leave
  1331 00000FAE C21800                          ret AND_KILL_FRAME(1)
  1332                                          
  1333                                  L_code_ptr_is_number:
  1334                                          ENTER
    33 00000FB1 C8000000            <1>  enter 0, 0
    34 00000FB5 4883E4F0            <1>  and rsp, ~15
  1335 00000FB9 48837D1801                      cmp COUNT, 1
  1336 00000FBE 0F85510E0000                    jne L_error_arg_count_1
  1337 00000FC4 488B4520                        mov rax, PARAM(0)
  1338 00000FC8 8A18                            mov bl, byte [rax]
  1339 00000FCA 80E310                          and bl, T_number
  1340 00000FCD 740C                            je .L_false
  1341 00000FCF 48B8-                           mov rax, sob_boolean_true
  1341 00000FD1 [0300000000000000] 
  1342 00000FD9 EB0A                            jmp .L_end
  1343                                  .L_false:
  1344 00000FDB 48B8-                           mov rax, sob_boolean_false
  1344 00000FDD [0200000000000000] 
  1345                                  .L_end:
  1346                                          LEAVE
    38 00000FE5 C9                  <1>  leave
  1347 00000FE6 C21800                          ret AND_KILL_FRAME(1)
  1348                                          
  1349                                  L_code_ptr_is_collection:
  1350                                          ENTER
    33 00000FE9 C8000000            <1>  enter 0, 0
    34 00000FED 4883E4F0            <1>  and rsp, ~15
  1351 00000FF1 48837D1801                      cmp COUNT, 1
  1352 00000FF6 0F85190E0000                    jne L_error_arg_count_1
  1353 00000FFC 488B4520                        mov rax, PARAM(0)
  1354 00001000 8A18                            mov bl, byte [rax]
  1355 00001002 80E320                          and bl, T_collection
  1356 00001005 740C                            je .L_false
  1357 00001007 48B8-                           mov rax, sob_boolean_true
  1357 00001009 [0300000000000000] 
  1358 00001011 EB0A                            jmp .L_end
  1359                                  .L_false:
  1360 00001013 48B8-                           mov rax, sob_boolean_false
  1360 00001015 [0200000000000000] 
  1361                                  .L_end:
  1362                                          LEAVE
    38 0000101D C9                  <1>  leave
  1363 0000101E C21800                          ret AND_KILL_FRAME(1)
  1364                                  
  1365                                  L_code_ptr_cons:
  1366                                          ENTER
    33 00001021 C8000000            <1>  enter 0, 0
    34 00001025 4883E4F0            <1>  and rsp, ~15
  1367 00001029 48837D1802                      cmp COUNT, 2
  1368 0000102E 0F85160E0000                    jne L_error_arg_count_2
  1369 00001034 BF11000000                      mov rdi, (1 + 8 + 8)
  1370 00001039 E866F7FFFF                      call malloc
  1371 0000103E C60021                          mov byte [rax], T_pair
  1372 00001041 488B5D20                        mov rbx, PARAM(0)
  1373 00001045 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1374 00001049 488B5D28                        mov rbx, PARAM(1)
  1375 0000104D 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1376                                          LEAVE
    38 00001051 C9                  <1>  leave
  1377 00001052 C22000                          ret AND_KILL_FRAME(2)
  1378                                  
  1379                                  L_code_ptr_display_sexpr:
  1380                                          ENTER
    33 00001055 C8000000            <1>  enter 0, 0
    34 00001059 4883E4F0            <1>  and rsp, ~15
  1381 0000105D 48837D1801                      cmp COUNT, 1
  1382 00001062 0F85AD0D0000                    jne L_error_arg_count_1
  1383 00001068 488B7D20                        mov rdi, PARAM(0)
  1384 0000106C E84EF7FFFF                      call print_sexpr
  1385 00001071 48B8-                           mov rax, sob_void
  1385 00001073 [0000000000000000] 
  1386                                          LEAVE
    38 0000107B C9                  <1>  leave
  1387 0000107C C21800                          ret AND_KILL_FRAME(1)
  1388                                  
  1389                                  L_code_ptr_write_char:
  1390                                          ENTER
    33 0000107F C8000000            <1>  enter 0, 0
    34 00001083 4883E4F0            <1>  and rsp, ~15
  1391 00001087 48837D1801                      cmp COUNT, 1
  1392 0000108C 0F85830D0000                    jne L_error_arg_count_1
  1393 00001092 488B4520                        mov rax, PARAM(0)
  1394                                          assert_char(rax)
    42 00001096 803802              <1>  cmp byte [%1], %2
    43 00001099 0F854A0E0000        <1>  jne L_error_incorrect_type
  1395 0000109F 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  1396 000010A2 4825FF000000                    and rax, 255
  1397 000010A8 48BF-                           mov rdi, fmt_char
  1397 000010AA [3702000000000000] 
  1398 000010B2 4889C6                          mov rsi, rax
  1399 000010B5 B800000000                      mov rax, 0
  1400                                  	ENTER
    33 000010BA C8000000            <1>  enter 0, 0
    34 000010BE 4883E4F0            <1>  and rsp, ~15
  1401 000010C2 E8(00000000)                    call printf
  1402                                  	LEAVE
    38 000010C7 C9                  <1>  leave
  1403 000010C8 48B8-                           mov rax, sob_void
  1403 000010CA [0000000000000000] 
  1404                                          LEAVE
    38 000010D2 C9                  <1>  leave
  1405 000010D3 C21800                          ret AND_KILL_FRAME(1)
  1406                                  
  1407                                  L_code_ptr_car:
  1408                                          ENTER
    33 000010D6 C8000000            <1>  enter 0, 0
    34 000010DA 4883E4F0            <1>  and rsp, ~15
  1409 000010DE 48837D1801                      cmp COUNT, 1
  1410 000010E3 0F852C0D0000                    jne L_error_arg_count_1
  1411 000010E9 488B4520                        mov rax, PARAM(0)
  1412                                          assert_pair(rax)
    42 000010ED 803821              <1>  cmp byte [%1], %2
    43 000010F0 0F85F30D0000        <1>  jne L_error_incorrect_type
  1413 000010F6 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  1414                                          LEAVE
    38 000010FA C9                  <1>  leave
  1415 000010FB C21800                          ret AND_KILL_FRAME(1)
  1416                                          
  1417                                  L_code_ptr_cdr:
  1418                                          ENTER
    33 000010FE C8000000            <1>  enter 0, 0
    34 00001102 4883E4F0            <1>  and rsp, ~15
  1419 00001106 48837D1801                      cmp COUNT, 1
  1420 0000110B 0F85040D0000                    jne L_error_arg_count_1
  1421 00001111 488B4520                        mov rax, PARAM(0)
  1422                                          assert_pair(rax)
    42 00001115 803821              <1>  cmp byte [%1], %2
    43 00001118 0F85CB0D0000        <1>  jne L_error_incorrect_type
  1423 0000111E 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  1424                                          LEAVE
    38 00001122 C9                  <1>  leave
  1425 00001123 C21800                          ret AND_KILL_FRAME(1)
  1426                                          
  1427                                  L_code_ptr_string_length:
  1428                                          ENTER
    33 00001126 C8000000            <1>  enter 0, 0
    34 0000112A 4883E4F0            <1>  and rsp, ~15
  1429 0000112E 48837D1801                      cmp COUNT, 1
  1430 00001133 0F85DC0C0000                    jne L_error_arg_count_1
  1431 00001139 488B4520                        mov rax, PARAM(0)
  1432                                          assert_string(rax)
    42 0000113D 803803              <1>  cmp byte [%1], %2
    43 00001140 0F85A30D0000        <1>  jne L_error_incorrect_type
  1433 00001146 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  1434 0000114A E83A0C0000                      call make_integer
  1435                                          LEAVE
    38 0000114F C9                  <1>  leave
  1436 00001150 C21800                          ret AND_KILL_FRAME(1)
  1437                                  
  1438                                  L_code_ptr_vector_length:
  1439                                          ENTER
    33 00001153 C8000000            <1>  enter 0, 0
    34 00001157 4883E4F0            <1>  and rsp, ~15
  1440 0000115B 48837D1801                      cmp COUNT, 1
  1441 00001160 0F85AF0C0000                    jne L_error_arg_count_1
  1442 00001166 488B4520                        mov rax, PARAM(0)
  1443                                          assert_vector(rax)
    42 0000116A 803822              <1>  cmp byte [%1], %2
    43 0000116D 0F85760D0000        <1>  jne L_error_incorrect_type
  1444 00001173 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  1445 00001177 E80D0C0000                      call make_integer
  1446                                          LEAVE
    38 0000117C C9                  <1>  leave
  1447 0000117D C21800                          ret AND_KILL_FRAME(1)
  1448                                  
  1449                                  L_code_ptr_real_to_integer:
  1450                                          ENTER
    33 00001180 C8000000            <1>  enter 0, 0
    34 00001184 4883E4F0            <1>  and rsp, ~15
  1451 00001188 48837D1801                      cmp COUNT, 1
  1452 0000118D 0F85820C0000                    jne L_error_arg_count_1
  1453 00001193 488B5D20                        mov rbx, PARAM(0)
  1454                                          assert_real(rbx)
    42 00001197 803B12              <1>  cmp byte [%1], %2
    43 0000119A 0F85490D0000        <1>  jne L_error_incorrect_type
  1455 000011A0 F20F104301                      movsd xmm0, qword [rbx + 1]
  1456 000011A5 F2480F2CF8                      cvttsd2si rdi, xmm0
  1457 000011AA E8DA0B0000                      call make_integer
  1458                                          LEAVE
    38 000011AF C9                  <1>  leave
  1459 000011B0 C21800                          ret AND_KILL_FRAME(1)
  1460                                  
  1461                                  L_code_ptr_exit:
  1462                                          ENTER
    33 000011B3 C8000000            <1>  enter 0, 0
    34 000011B7 4883E4F0            <1>  and rsp, ~15
  1463 000011BB 48837D1800                      cmp COUNT, 0
  1464 000011C0 0F851A0C0000                    jne L_error_arg_count_0
  1465 000011C6 B800000000                      mov rax, 0
  1466 000011CB E8(00000000)                    call exit
  1467                                  
  1468                                  L_code_ptr_integer_to_real:
  1469                                          ENTER
    33 000011D0 C8000000            <1>  enter 0, 0
    34 000011D4 4883E4F0            <1>  and rsp, ~15
  1470 000011D8 48837D1801                      cmp COUNT, 1
  1471 000011DD 0F85320C0000                    jne L_error_arg_count_1
  1472 000011E3 488B4520                        mov rax, PARAM(0)
  1473                                          assert_integer(rax)
    47                              <1>  assert_rational(%1)
    42 000011E7 803811              <2>  cmp byte [%1], %2
    43 000011EA 0F85F90C0000        <2>  jne L_error_incorrect_type
    48 000011F0 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000011F5 0F85EE0C0000        <1>  jne L_error_incorrect_type
  1474 000011FB FF7001                          push qword [rax + 1]
  1475 000011FE F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1476 00001204 E8640B0000                      call make_real
  1477                                          LEAVE
    38 00001209 C9                  <1>  leave
  1478 0000120A C21800                          ret AND_KILL_FRAME(1)
  1479                                  
  1480                                  L_code_ptr_rational_to_real:
  1481                                          ENTER
    33 0000120D C8000000            <1>  enter 0, 0
    34 00001211 4883E4F0            <1>  and rsp, ~15
  1482 00001215 48837D1801                      cmp COUNT, 1
  1483 0000121A 0F85F50B0000                    jne L_error_arg_count_1
  1484 00001220 488B4520                        mov rax, PARAM(0)
  1485                                          assert_rational(rax)
    42 00001224 803811              <1>  cmp byte [%1], %2
    43 00001227 0F85BC0C0000        <1>  jne L_error_incorrect_type
  1486 0000122D FF7001                          push qword [rax + 1]
  1487 00001230 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1488 00001236 FF7009                          push qword [rax + 1 + 8]
  1489 00001239 F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  1490 0000123F F20F5EC1                        divsd xmm0, xmm1
  1491 00001243 E8250B0000                      call make_real
  1492                                          LEAVE
    38 00001248 C9                  <1>  leave
  1493 00001249 C21800                          ret AND_KILL_FRAME(1)
  1494                                  
  1495                                  L_code_ptr_char_to_integer:
  1496                                          ENTER
    33 0000124C C8000000            <1>  enter 0, 0
    34 00001250 4883E4F0            <1>  and rsp, ~15
  1497 00001254 48837D1801                      cmp COUNT, 1
  1498 00001259 0F85B60B0000                    jne L_error_arg_count_1
  1499 0000125F 488B4520                        mov rax, PARAM(0)
  1500                                          assert_char(rax)
    42 00001263 803802              <1>  cmp byte [%1], %2
    43 00001266 0F857D0C0000        <1>  jne L_error_incorrect_type
  1501 0000126C 8A4001                          mov al, byte [rax + 1]
  1502 0000126F 4825FF000000                    and rax, 255
  1503 00001275 4889C7                          mov rdi, rax
  1504 00001278 E80C0B0000                      call make_integer
  1505                                          LEAVE
    38 0000127D C9                  <1>  leave
  1506 0000127E C21800                          ret AND_KILL_FRAME(1)
  1507                                  
  1508                                  L_code_ptr_integer_to_char:
  1509                                          ENTER
    33 00001281 C8000000            <1>  enter 0, 0
    34 00001285 4883E4F0            <1>  and rsp, ~15
  1510 00001289 48837D1801                      cmp COUNT, 1
  1511 0000128E 0F85810B0000                    jne L_error_arg_count_1
  1512 00001294 488B4520                        mov rax, PARAM(0)
  1513                                          assert_integer(rax)
    47                              <1>  assert_rational(%1)
    42 00001298 803811              <2>  cmp byte [%1], %2
    43 0000129B 0F85480C0000        <2>  jne L_error_incorrect_type
    48 000012A1 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000012A6 0F853D0C0000        <1>  jne L_error_incorrect_type
  1514 000012AC 488B5801                        mov rbx, qword [rax + 1]
  1515 000012B0 4883FB00                        cmp rbx, 0
  1516 000012B4 0F8EF50A0000                    jle L_error_integer_range
  1517 000012BA 4881FB00010000                  cmp rbx, 256
  1518 000012C1 0F8DE80A0000                    jge L_error_integer_range
  1519 000012C7 BF02000000                      mov rdi, (1 + 1)
  1520 000012CC E8D3F4FFFF                      call malloc
  1521 000012D1 C60002                          mov byte [rax], T_char
  1522 000012D4 885801                          mov byte [rax + 1], bl
  1523                                          LEAVE
    38 000012D7 C9                  <1>  leave
  1524 000012D8 C21800                          ret AND_KILL_FRAME(1)
  1525                                  
  1526                                  L_code_ptr_trng:
  1527                                          ENTER
    33 000012DB C8000000            <1>  enter 0, 0
    34 000012DF 4883E4F0            <1>  and rsp, ~15
  1528 000012E3 48837D1800                      cmp COUNT, 0
  1529 000012E8 0F85F20A0000                    jne L_error_arg_count_0
  1530 000012EE 480FC7F7                        rdrand rdi
  1531 000012F2 48D1EF                          shr rdi, 1
  1532 000012F5 E88F0A0000                      call make_integer
  1533                                          LEAVE
    38 000012FA C9                  <1>  leave
  1534 000012FB C21000                          ret AND_KILL_FRAME(0)
  1535                                  
  1536                                  L_code_ptr_is_zero:
  1537                                          ENTER
    33 000012FE C8000000            <1>  enter 0, 0
    34 00001302 4883E4F0            <1>  and rsp, ~15
  1538 00001306 48837D1801                      cmp COUNT, 1
  1539 0000130B 0F85040B0000                    jne L_error_arg_count_1
  1540 00001311 488B4520                        mov rax, PARAM(0)
  1541 00001315 803811                          cmp byte [rax], T_rational
  1542 00001318 740A                            je .L_rational
  1543 0000131A 803812                          cmp byte [rax], T_real
  1544 0000131D 740E                            je .L_real
  1545 0000131F E9C50B0000                      jmp L_error_incorrect_type
  1546                                  .L_rational:
  1547 00001324 4883780100                      cmp qword [rax + 1], 0
  1548 00001329 7420                            je .L_zero
  1549 0000132B EB12                            jmp .L_not_zero
  1550                                  .L_real:
  1551 0000132D 660FEFC0                        pxor xmm0, xmm0
  1552 00001331 FF7001                          push qword [rax + 1]
  1553 00001334 F20F100C24                      movsd xmm1, qword [rsp]
  1554 00001339 660F2EC1                        ucomisd xmm0, xmm1
  1555 0000133D 740C                            je .L_zero
  1556                                  .L_not_zero:
  1557 0000133F 48B8-                           mov rax, sob_boolean_false
  1557 00001341 [0200000000000000] 
  1558 00001349 EB0A                            jmp .L_end
  1559                                  .L_zero:
  1560 0000134B 48B8-                           mov rax, sob_boolean_true
  1560 0000134D [0300000000000000] 
  1561                                  .L_end:
  1562                                          LEAVE
    38 00001355 C9                  <1>  leave
  1563 00001356 C21800                          ret AND_KILL_FRAME(1)
  1564                                  
  1565                                  L_code_ptr_is_integer:
  1566                                          ENTER
    33 00001359 C8000000            <1>  enter 0, 0
    34 0000135D 4883E4F0            <1>  and rsp, ~15
  1567 00001361 48837D1801                      cmp COUNT, 1
  1568 00001366 0F85A90A0000                    jne L_error_arg_count_1
  1569 0000136C 488B4520                        mov rax, PARAM(0)
  1570 00001370 803811                          cmp byte [rax], T_rational
  1571 00001373 7513                            jne .L_false
  1572 00001375 4883780901                      cmp qword [rax + 1 + 8], 1
  1573 0000137A 750C                            jne .L_false
  1574 0000137C 48B8-                           mov rax, sob_boolean_true
  1574 0000137E [0300000000000000] 
  1575 00001386 EB0A                            jmp .L_exit
  1576                                  .L_false:
  1577 00001388 48B8-                           mov rax, sob_boolean_false
  1577 0000138A [0200000000000000] 
  1578                                  .L_exit:
  1579                                          LEAVE
    38 00001392 C9                  <1>  leave
  1580 00001393 C21800                          ret AND_KILL_FRAME(1)
  1581                                  
  1582                                  L_code_ptr_raw_bin_add_rr:
  1583                                          ENTER
    33 00001396 C8000000            <1>  enter 0, 0
    34 0000139A 4883E4F0            <1>  and rsp, ~15
  1584 0000139E 48837D1802                      cmp COUNT, 2
  1585 000013A3 0F85A10A0000                    jne L_error_arg_count_2
  1586 000013A9 488B5D20                        mov rbx, PARAM(0)
  1587                                          assert_real(rbx)
    42 000013AD 803B12              <1>  cmp byte [%1], %2
    43 000013B0 0F85330B0000        <1>  jne L_error_incorrect_type
  1588 000013B6 488B4D28                        mov rcx, PARAM(1)
  1589                                          assert_real(rcx)
    42 000013BA 803912              <1>  cmp byte [%1], %2
    43 000013BD 0F85260B0000        <1>  jne L_error_incorrect_type
  1590 000013C3 F20F104301                      movsd xmm0, qword [rbx + 1]
  1591 000013C8 F20F104901                      movsd xmm1, qword [rcx + 1]
  1592 000013CD F20F58C1                        addsd xmm0, xmm1
  1593 000013D1 E897090000                      call make_real
  1594                                          LEAVE
    38 000013D6 C9                  <1>  leave
  1595 000013D7 C22000                          ret AND_KILL_FRAME(2)
  1596                                  
  1597                                  L_code_ptr_raw_bin_sub_rr:
  1598                                          ENTER
    33 000013DA C8000000            <1>  enter 0, 0
    34 000013DE 4883E4F0            <1>  and rsp, ~15
  1599 000013E2 48837D1802                      cmp COUNT, 2
  1600 000013E7 0F855D0A0000                    jne L_error_arg_count_2
  1601 000013ED 488B5D20                        mov rbx, PARAM(0)
  1602                                          assert_real(rbx)
    42 000013F1 803B12              <1>  cmp byte [%1], %2
    43 000013F4 0F85EF0A0000        <1>  jne L_error_incorrect_type
  1603 000013FA 488B4D28                        mov rcx, PARAM(1)
  1604                                          assert_real(rcx)
    42 000013FE 803912              <1>  cmp byte [%1], %2
    43 00001401 0F85E20A0000        <1>  jne L_error_incorrect_type
  1605 00001407 F20F104301                      movsd xmm0, qword [rbx + 1]
  1606 0000140C F20F104901                      movsd xmm1, qword [rcx + 1]
  1607 00001411 F20F5CC1                        subsd xmm0, xmm1
  1608 00001415 E853090000                      call make_real
  1609                                          LEAVE
    38 0000141A C9                  <1>  leave
  1610 0000141B C22000                          ret AND_KILL_FRAME(2)
  1611                                  
  1612                                  L_code_ptr_raw_bin_mul_rr:
  1613                                          ENTER
    33 0000141E C8000000            <1>  enter 0, 0
    34 00001422 4883E4F0            <1>  and rsp, ~15
  1614 00001426 48837D1802                      cmp COUNT, 2
  1615 0000142B 0F85190A0000                    jne L_error_arg_count_2
  1616 00001431 488B5D20                        mov rbx, PARAM(0)
  1617                                          assert_real(rbx)
    42 00001435 803B12              <1>  cmp byte [%1], %2
    43 00001438 0F85AB0A0000        <1>  jne L_error_incorrect_type
  1618 0000143E 488B4D28                        mov rcx, PARAM(1)
  1619                                          assert_real(rcx)
    42 00001442 803912              <1>  cmp byte [%1], %2
    43 00001445 0F859E0A0000        <1>  jne L_error_incorrect_type
  1620 0000144B F20F104301                      movsd xmm0, qword [rbx + 1]
  1621 00001450 F20F104901                      movsd xmm1, qword [rcx + 1]
  1622 00001455 F20F59C1                        mulsd xmm0, xmm1
  1623 00001459 E80F090000                      call make_real
  1624                                          LEAVE
    38 0000145E C9                  <1>  leave
  1625 0000145F C22000                          ret AND_KILL_FRAME(2)
  1626                                  
  1627                                  L_code_ptr_raw_bin_div_rr:
  1628                                          ENTER
    33 00001462 C8000000            <1>  enter 0, 0
    34 00001466 4883E4F0            <1>  and rsp, ~15
  1629 0000146A 48837D1802                      cmp COUNT, 2
  1630 0000146F 0F85D5090000                    jne L_error_arg_count_2
  1631 00001475 488B5D20                        mov rbx, PARAM(0)
  1632                                          assert_real(rbx)
    42 00001479 803B12              <1>  cmp byte [%1], %2
    43 0000147C 0F85670A0000        <1>  jne L_error_incorrect_type
  1633 00001482 488B4D28                        mov rcx, PARAM(1)
  1634                                          assert_real(rcx)
    42 00001486 803912              <1>  cmp byte [%1], %2
    43 00001489 0F855A0A0000        <1>  jne L_error_incorrect_type
  1635 0000148F F20F104301                      movsd xmm0, qword [rbx + 1]
  1636 00001494 F20F104901                      movsd xmm1, qword [rcx + 1]
  1637 00001499 660FEFD2                        pxor xmm2, xmm2
  1638 0000149D 660F2ECA                        ucomisd xmm1, xmm2
  1639 000014A1 0F84730A0000                    je L_error_division_by_zero
  1640 000014A7 F20F5EC1                        divsd xmm0, xmm1
  1641 000014AB E8BD080000                      call make_real
  1642                                          LEAVE
    38 000014B0 C9                  <1>  leave
  1643 000014B1 C22000                          ret AND_KILL_FRAME(2)
  1644                                  
  1645                                  L_code_ptr_raw_bin_add_qq:
  1646                                          ENTER
    33 000014B4 C8000000            <1>  enter 0, 0
    34 000014B8 4883E4F0            <1>  and rsp, ~15
  1647 000014BC 48837D1802                      cmp COUNT, 2
  1648 000014C1 0F8583090000                    jne L_error_arg_count_2
  1649 000014C7 4C8B4520                        mov r8, PARAM(0)
  1650                                          assert_rational(r8)
    42 000014CB 41803811            <1>  cmp byte [%1], %2
    43 000014CF 0F85140A0000        <1>  jne L_error_incorrect_type
  1651 000014D5 4C8B4D28                        mov r9, PARAM(1)
  1652                                          assert_rational(r9)
    42 000014D9 41803911            <1>  cmp byte [%1], %2
    43 000014DD 0F85060A0000        <1>  jne L_error_incorrect_type
  1653 000014E3 498B4001                        mov rax, qword [r8 + 1] ; num1
  1654 000014E7 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1655 000014EB 4899                            cqo
  1656 000014ED 48F7EB                          imul rbx
  1657 000014F0 4889C6                          mov rsi, rax
  1658 000014F3 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1659 000014F7 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1660 000014FB 4899                            cqo
  1661 000014FD 48F7EB                          imul rbx
  1662 00001500 4801C6                          add rsi, rax
  1663 00001503 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1664 00001507 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1665 0000150B 4899                            cqo
  1666 0000150D 48F7EB                          imul rbx
  1667 00001510 4889C7                          mov rdi, rax
  1668 00001513 E827010000                      call normalize_rational
  1669                                          LEAVE
    38 00001518 C9                  <1>  leave
  1670 00001519 C22000                          ret AND_KILL_FRAME(2)
  1671                                  
  1672                                  L_code_ptr_raw_bin_sub_qq:
  1673                                          ENTER
    33 0000151C C8000000            <1>  enter 0, 0
    34 00001520 4883E4F0            <1>  and rsp, ~15
  1674 00001524 48837D1802                      cmp COUNT, 2
  1675 00001529 0F851B090000                    jne L_error_arg_count_2
  1676 0000152F 4C8B4520                        mov r8, PARAM(0)
  1677                                          assert_rational(r8)
    42 00001533 41803811            <1>  cmp byte [%1], %2
    43 00001537 0F85AC090000        <1>  jne L_error_incorrect_type
  1678 0000153D 4C8B4D28                        mov r9, PARAM(1)
  1679                                          assert_rational(r9)
    42 00001541 41803911            <1>  cmp byte [%1], %2
    43 00001545 0F859E090000        <1>  jne L_error_incorrect_type
  1680 0000154B 498B4001                        mov rax, qword [r8 + 1] ; num1
  1681 0000154F 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1682 00001553 4899                            cqo
  1683 00001555 48F7EB                          imul rbx
  1684 00001558 4889C6                          mov rsi, rax
  1685 0000155B 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1686 0000155F 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1687 00001563 4899                            cqo
  1688 00001565 48F7EB                          imul rbx
  1689 00001568 4829C6                          sub rsi, rax
  1690 0000156B 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1691 0000156F 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1692 00001573 4899                            cqo
  1693 00001575 48F7EB                          imul rbx
  1694 00001578 4889C7                          mov rdi, rax
  1695 0000157B E8BF000000                      call normalize_rational
  1696                                          LEAVE
    38 00001580 C9                  <1>  leave
  1697 00001581 C22000                          ret AND_KILL_FRAME(2)
  1698                                  
  1699                                  L_code_ptr_raw_bin_mul_qq:
  1700                                          ENTER
    33 00001584 C8000000            <1>  enter 0, 0
    34 00001588 4883E4F0            <1>  and rsp, ~15
  1701 0000158C 48837D1802                      cmp COUNT, 2
  1702 00001591 0F85B3080000                    jne L_error_arg_count_2
  1703 00001597 4C8B4520                        mov r8, PARAM(0)
  1704                                          assert_rational(r8)
    42 0000159B 41803811            <1>  cmp byte [%1], %2
    43 0000159F 0F8544090000        <1>  jne L_error_incorrect_type
  1705 000015A5 4C8B4D28                        mov r9, PARAM(1)
  1706                                          assert_rational(r9)
    42 000015A9 41803911            <1>  cmp byte [%1], %2
    43 000015AD 0F8536090000        <1>  jne L_error_incorrect_type
  1707 000015B3 498B4001                        mov rax, qword [r8 + 1] ; num1
  1708 000015B7 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1709 000015BB 4899                            cqo
  1710 000015BD 48F7EB                          imul rbx
  1711 000015C0 4889C6                          mov rsi, rax
  1712 000015C3 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1713 000015C7 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1714 000015CB 4899                            cqo
  1715 000015CD 48F7EB                          imul rbx
  1716 000015D0 4889C7                          mov rdi, rax
  1717 000015D3 E867000000                      call normalize_rational
  1718                                          LEAVE
    38 000015D8 C9                  <1>  leave
  1719 000015D9 C22000                          ret AND_KILL_FRAME(2)
  1720                                          
  1721                                  L_code_ptr_raw_bin_div_qq:
  1722                                          ENTER
    33 000015DC C8000000            <1>  enter 0, 0
    34 000015E0 4883E4F0            <1>  and rsp, ~15
  1723 000015E4 48837D1802                      cmp COUNT, 2
  1724 000015E9 0F855B080000                    jne L_error_arg_count_2
  1725 000015EF 4C8B4520                        mov r8, PARAM(0)
  1726                                          assert_rational(r8)
    42 000015F3 41803811            <1>  cmp byte [%1], %2
    43 000015F7 0F85EC080000        <1>  jne L_error_incorrect_type
  1727 000015FD 4C8B4D28                        mov r9, PARAM(1)
  1728                                          assert_rational(r9)
    42 00001601 41803911            <1>  cmp byte [%1], %2
    43 00001605 0F85DE080000        <1>  jne L_error_incorrect_type
  1729 0000160B 4983790100                      cmp qword [r9 + 1], 0
  1730 00001610 0F8404090000                    je L_error_division_by_zero
  1731 00001616 498B4001                        mov rax, qword [r8 + 1] ; num1
  1732 0000161A 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1733 0000161E 4899                            cqo
  1734 00001620 48F7EB                          imul rbx
  1735 00001623 4889C6                          mov rsi, rax
  1736 00001626 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1737 0000162A 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1738 0000162E 4899                            cqo
  1739 00001630 48F7EB                          imul rbx
  1740 00001633 4889C7                          mov rdi, rax
  1741 00001636 E804000000                      call normalize_rational
  1742                                          LEAVE
    38 0000163B C9                  <1>  leave
  1743 0000163C C22000                          ret AND_KILL_FRAME(2)
  1744                                          
  1745                                  normalize_rational:
  1746 0000163F 56                              push rsi
  1747 00001640 57                              push rdi
  1748 00001641 E839000000                      call gcd
  1749 00001646 4889C3                          mov rbx, rax
  1750 00001649 58                              pop rax
  1751 0000164A 4899                            cqo
  1752 0000164C 48F7FB                          idiv rbx
  1753 0000164F 4989C0                          mov r8, rax
  1754 00001652 58                              pop rax
  1755 00001653 4899                            cqo
  1756 00001655 48F7FB                          idiv rbx
  1757 00001658 4989C1                          mov r9, rax
  1758 0000165B BF11000000                      mov rdi, (1 + 8 + 8)
  1759 00001660 E83FF1FFFF                      call malloc
  1760 00001665 C60011                          mov byte [rax], T_rational
  1761 00001668 4C894801                        mov qword [rax + 1], r9
  1762 0000166C 4C894009                        mov qword [rax + 1 + 8], r8
  1763 00001670 C3                              ret
  1764                                  
  1765                                  iabs:
  1766 00001671 4889F8                          mov rax, rdi
  1767 00001674 4883F800                        cmp rax, 0
  1768 00001678 7C01                            jl .Lneg
  1769 0000167A C3                              ret
  1770                                  .Lneg:
  1771 0000167B 48F7D8                          neg rax
  1772 0000167E C3                              ret
  1773                                  
  1774                                  gcd:
  1775 0000167F E8EDFFFFFF                      call iabs
  1776 00001684 4889C3                          mov rbx, rax
  1777 00001687 4889F7                          mov rdi, rsi
  1778 0000168A E8E2FFFFFF                      call iabs
  1779 0000168F 4883F800                        cmp rax, 0
  1780 00001693 7502                            jne .L0
  1781 00001695 4893                            xchg rax, rbx
  1782                                  .L0:
  1783 00001697 4883FB00                        cmp rbx, 0
  1784 0000169B 740C                            je .L1
  1785 0000169D 4899                            cqo
  1786 0000169F 48F7F3                          div rbx
  1787 000016A2 4889D0                          mov rax, rdx
  1788 000016A5 4893                            xchg rax, rbx
  1789 000016A7 EBEE                            jmp .L0
  1790                                  .L1:
  1791 000016A9 C3                              ret
  1792                                  
  1793                                  L_code_ptr_error:
  1794                                          ENTER
    33 000016AA C8000000            <1>  enter 0, 0
    34 000016AE 4883E4F0            <1>  and rsp, ~15
  1795 000016B2 48837D1802                      cmp COUNT, 2
  1796 000016B7 0F858D070000                    jne L_error_arg_count_2
  1797 000016BD 488B7520                        mov rsi, PARAM(0)
  1798                                          assert_symbol(rsi)
    42 000016C1 803E04              <1>  cmp byte [%1], %2
    43 000016C4 0F851F080000        <1>  jne L_error_incorrect_type
  1799 000016CA 488B7528                        mov rsi, PARAM(1)
  1800                                          assert_string(rsi)
    42 000016CE 803E03              <1>  cmp byte [%1], %2
    43 000016D1 0F8512080000        <1>  jne L_error_incorrect_type
  1801 000016D7 48BF-                           mov rdi, fmt_scheme_error_part_1
  1801 000016D9 [6F03000000000000] 
  1802 000016E1 B800000000                      mov rax, 0
  1803                                  	ENTER
    33 000016E6 C8000000            <1>  enter 0, 0
    34 000016EA 4883E4F0            <1>  and rsp, ~15
  1804 000016EE E8(00000000)                    call printf
  1805                                  	LEAVE
    38 000016F3 C9                  <1>  leave
  1806 000016F4 488B7D20                        mov rdi, PARAM(0)
  1807 000016F8 E8C2F0FFFF                      call print_sexpr
  1808 000016FD 48BF-                           mov rdi, fmt_scheme_error_part_2
  1808 000016FF [8303000000000000] 
  1809 00001707 B800000000                      mov rax, 0
  1810                                  	ENTER
    33 0000170C C8000000            <1>  enter 0, 0
    34 00001710 4883E4F0            <1>  and rsp, ~15
  1811 00001714 E8(00000000)                    call printf
  1812                                  	LEAVE
    38 00001719 C9                  <1>  leave
  1813 0000171A 488B4528                        mov rax, PARAM(1)       ; sob_string
  1814 0000171E BE01000000                      mov rsi, 1              ; size = 1 byte
  1815 00001723 488B5001                        mov rdx, qword [rax + 1] ; length
  1816 00001727 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  1817 0000172B 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
  1818 00001733 E8(00000000)                    call fwrite
  1819 00001738 48BF-                           mov rdi, fmt_scheme_error_part_3
  1819 0000173A [C503000000000000] 
  1820 00001742 B800000000                      mov rax, 0
  1821                                  	ENTER
    33 00001747 C8000000            <1>  enter 0, 0
    34 0000174B 4883E4F0            <1>  and rsp, ~15
  1822 0000174F E8(00000000)                    call printf
  1823                                  	LEAVE
    38 00001754 C9                  <1>  leave
  1824 00001755 48C7C0F7FFFFFF                  mov rax, -9
  1825 0000175C E8(00000000)                    call exit
  1826                                  
  1827                                  L_code_ptr_raw_less_than_rr:
  1828                                          ENTER
    33 00001761 C8000000            <1>  enter 0, 0
    34 00001765 4883E4F0            <1>  and rsp, ~15
  1829 00001769 48837D1802                      cmp COUNT, 2
  1830 0000176E 0F85D6060000                    jne L_error_arg_count_2
  1831 00001774 488B7520                        mov rsi, PARAM(0)
  1832                                          assert_real(rsi)
    42 00001778 803E12              <1>  cmp byte [%1], %2
    43 0000177B 0F8568070000        <1>  jne L_error_incorrect_type
  1833 00001781 488B7D28                        mov rdi, PARAM(1)
  1834                                          assert_real(rdi)
    42 00001785 803F12              <1>  cmp byte [%1], %2
    43 00001788 0F855B070000        <1>  jne L_error_incorrect_type
  1835 0000178E F20F104601                      movsd xmm0, qword [rsi + 1]
  1836 00001793 F20F104F01                      movsd xmm1, qword [rdi + 1]
  1837 00001798 660F2FC1                        comisd xmm0, xmm1
  1838 0000179C 730C                            jae .L_false
  1839 0000179E 48B8-                           mov rax, sob_boolean_true
  1839 000017A0 [0300000000000000] 
  1840 000017A8 EB0A                            jmp .L_exit
  1841                                  .L_false:
  1842 000017AA 48B8-                           mov rax, sob_boolean_false
  1842 000017AC [0200000000000000] 
  1843                                  .L_exit:
  1844                                          LEAVE
    38 000017B4 C9                  <1>  leave
  1845 000017B5 C22000                          ret AND_KILL_FRAME(2)
  1846                                          
  1847                                  L_code_ptr_raw_less_than_qq:
  1848                                          ENTER
    33 000017B8 C8000000            <1>  enter 0, 0
    34 000017BC 4883E4F0            <1>  and rsp, ~15
  1849 000017C0 48837D1802                      cmp COUNT, 2
  1850 000017C5 0F857F060000                    jne L_error_arg_count_2
  1851 000017CB 488B7520                        mov rsi, PARAM(0)
  1852                                          assert_rational(rsi)
    42 000017CF 803E11              <1>  cmp byte [%1], %2
    43 000017D2 0F8511070000        <1>  jne L_error_incorrect_type
  1853 000017D8 488B7D28                        mov rdi, PARAM(1)
  1854                                          assert_rational(rdi)
    42 000017DC 803F11              <1>  cmp byte [%1], %2
    43 000017DF 0F8504070000        <1>  jne L_error_incorrect_type
  1855 000017E5 488B4601                        mov rax, qword [rsi + 1] ; num1
  1856 000017E9 4899                            cqo
  1857 000017EB 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  1858 000017EF 4889C1                          mov rcx, rax
  1859 000017F2 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
  1860 000017F6 4899                            cqo
  1861 000017F8 48F76F01                        imul qword [rdi + 1]          ; num2
  1862 000017FC 4829C1                          sub rcx, rax
  1863 000017FF 7D0C                            jge .L_false
  1864 00001801 48B8-                           mov rax, sob_boolean_true
  1864 00001803 [0300000000000000] 
  1865 0000180B EB0A                            jmp .L_exit
  1866                                  .L_false:
  1867 0000180D 48B8-                           mov rax, sob_boolean_false
  1867 0000180F [0200000000000000] 
  1868                                  .L_exit:
  1869                                          LEAVE
    38 00001817 C9                  <1>  leave
  1870 00001818 C22000                          ret AND_KILL_FRAME(2)
  1871                                  
  1872                                  
  1873                                  L_code_ptr_raw_equal_rr:
  1874                                          ENTER
    33 0000181B C8000000            <1>  enter 0, 0
    34 0000181F 4883E4F0            <1>  and rsp, ~15
  1875 00001823 48837D1802                      cmp COUNT, 2
  1876 00001828 0F851C060000                    jne L_error_arg_count_2
  1877 0000182E 488B7520                        mov rsi, PARAM(0)
  1878                                          assert_real(rsi)
    42 00001832 803E12              <1>  cmp byte [%1], %2
    43 00001835 0F85AE060000        <1>  jne L_error_incorrect_type
  1879 0000183B 488B7D28                        mov rdi, PARAM(1)
  1880                                          assert_real(rdi)
    42 0000183F 803F12              <1>  cmp byte [%1], %2
    43 00001842 0F85A1060000        <1>  jne L_error_incorrect_type
  1881 00001848 F20F104601                      movsd xmm0, qword [rsi + 1]
  1882 0000184D F20F104F01                      movsd xmm1, qword [rdi + 1]
  1883 00001852 660F2FC1                        comisd xmm0, xmm1
  1884 00001856 750C                            jne .L_false
  1885 00001858 48B8-                           mov rax, sob_boolean_true
  1885 0000185A [0300000000000000] 
  1886 00001862 EB0A                            jmp .L_exit
  1887                                  .L_false:
  1888 00001864 48B8-                           mov rax, sob_boolean_false
  1888 00001866 [0200000000000000] 
  1889                                  .L_exit:
  1890                                          LEAVE
    38 0000186E C9                  <1>  leave
  1891 0000186F C22000                          ret AND_KILL_FRAME(2)
  1892                                          
  1893                                  L_code_ptr_raw_equal_qq:
  1894                                          ENTER
    33 00001872 C8000000            <1>  enter 0, 0
    34 00001876 4883E4F0            <1>  and rsp, ~15
  1895 0000187A 48837D1802                      cmp COUNT, 2
  1896 0000187F 0F85C5050000                    jne L_error_arg_count_2
  1897 00001885 488B7520                        mov rsi, PARAM(0)
  1898                                          assert_rational(rsi)
    42 00001889 803E11              <1>  cmp byte [%1], %2
    43 0000188C 0F8557060000        <1>  jne L_error_incorrect_type
  1899 00001892 488B7D28                        mov rdi, PARAM(1)
  1900                                          assert_rational(rdi)
    42 00001896 803F11              <1>  cmp byte [%1], %2
    43 00001899 0F854A060000        <1>  jne L_error_incorrect_type
  1901 0000189F 488B4601                        mov rax, qword [rsi + 1] ; num1
  1902 000018A3 4899                            cqo
  1903 000018A5 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  1904 000018A9 4889C1                          mov rcx, rax
  1905 000018AC 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  1906 000018B0 4899                            cqo
  1907 000018B2 48F76F01                        imul qword [rdi + 1]          ; num2
  1908 000018B6 4829C1                          sub rcx, rax
  1909 000018B9 750C                            jne .L_false
  1910 000018BB 48B8-                           mov rax, sob_boolean_true
  1910 000018BD [0300000000000000] 
  1911 000018C5 EB0A                            jmp .L_exit
  1912                                  .L_false:
  1913 000018C7 48B8-                           mov rax, sob_boolean_false
  1913 000018C9 [0200000000000000] 
  1914                                  .L_exit:
  1915                                          LEAVE
    38 000018D1 C9                  <1>  leave
  1916 000018D2 C22000                          ret AND_KILL_FRAME(2)
  1917                                  
  1918                                  L_code_ptr_quotient:
  1919                                          ENTER
    33 000018D5 C8000000            <1>  enter 0, 0
    34 000018D9 4883E4F0            <1>  and rsp, ~15
  1920 000018DD 48837D1802                      cmp COUNT, 2
  1921 000018E2 0F8562050000                    jne L_error_arg_count_2
  1922 000018E8 488B7520                        mov rsi, PARAM(0)
  1923                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 000018EC 803E11              <2>  cmp byte [%1], %2
    43 000018EF 0F85F4050000        <2>  jne L_error_incorrect_type
    48 000018F5 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000018FA 0F85E9050000        <1>  jne L_error_incorrect_type
  1924 00001900 488B7D28                        mov rdi, PARAM(1)
  1925                                          assert_integer(rdi)
    47                              <1>  assert_rational(%1)
    42 00001904 803F11              <2>  cmp byte [%1], %2
    43 00001907 0F85DC050000        <2>  jne L_error_incorrect_type
    48 0000190D 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001912 0F85D1050000        <1>  jne L_error_incorrect_type
  1926 00001918 488B4601                        mov rax, qword [rsi + 1]
  1927 0000191C 488B5F01                        mov rbx, qword [rdi + 1]
  1928 00001920 4883FB00                        cmp rbx, 0
  1929 00001924 0F84F0050000                    je L_error_division_by_zero
  1930 0000192A 4899                            cqo
  1931 0000192C 48F7FB                          idiv rbx
  1932 0000192F 4889C7                          mov rdi, rax
  1933 00001932 E852040000                      call make_integer
  1934                                          LEAVE
    38 00001937 C9                  <1>  leave
  1935 00001938 C22000                          ret AND_KILL_FRAME(2)
  1936                                          
  1937                                  L_code_ptr_remainder:
  1938                                          ENTER
    33 0000193B C8000000            <1>  enter 0, 0
    34 0000193F 4883E4F0            <1>  and rsp, ~15
  1939 00001943 48837D1802                      cmp COUNT, 2
  1940 00001948 0F85FC040000                    jne L_error_arg_count_2
  1941 0000194E 488B7520                        mov rsi, PARAM(0)
  1942                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001952 803E11              <2>  cmp byte [%1], %2
    43 00001955 0F858E050000        <2>  jne L_error_incorrect_type
    48 0000195B 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001960 0F8583050000        <1>  jne L_error_incorrect_type
  1943 00001966 488B7D28                        mov rdi, PARAM(1)
  1944                                          assert_integer(rdi)
    47                              <1>  assert_rational(%1)
    42 0000196A 803F11              <2>  cmp byte [%1], %2
    43 0000196D 0F8576050000        <2>  jne L_error_incorrect_type
    48 00001973 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001978 0F856B050000        <1>  jne L_error_incorrect_type
  1945 0000197E 488B4601                        mov rax, qword [rsi + 1]
  1946 00001982 488B5F01                        mov rbx, qword [rdi + 1]
  1947 00001986 4883FB00                        cmp rbx, 0
  1948 0000198A 0F848A050000                    je L_error_division_by_zero
  1949 00001990 4899                            cqo
  1950 00001992 48F7FB                          idiv rbx
  1951 00001995 4889D7                          mov rdi, rdx
  1952 00001998 E8EC030000                      call make_integer
  1953                                          LEAVE
    38 0000199D C9                  <1>  leave
  1954 0000199E C22000                          ret AND_KILL_FRAME(2)
  1955                                  
  1956                                  L_code_ptr_set_car:
  1957                                          ENTER
    33 000019A1 C8000000            <1>  enter 0, 0
    34 000019A5 4883E4F0            <1>  and rsp, ~15
  1958 000019A9 48837D1802                      cmp COUNT, 2
  1959 000019AE 0F8596040000                    jne L_error_arg_count_2
  1960 000019B4 488B4520                        mov rax, PARAM(0)
  1961                                          assert_pair(rax)
    42 000019B8 803821              <1>  cmp byte [%1], %2
    43 000019BB 0F8528050000        <1>  jne L_error_incorrect_type
  1962 000019C1 488B5D28                        mov rbx, PARAM(1)
  1963 000019C5 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1964 000019C9 48B8-                           mov rax, sob_void
  1964 000019CB [0000000000000000] 
  1965                                          LEAVE
    38 000019D3 C9                  <1>  leave
  1966 000019D4 C22000                          ret AND_KILL_FRAME(2)
  1967                                  
  1968                                  L_code_ptr_set_cdr:
  1969                                          ENTER
    33 000019D7 C8000000            <1>  enter 0, 0
    34 000019DB 4883E4F0            <1>  and rsp, ~15
  1970 000019DF 48837D1802                      cmp COUNT, 2
  1971 000019E4 0F8560040000                    jne L_error_arg_count_2
  1972 000019EA 488B4520                        mov rax, PARAM(0)
  1973                                          assert_pair(rax)
    42 000019EE 803821              <1>  cmp byte [%1], %2
    43 000019F1 0F85F2040000        <1>  jne L_error_incorrect_type
  1974 000019F7 488B5D28                        mov rbx, PARAM(1)
  1975 000019FB 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1976 000019FF 48B8-                           mov rax, sob_void
  1976 00001A01 [0000000000000000] 
  1977                                          LEAVE
    38 00001A09 C9                  <1>  leave
  1978 00001A0A C22000                          ret AND_KILL_FRAME(2)
  1979                                  
  1980                                  L_code_ptr_string_ref:
  1981                                          ENTER
    33 00001A0D C8000000            <1>  enter 0, 0
    34 00001A11 4883E4F0            <1>  and rsp, ~15
  1982 00001A15 48837D1802                      cmp COUNT, 2
  1983 00001A1A 0F852A040000                    jne L_error_arg_count_2
  1984 00001A20 488B7D20                        mov rdi, PARAM(0)
  1985                                          assert_string(rdi)
    42 00001A24 803F03              <1>  cmp byte [%1], %2
    43 00001A27 0F85BC040000        <1>  jne L_error_incorrect_type
  1986 00001A2D 488B7528                        mov rsi, PARAM(1)
  1987                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001A31 803E11              <2>  cmp byte [%1], %2
    43 00001A34 0F85AF040000        <2>  jne L_error_incorrect_type
    48 00001A3A 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001A3F 0F85A4040000        <1>  jne L_error_incorrect_type
  1988 00001A45 488B5701                        mov rdx, qword [rdi + 1]
  1989 00001A49 488B4E01                        mov rcx, qword [rsi + 1]
  1990 00001A4D 4839D1                          cmp rcx, rdx
  1991 00001A50 0F8D59030000                    jge L_error_integer_range
  1992 00001A56 4883F900                        cmp rcx, 0
  1993 00001A5A 0F8C4F030000                    jl L_error_integer_range
  1994 00001A60 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
  1995 00001A64 BF02000000                      mov rdi, 2
  1996 00001A69 E836EDFFFF                      call malloc
  1997 00001A6E C60002                          mov byte [rax], T_char
  1998 00001A71 885801                          mov byte [rax + 1], bl
  1999                                          LEAVE
    38 00001A74 C9                  <1>  leave
  2000 00001A75 C22000                          ret AND_KILL_FRAME(2)
  2001                                  
  2002                                  L_code_ptr_vector_ref:
  2003                                          ENTER
    33 00001A78 C8000000            <1>  enter 0, 0
    34 00001A7C 4883E4F0            <1>  and rsp, ~15
  2004 00001A80 48837D1802                      cmp COUNT, 2
  2005 00001A85 0F85BF030000                    jne L_error_arg_count_2
  2006 00001A8B 488B7D20                        mov rdi, PARAM(0)
  2007                                          assert_vector(rdi)
    42 00001A8F 803F22              <1>  cmp byte [%1], %2
    43 00001A92 0F8551040000        <1>  jne L_error_incorrect_type
  2008 00001A98 488B7528                        mov rsi, PARAM(1)
  2009                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001A9C 803E11              <2>  cmp byte [%1], %2
    43 00001A9F 0F8544040000        <2>  jne L_error_incorrect_type
    48 00001AA5 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001AAA 0F8539040000        <1>  jne L_error_incorrect_type
  2010 00001AB0 488B5701                        mov rdx, qword [rdi + 1]
  2011 00001AB4 488B4E01                        mov rcx, qword [rsi + 1]
  2012 00001AB8 4839D1                          cmp rcx, rdx
  2013 00001ABB 0F8DEE020000                    jge L_error_integer_range
  2014 00001AC1 4883F900                        cmp rcx, 0
  2015 00001AC5 0F8CE4020000                    jl L_error_integer_range
  2016 00001ACB 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
  2017                                          LEAVE
    38 00001AD0 C9                  <1>  leave
  2018 00001AD1 C22000                          ret AND_KILL_FRAME(2)
  2019                                  
  2020                                  L_code_ptr_vector_set:
  2021                                          ENTER
    33 00001AD4 C8000000            <1>  enter 0, 0
    34 00001AD8 4883E4F0            <1>  and rsp, ~15
  2022 00001ADC 48837D1803                      cmp COUNT, 3
  2023 00001AE1 0F85CD030000                    jne L_error_arg_count_3
  2024 00001AE7 488B7D20                        mov rdi, PARAM(0)
  2025                                          assert_vector(rdi)
    42 00001AEB 803F22              <1>  cmp byte [%1], %2
    43 00001AEE 0F85F5030000        <1>  jne L_error_incorrect_type
  2026 00001AF4 488B7528                        mov rsi, PARAM(1)
  2027                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001AF8 803E11              <2>  cmp byte [%1], %2
    43 00001AFB 0F85E8030000        <2>  jne L_error_incorrect_type
    48 00001B01 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001B06 0F85DD030000        <1>  jne L_error_incorrect_type
  2028 00001B0C 488B5701                        mov rdx, qword [rdi + 1]
  2029 00001B10 488B4E01                        mov rcx, qword [rsi + 1]
  2030 00001B14 4839D1                          cmp rcx, rdx
  2031 00001B17 0F8D92020000                    jge L_error_integer_range
  2032 00001B1D 4883F900                        cmp rcx, 0
  2033 00001B21 0F8C88020000                    jl L_error_integer_range
  2034 00001B27 488B4530                        mov rax, PARAM(2)
  2035 00001B2B 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
  2036 00001B30 48B8-                           mov rax, sob_void
  2036 00001B32 [0000000000000000] 
  2037                                          LEAVE
    38 00001B3A C9                  <1>  leave
  2038 00001B3B C22800                          ret AND_KILL_FRAME(3)
  2039                                  
  2040                                  L_code_ptr_string_set:
  2041                                          ENTER
    33 00001B3E C8000000            <1>  enter 0, 0
    34 00001B42 4883E4F0            <1>  and rsp, ~15
  2042 00001B46 48837D1803                      cmp COUNT, 3
  2043 00001B4B 0F8563030000                    jne L_error_arg_count_3
  2044 00001B51 488B7D20                        mov rdi, PARAM(0)
  2045                                          assert_string(rdi)
    42 00001B55 803F03              <1>  cmp byte [%1], %2
    43 00001B58 0F858B030000        <1>  jne L_error_incorrect_type
  2046 00001B5E 488B7528                        mov rsi, PARAM(1)
  2047                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001B62 803E11              <2>  cmp byte [%1], %2
    43 00001B65 0F857E030000        <2>  jne L_error_incorrect_type
    48 00001B6B 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001B70 0F8573030000        <1>  jne L_error_incorrect_type
  2048 00001B76 488B5701                        mov rdx, qword [rdi + 1]
  2049 00001B7A 488B4E01                        mov rcx, qword [rsi + 1]
  2050 00001B7E 4839D1                          cmp rcx, rdx
  2051 00001B81 0F8D28020000                    jge L_error_integer_range
  2052 00001B87 4883F900                        cmp rcx, 0
  2053 00001B8B 0F8C1E020000                    jl L_error_integer_range
  2054 00001B91 488B4530                        mov rax, PARAM(2)
  2055                                          assert_char(rax)
    42 00001B95 803802              <1>  cmp byte [%1], %2
    43 00001B98 0F854B030000        <1>  jne L_error_incorrect_type
  2056 00001B9E 8A4001                          mov al, byte [rax + 1]
  2057 00001BA1 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
  2058 00001BA5 48B8-                           mov rax, sob_void
  2058 00001BA7 [0000000000000000] 
  2059                                          LEAVE
    38 00001BAF C9                  <1>  leave
  2060 00001BB0 C22800                          ret AND_KILL_FRAME(3)
  2061                                  
  2062                                  L_code_ptr_make_vector:
  2063                                          ENTER
    33 00001BB3 C8000000            <1>  enter 0, 0
    34 00001BB7 4883E4F0            <1>  and rsp, ~15
  2064 00001BBB 48837D1802                      cmp COUNT, 2
  2065 00001BC0 0F8584020000                    jne L_error_arg_count_2
  2066 00001BC6 488B4D20                        mov rcx, PARAM(0)
  2067                                          assert_integer(rcx)
    47                              <1>  assert_rational(%1)
    42 00001BCA 803911              <2>  cmp byte [%1], %2
    43 00001BCD 0F8516030000        <2>  jne L_error_incorrect_type
    48 00001BD3 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001BD8 0F850B030000        <1>  jne L_error_incorrect_type
  2068 00001BDE 488B4901                        mov rcx, qword [rcx + 1]
  2069 00001BE2 4883F900                        cmp rcx, 0
  2070 00001BE6 0F8CC3010000                    jl L_error_integer_range
  2071 00001BEC 488B5528                        mov rdx, PARAM(1)
  2072 00001BF0 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
  2073 00001BF8 E8A7EBFFFF                      call malloc
  2074 00001BFD C60022                          mov byte [rax], T_vector
  2075 00001C00 48894801                        mov qword [rax + 1], rcx
  2076 00001C04 41B800000000                    mov r8, 0
  2077                                  .L0:
  2078 00001C0A 4939C8                          cmp r8, rcx
  2079 00001C0D 740A                            je .L1
  2080 00001C0F 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
  2081 00001C14 49FFC0                          inc r8
  2082 00001C17 EBF1                            jmp .L0
  2083                                  .L1:
  2084                                          LEAVE
    38 00001C19 C9                  <1>  leave
  2085 00001C1A C22000                          ret AND_KILL_FRAME(2)
  2086                                          
  2087                                  L_code_ptr_make_string:
  2088                                          ENTER
    33 00001C1D C8000000            <1>  enter 0, 0
    34 00001C21 4883E4F0            <1>  and rsp, ~15
  2089 00001C25 48837D1802                      cmp COUNT, 2
  2090 00001C2A 0F851A020000                    jne L_error_arg_count_2
  2091 00001C30 488B4D20                        mov rcx, PARAM(0)
  2092                                          assert_integer(rcx)
    47                              <1>  assert_rational(%1)
    42 00001C34 803911              <2>  cmp byte [%1], %2
    43 00001C37 0F85AC020000        <2>  jne L_error_incorrect_type
    48 00001C3D 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001C42 0F85A1020000        <1>  jne L_error_incorrect_type
  2093 00001C48 488B4901                        mov rcx, qword [rcx + 1]
  2094 00001C4C 4883F900                        cmp rcx, 0
  2095 00001C50 0F8C59010000                    jl L_error_integer_range
  2096 00001C56 488B5528                        mov rdx, PARAM(1)
  2097                                          assert_char(rdx)
    42 00001C5A 803A02              <1>  cmp byte [%1], %2
    43 00001C5D 0F8586020000        <1>  jne L_error_incorrect_type
  2098 00001C63 8A5201                          mov dl, byte [rdx + 1]
  2099 00001C66 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
  2100 00001C6A E835EBFFFF                      call malloc
  2101 00001C6F C60003                          mov byte [rax], T_string
  2102 00001C72 48894801                        mov qword [rax + 1], rcx
  2103 00001C76 41B800000000                    mov r8, 0
  2104                                  .L0:
  2105 00001C7C 4939C8                          cmp r8, rcx
  2106 00001C7F 740A                            je .L1
  2107 00001C81 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
  2108 00001C86 49FFC0                          inc r8
  2109 00001C89 EBF1                            jmp .L0
  2110                                  .L1:
  2111                                          LEAVE
    38 00001C8B C9                  <1>  leave
  2112 00001C8C C22000                          ret AND_KILL_FRAME(2)
  2113                                  
  2114                                  L_code_ptr_numerator:
  2115                                          ENTER
    33 00001C8F C8000000            <1>  enter 0, 0
    34 00001C93 4883E4F0            <1>  and rsp, ~15
  2116 00001C97 48837D1801                      cmp COUNT, 1
  2117 00001C9C 0F8573010000                    jne L_error_arg_count_1
  2118 00001CA2 488B4520                        mov rax, PARAM(0)
  2119                                          assert_rational(rax)
    42 00001CA6 803811              <1>  cmp byte [%1], %2
    43 00001CA9 0F853A020000        <1>  jne L_error_incorrect_type
  2120 00001CAF 488B7801                        mov rdi, qword [rax + 1]
  2121 00001CB3 E8D1000000                      call make_integer
  2122                                          LEAVE
    38 00001CB8 C9                  <1>  leave
  2123 00001CB9 C21800                          ret AND_KILL_FRAME(1)
  2124                                          
  2125                                  L_code_ptr_denominator:
  2126                                          ENTER
    33 00001CBC C8000000            <1>  enter 0, 0
    34 00001CC0 4883E4F0            <1>  and rsp, ~15
  2127 00001CC4 48837D1801                      cmp COUNT, 1
  2128 00001CC9 0F8546010000                    jne L_error_arg_count_1
  2129 00001CCF 488B4520                        mov rax, PARAM(0)
  2130                                          assert_rational(rax)
    42 00001CD3 803811              <1>  cmp byte [%1], %2
    43 00001CD6 0F850D020000        <1>  jne L_error_incorrect_type
  2131 00001CDC 488B7809                        mov rdi, qword [rax + 1 + 8]
  2132 00001CE0 E8A4000000                      call make_integer
  2133                                          LEAVE
    38 00001CE5 C9                  <1>  leave
  2134 00001CE6 C21800                          ret AND_KILL_FRAME(1)
  2135                                  
  2136                                  L_code_ptr_eq:
  2137                                  	ENTER
    33 00001CE9 C8000000            <1>  enter 0, 0
    34 00001CED 4883E4F0            <1>  and rsp, ~15
  2138 00001CF1 48837D1802              	cmp COUNT, 2
  2139 00001CF6 0F854E010000            	jne L_error_arg_count_2
  2140 00001CFC 488B7D20                	mov rdi, PARAM(0)
  2141 00001D00 488B7528                	mov rsi, PARAM(1)
  2142 00001D04 4839F7                  	cmp rdi, rsi
  2143 00001D07 744A                    	je .L_eq_true
  2144 00001D09 8A17                    	mov dl, byte [rdi]
  2145 00001D0B 3A16                    	cmp dl, byte [rsi]
  2146 00001D0D 7550                    	jne .L_eq_false
  2147 00001D0F 80FA02                  	cmp dl, T_char
  2148 00001D12 7437                    	je .L_char
  2149 00001D14 80FA04                  	cmp dl, T_symbol
  2150 00001D17 742A                    	je .L_symbol
  2151 00001D19 80FA12                  	cmp dl, T_real
  2152 00001D1C 741D                    	je .L_real
  2153 00001D1E 80FA11                  	cmp dl, T_rational
  2154 00001D21 7402                    	je .L_rational
  2155 00001D23 EB3A                    	jmp .L_eq_false
  2156                                  .L_rational:
  2157 00001D25 488B4601                	mov rax, qword [rsi + 1]
  2158 00001D29 483B4701                	cmp rax, qword [rdi + 1]
  2159 00001D2D 7530                    	jne .L_eq_false
  2160 00001D2F 488B4609                	mov rax, qword [rsi + 1 + 8]
  2161 00001D33 483B4709                	cmp rax, qword [rdi + 1 + 8]
  2162 00001D37 7526                    	jne .L_eq_false
  2163 00001D39 EB18                    	jmp .L_eq_true
  2164                                  .L_real:
  2165 00001D3B 488B4601                	mov rax, qword [rsi + 1]
  2166 00001D3F 483B4701                	cmp rax, qword [rdi + 1]
  2167                                  .L_symbol:
  2168                                  	; never reached, because symbols are static!
  2169                                  	; but I'm keeping it in case, I'll ever change
  2170                                  	; the implementation
  2171 00001D43 488B4601                	mov rax, qword [rsi + 1]
  2172 00001D47 483B4701                	cmp rax, qword [rdi + 1]
  2173                                  .L_char:
  2174 00001D4B 8A5E01                  	mov bl, byte [rsi + 1]
  2175 00001D4E 3A5F01                  	cmp bl, byte [rdi + 1]
  2176 00001D51 750C                    	jne .L_eq_false
  2177                                  .L_eq_true:
  2178 00001D53 48B8-                   	mov rax, sob_boolean_true
  2178 00001D55 [0300000000000000] 
  2179 00001D5D EB0A                    	jmp .L_eq_exit
  2180                                  .L_eq_false:
  2181 00001D5F 48B8-                   	mov rax, sob_boolean_false
  2181 00001D61 [0200000000000000] 
  2182                                  .L_eq_exit:
  2183                                  	LEAVE
    38 00001D69 C9                  <1>  leave
  2184 00001D6A C22000                  	ret AND_KILL_FRAME(2)
  2185                                  
  2186                                  make_real:
  2187                                          ENTER
    33 00001D6D C8000000            <1>  enter 0, 0
    34 00001D71 4883E4F0            <1>  and rsp, ~15
  2188 00001D75 BF09000000                      mov rdi, (1 + 8)
  2189 00001D7A E825EAFFFF                      call malloc
  2190 00001D7F C60012                          mov byte [rax], T_real
  2191 00001D82 F20F114001                      movsd qword [rax + 1], xmm0
  2192                                          LEAVE
    38 00001D87 C9                  <1>  leave
  2193 00001D88 C3                              ret
  2194                                          
  2195                                  make_integer:
  2196                                          ENTER
    33 00001D89 C8000000            <1>  enter 0, 0
    34 00001D8D 4883E4F0            <1>  and rsp, ~15
  2197 00001D91 4889FE                          mov rsi, rdi
  2198 00001D94 BF11000000                      mov rdi, (1 + 8 + 8)
  2199 00001D99 E806EAFFFF                      call malloc
  2200 00001D9E C60011                          mov byte [rax], T_rational
  2201 00001DA1 48897001                        mov qword [rax + 1], rsi
  2202 00001DA5 48C7400901000000                mov qword [rax + 1 + 8], 1
  2203                                          LEAVE
    38 00001DAD C9                  <1>  leave
  2204 00001DAE C3                              ret
  2205                                          
  2206                                  L_error_integer_range:
  2207 00001DAF 488B3C25[00000000]              mov rdi, qword [stderr]
  2208 00001DB7 48BE-                           mov rsi, fmt_integer_range
  2208 00001DB9 [3C03000000000000] 
  2209 00001DC1 B800000000                      mov rax, 0
  2210                                  	ENTER
    33 00001DC6 C8000000            <1>  enter 0, 0
    34 00001DCA 4883E4F0            <1>  and rsp, ~15
  2211 00001DCE E8(00000000)                    call fprintf
  2212                                  	LEAVE
    38 00001DD3 C9                  <1>  leave
  2213 00001DD4 48C7C0FBFFFFFF                  mov rax, -5
  2214 00001DDB E8(00000000)                    call exit
  2215                                  
  2216                                  L_error_arg_count_0:
  2217 00001DE0 488B3C25[00000000]              mov rdi, qword [stderr]
  2218 00001DE8 48BE-                           mov rsi, fmt_arg_count_0
  2218 00001DEA [3A02000000000000] 
  2219 00001DF2 488B5518                        mov rdx, COUNT
  2220 00001DF6 B800000000                      mov rax, 0
  2221                                  	ENTER
    33 00001DFB C8000000            <1>  enter 0, 0
    34 00001DFF 4883E4F0            <1>  and rsp, ~15
  2222 00001E03 E8(00000000)                    call fprintf
  2223                                  	LEAVE
    38 00001E08 C9                  <1>  leave
  2224 00001E09 48C7C0FDFFFFFF                  mov rax, -3
  2225 00001E10 E8(00000000)                    call exit
  2226                                  
  2227                                  L_error_arg_count_1:
  2228 00001E15 488B3C25[00000000]              mov rdi, qword [stderr]
  2229 00001E1D 48BE-                           mov rsi, fmt_arg_count_1
  2229 00001E1F [6202000000000000] 
  2230 00001E27 488B5518                        mov rdx, COUNT
  2231 00001E2B B800000000                      mov rax, 0
  2232                                  	ENTER
    33 00001E30 C8000000            <1>  enter 0, 0
    34 00001E34 4883E4F0            <1>  and rsp, ~15
  2233 00001E38 E8(00000000)                    call fprintf
  2234                                  	LEAVE
    38 00001E3D C9                  <1>  leave
  2235 00001E3E 48C7C0FDFFFFFF                  mov rax, -3
  2236 00001E45 E8(00000000)                    call exit
  2237                                  
  2238                                  L_error_arg_count_2:
  2239 00001E4A 488B3C25[00000000]              mov rdi, qword [stderr]
  2240 00001E52 48BE-                           mov rsi, fmt_arg_count_2
  2240 00001E54 [C802000000000000] 
  2241 00001E5C 488B5518                        mov rdx, COUNT
  2242 00001E60 B800000000                      mov rax, 0
  2243                                  	ENTER
    33 00001E65 C8000000            <1>  enter 0, 0
    34 00001E69 4883E4F0            <1>  and rsp, ~15
  2244 00001E6D E8(00000000)                    call fprintf
  2245                                  	LEAVE
    38 00001E72 C9                  <1>  leave
  2246 00001E73 48C7C0FDFFFFFF                  mov rax, -3
  2247 00001E7A E8(00000000)                    call exit
  2248                                  
  2249                                  L_error_arg_count_12:
  2250 00001E7F 488B3C25[00000000]              mov rdi, qword [stderr]
  2251 00001E87 48BE-                           mov rsi, fmt_arg_count_12
  2251 00001E89 [8802000000000000] 
  2252 00001E91 488B5518                        mov rdx, COUNT
  2253 00001E95 B800000000                      mov rax, 0
  2254                                  	ENTER
    33 00001E9A C8000000            <1>  enter 0, 0
    34 00001E9E 4883E4F0            <1>  and rsp, ~15
  2255 00001EA2 E8(00000000)                    call fprintf
  2256                                  	LEAVE
    38 00001EA7 C9                  <1>  leave
  2257 00001EA8 48C7C0FDFFFFFF                  mov rax, -3
  2258 00001EAF E8(00000000)                    call exit
  2259                                  
  2260                                  L_error_arg_count_3:
  2261 00001EB4 488B3C25[00000000]              mov rdi, qword [stderr]
  2262 00001EBC 48BE-                           mov rsi, fmt_arg_count_3
  2262 00001EBE [EF02000000000000] 
  2263 00001EC6 488B5518                        mov rdx, COUNT
  2264 00001ECA B800000000                      mov rax, 0
  2265                                  	ENTER
    33 00001ECF C8000000            <1>  enter 0, 0
    34 00001ED3 4883E4F0            <1>  and rsp, ~15
  2266 00001ED7 E8(00000000)                    call fprintf
  2267                                  	LEAVE
    38 00001EDC C9                  <1>  leave
  2268 00001EDD 48C7C0FDFFFFFF                  mov rax, -3
  2269 00001EE4 E8(00000000)                    call exit
  2270                                          
  2271                                  L_error_incorrect_type:
  2272 00001EE9 488B3C25[00000000]              mov rdi, qword [stderr]
  2273 00001EF1 48BE-                           mov rsi, fmt_type
  2273 00001EF3 [1803000000000000] 
  2274 00001EFB B800000000                      mov rax, 0
  2275                                  	ENTER
    33 00001F00 C8000000            <1>  enter 0, 0
    34 00001F04 4883E4F0            <1>  and rsp, ~15
  2276 00001F08 E8(00000000)                    call fprintf
  2277                                  	LEAVE
    38 00001F0D C9                  <1>  leave
  2278 00001F0E 48C7C0FCFFFFFF                  mov rax, -4
  2279 00001F15 E8(00000000)                    call exit
  2280                                  
  2281                                  L_error_division_by_zero:
  2282 00001F1A 488B3C25[00000000]              mov rdi, qword [stderr]
  2283 00001F22 48BE-                           mov rsi, fmt_division_by_zero
  2283 00001F24 [5903000000000000] 
  2284 00001F2C B800000000                      mov rax, 0
  2285                                  	ENTER
    33 00001F31 C8000000            <1>  enter 0, 0
    34 00001F35 4883E4F0            <1>  and rsp, ~15
  2286 00001F39 E8(00000000)                    call fprintf
  2287                                  	LEAVE
    38 00001F3E C9                  <1>  leave
  2288 00001F3F 48C7C0F8FFFFFF                  mov rax, -8
  2289 00001F46 E8(00000000)                    call exit
  2290                                  
  2291                                  section .data
  2292                                  fmt_char:
  2293 00000237 256300                          db `%c\0`
  2294                                  fmt_arg_count_0:
  2295 0000023A 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
  2295 00000243 74696E67207A65726F-
  2295 0000024C 20617267756D656E74-
  2295 00000255 732E20466F756E6420-
  2295 0000025E 25640A00           
  2296                                  fmt_arg_count_1:
  2297 00000262 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
  2297 0000026B 74696E67206F6E6520-
  2297 00000274 617267756D656E742E-
  2297 0000027D 20466F756E64202564-
  2297 00000286 0A00               
  2298                                  fmt_arg_count_12:
  2299 00000288 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
  2299 00000291 74696E67206F6E6520-
  2299 0000029A 726571756972656420-
  2299 000002A3 616E64206F6E65206F-
  2299 000002AC 7074696F6E616C2061-
  2299 000002B5 7267756D656E742E20-
  2299 000002BE 466F756E642025640A-
  2299 000002C7 00                 
  2300                                  fmt_arg_count_2:
  2301 000002C8 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
  2301 000002D1 74696E672074776F20-
  2301 000002DA 617267756D656E7473-
  2301 000002E3 2E20466F756E642025-
  2301 000002EC 640A00             
  2302                                  fmt_arg_count_3:
  2303 000002EF 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
  2303 000002F8 74696E672074687265-
  2303 00000301 6520617267756D656E-
  2303 0000030A 74732E20466F756E64-
  2303 00000313 2025640A00         
  2304                                  fmt_type:
  2305 00000318 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
  2305 00000321 696F6E207061737365-
  2305 0000032A 6420696E636F727265-
  2305 00000333 637420747970650A00 
  2306                                  fmt_integer_range:
  2307 0000033C 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
  2307 00000345 7265637420696E7465-
  2307 0000034E 6765722072616E6765-
  2307 00000357 0A00               
  2308                                  fmt_division_by_zero:
  2309 00000359 212121204469766973-             db `!!! Division by zero\n\0`
  2309 00000362 696F6E206279207A65-
  2309 0000036B 726F0A00           
  2310                                  fmt_scheme_error_part_1:
  2311 0000036F 0A2121212054686520-             db `\n!!! The procedure \0`
  2311 00000378 70726F636564757265-
  2311 00000381 2000               
  2312                                  fmt_scheme_error_part_2:
  2313 00000383 2061736B656420746F-             db ` asked to terminate the program\n`
  2313 0000038C 207465726D696E6174-
  2313 00000395 65207468652070726F-
  2313 0000039E 6772616D0A         
  2314 000003A3 202020207769746820-             db `    with the following message:\n\n\0`
  2314 000003AC 74686520666F6C6C6F-
  2314 000003B5 77696E67206D657373-
  2314 000003BE 6167653A0A0A00     
  2315                                  fmt_scheme_error_part_3:
  2316 000003C5 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
  2316 000003CE 210A0A00           
